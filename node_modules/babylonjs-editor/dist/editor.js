!function(e){function t(e){Object.defineProperty(this,e,{enumerable:!0,get:function(){return this[v][e]}})}function r(e){if("undefined"!=typeof System&&System.isModule?System.isModule(e):"[object Module]"===Object.prototype.toString.call(e))return e;var t={default:e,__useDefault:e};if(e&&e.__esModule)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return new o(t)}function o(e){Object.defineProperty(this,v,{value:e}),Object.keys(e).forEach(t,this)}function n(e){return"@node/"===e.substr(0,6)?c(e,r(m(e.substr(6))),{}):p[e]}function u(e){var t=n(e);if(!t)throw new Error('Module "'+e+'" expected, but not contained in build.');if(t.module)return t.module;var r=t.linkRecord;return i(t,r),a(t,r,[]),t.module}function i(e,t){if(!t.depLoads){t.declare&&d(e,t),t.depLoads=[];for(var r=0;r<t.deps.length;r++){var o=n(t.deps[r]);t.depLoads.push(o),o.linkRecord&&i(o,o.linkRecord);var u=t.setters&&t.setters[r];u&&(u(o.module||o.linkRecord.moduleObj),o.importerSetters.push(u))}return e}}function d(t,r){var o=r.moduleObj,n=t.importerSetters,u=!1,i=r.declare.call(e,function(e,t){if(!u){if("object"==typeof e)for(var r in e)"__useDefault"!==r&&(o[r]=e[r]);else o[e]=t;u=!0;for(var i=0;i<n.length;i++)n[i](o);return u=!1,t}},{id:t.key});"function"!=typeof i?(r.setters=i.setters,r.execute=i.execute):(r.setters=[],r.execute=i)}function l(e,t,r){return p[e]={key:e,module:void 0,importerSetters:[],linkRecord:{deps:t,depLoads:void 0,declare:r,setters:void 0,execute:void 0,moduleObj:{}}}}function f(e,t,r,o){var n={};return p[e]={key:e,module:void 0,importerSetters:[],linkRecord:{deps:t,depLoads:void 0,declare:void 0,execute:o,executingRequire:r,moduleObj:{default:n,__useDefault:n},setters:void 0}}}function s(e,t,r){return function(o){for(var n=0;n<e.length;n++)if(e[n]===o){var u,i=t[n],d=i.linkRecord;return u=d?-1===r.indexOf(i)?a(i,d,r):d.moduleObj:i.module,"__useDefault"in u?u.__useDefault:u}}}function a(t,r,n){if(n.push(t),t.module)return t.module;var u;if(r.setters){for(var i=0;i<r.deps.length;i++){var d=r.depLoads[i],l=d.linkRecord;l&&-1===n.indexOf(d)&&(u=a(d,l,l.setters?n:[]))}r.execute.call(y)}else{var f={id:t.key},c=r.moduleObj;Object.defineProperty(f,"exports",{configurable:!0,set:function(e){c.default=c.__useDefault=e},get:function(){return c.__useDefault}});var p=s(r.deps,r.depLoads,n);if(!r.executingRequire)for(var i=0;i<r.deps.length;i++)p(r.deps[i]);var v=r.execute.call(e,p,c.__useDefault,f);void 0!==v?c.default=c.__useDefault=v:f.exports!==c.__useDefault&&(c.default=c.__useDefault=f.exports);var m=c.__useDefault;if(m&&m.__esModule)for(var b in m)Object.hasOwnProperty.call(m,b)&&(c[b]=m[b])}var f=t.module=new o(r.moduleObj);if(!r.setters)for(var i=0;i<t.importerSetters.length;i++)t.importerSetters[i](f);return f}function c(e,t){return p[e]={key:e,module:t,importerSetters:[],linkRecord:void 0}}var p={},v="undefined"!=typeof Symbol?Symbol():"@@baseObject";o.prototype=Object.create(null),"undefined"!=typeof Symbol&&Symbol.toStringTag&&(o.prototype[Symbol.toStringTag]="Module");var m="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&"undefined"!=typeof require.resolve&&"undefined"!=typeof process&&process.platform&&require,y={};return Object.freeze&&Object.freeze(y),function(e,t,n,i){return function(d){d(function(d){var s={_nodeRequire:m,register:l,registerDynamic:f,registry:{get:function(e){return p[e].module},set:c},newModule:function(e){return new o(e)}};c("@empty",new o({}));for(var a=0;a<t.length;a++)c(t[a],r(arguments[a],{}));i(s);var v=u(e[0]);if(e.length>1)for(var a=1;a<e.length;a++)u(e[a]);return n?v.__useDefault:(v instanceof o&&Object.defineProperty(v,"__esModule",{value:!0}),v)})}}}("undefined"!=typeof self?self:"undefined"!=typeof global?global:this)

(["a"], ["c","20","36","13","65","28","63","62","58"], true, function($__System) {
var require = this.require, exports = this.exports, module = this.module;
$__System.registerDynamic("b", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var Core = /** @class */function () {
        /**
         * Constructor
         */
        function Core() {
            var _this = this;
            this.scenes = [];
            this.uiTextures = [];
            this.currentSelectedObject = null;
            this.disableObjectSelection = false;
            this.updates = [];
            this.onSelectObject = new babylonjs_1.Observable();
            this.onSelectAsset = new babylonjs_1.Observable();
            this.onResize = new babylonjs_1.Observable();
            this.onAddObject = new babylonjs_1.Observable();
            this.onRemoveObject = new babylonjs_1.Observable();
            this.onGlobalPropertyChange = new babylonjs_1.Observable();
            this.renderScenes = true;
            // Register on events
            this.onSelectObject.add(function (object) {
                return _this.currentSelectedObject = object;
            });
        }
        /**
         * Removes the given scene from the registered scenes
         * @param scene: the scene reference to remove
         */
        Core.prototype.removeScene = function (scene, dispose) {
            var index = this.scenes.findIndex(function (s) {
                return s === scene;
            });
            if (index !== -1) {
                dispose && scene.dispose();
                this.scenes.splice(index, 1);
                return true;
            }
            return false;
        };
        /**
         * Removes the given UI (advanced texture) from the registered UIS
         * @param ui: the ui advanced texture reference to remove
         */
        Core.prototype.removeUI = function (ui, dispose) {
            var index = this.uiTextures.findIndex(function (u) {
                return u === ui;
            });
            if (index !== -1) {
                dispose && ui.dispose();
                this.uiTextures.splice(index, 1);
                return true;
            }
            return false;
        };
        /**
         * Updates the rendering + notify updaters
         */
        Core.prototype.update = function () {
            if (!this.renderScenes) return;
            // On pre update
            this.updates.forEach(function (u) {
                return u.onPreUpdate && u.onPreUpdate();
            });
            // Update (render) scenes
            this.scenes.forEach(function (s) {
                return s.render();
            });
            // On post update
            this.updates.forEach(function (u) {
                return u.onPostUpdate && u.onPostUpdate();
            });
        };
        return Core;
    }();
    exports.default = Core;

});
$__System.registerDynamic("d", ["c", "e", "f", "10", "11"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var tools_1 = $__require("e");
    var window_1 = $__require("f");
    var picker_1 = $__require("10");
    var scene_factory_1 = $__require("11");
    var SceneImporter = /** @class */function () {
        function SceneImporter() {}
        /**
         * Import meshes from
         * @param editor the editor reference
         */
        SceneImporter.ImportMeshesFromFile = function (editor) {
            var _this = this;
            tools_1.default.OpenFileDialog(function (files) {
                return __awaiter(_this, void 0, void 0, function () {
                    var babylonFile, _i, files_1, f, name_1, json, data, picker;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                babylonFile = null;
                                // Configure files
                                for (_i = 0, files_1 = files; _i < files_1.length; _i++) {
                                    f = files_1[_i];
                                    name_1 = f.name.toLowerCase();
                                    if (tools_1.default.GetFileExtension(f.name) === 'babylon') babylonFile = f;
                                    if (!babylonjs_1.FilesInput.FilesToLoad[name_1]) babylonjs_1.FilesInput.FilesToLoad[name_1] = f;
                                }
                                ;
                                return [4 /*yield*/, tools_1.default.ReadFileAsText(babylonFile)];
                            case 1:
                                json = _a.sent();
                                data = JSON.parse(json);
                                picker = new picker_1.default('ImportMeshesFrom');
                                picker.addItems(data.meshes);
                                picker.open(function (items) {
                                    // Import meshes
                                    var names = items.map(function (i) {
                                        return i.name;
                                    });
                                    babylonjs_1.SceneLoader.ImportMesh(names, 'file:', babylonFile.name, editor.core.scene, function (meshes) {
                                        // Configure
                                        meshes.forEach(function (m) {
                                            // Tags
                                            babylonjs_1.Tags.AddTagsTo(m, 'added');
                                            if (m.material) {
                                                babylonjs_1.Tags.AddTagsTo(m.material, 'added');
                                                if (m.material instanceof babylonjs_1.MultiMaterial) m.material.subMaterials.forEach(function (m) {
                                                    return babylonjs_1.Tags.AddTagsTo(m, 'added');
                                                });
                                            }
                                            // Id and name
                                            var id = m.id;
                                            var meshes = editor.core.scene.meshes.filter(function (m) {
                                                return m.id === id;
                                            });
                                            if (meshes.length > 1) m.id += babylonjs_1.Tools.RandomId();
                                            // Misc.
                                            m.isPickable = true;
                                            // Add to graph
                                            scene_factory_1.default.AddToGraph(editor, m);
                                        });
                                    }, null, function (scene, message) {
                                        window_1.default.CreateAlert(message, 'Error');
                                    });
                                });
                                return [2 /*return*/];
                        }
                    });
                });
            });
        };
        return SceneImporter;
    }();
    exports.default = SceneImporter;

});
$__System.registerDynamic("12", ["c", "13", "e", "f", "14"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var babylonjs_serializers_1 = $__require("13");
    var tools_1 = $__require("e");
    var window_1 = $__require("f");
    var form_1 = $__require("14");
    var SceneSerializer = /** @class */function () {
        /**
         * Constructor
         * @param scene: the scene to serializer
         */
        function SceneSerializer(scene) {
            var _this = this;
            // Create window
            var window = new window_1.default('Scene Serializer');
            window.buttons = ['Ok', 'Cancel'];
            window.width = 400;
            window.height = 190;
            window.body = "<div id=\"SCENE-SERIALIZER-WINDOW\" style=\"width: 100%; height: 100%\"></div>";
            window.open();
            // Form
            var form = new form_1.default('SceneSerializer');
            form.fields = [{ name: 'name', type: 'text', required: true }, { name: 'format', type: 'list', required: true, options: { items: ['GLB', 'GLTF', 'OBJ'] } }, { name: 'lights', type: 'checkbox', html: { caption: 'Lights (for GLTF)' } }];
            form.build('SCENE-SERIALIZER-WINDOW');
            // Set default values
            form.element.record['name'] = 'scene';
            form.element.record['format'] = 'GLB';
            form.element.refresh();
            // Events
            window.onButtonClick = function (id) {
                return __awaiter(_this, void 0, void 0, function () {
                    var name, format, _a, obj, file, e_1, lights, serializedScene, json, file;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                window.close();
                                if (id === 'Cancel') return [2 /*return*/, form.element.destroy()];
                                if (!form.isValid()) return [2 /*return*/];
                                name = form.element.record['name'];
                                format = form.element.record['format'].id;
                                _b.label = 1;
                            case 1:
                                _b.trys.push([1, 9,, 10]);
                                _a = format;
                                switch (_a) {
                                    case 'GLB':
                                        return [3 /*break*/, 2];
                                    case 'GLTF':
                                        return [3 /*break*/, 4];
                                    case 'OBJ':
                                        return [3 /*break*/, 6];
                                }
                                return [3 /*break*/, 7];
                            case 2:
                                return [4 /*yield*/, babylonjs_serializers_1.GLTF2Export.GLBAsync(scene, name, {})];
                            case 3:
                                _b.sent().downloadFiles();
                                return [3 /*break*/, 8];
                            case 4:
                                return [4 /*yield*/, babylonjs_serializers_1.GLTF2Export.GLTFAsync(scene, name, {})];
                            case 5:
                                _b.sent().downloadFiles();
                                return [3 /*break*/, 8];
                            case 6:
                                obj = babylonjs_serializers_1.OBJExport.OBJ(scene.meshes, true);
                                file = tools_1.default.CreateFile(tools_1.default.ConvertStringToUInt8Array(obj), 'scene.obj');
                                babylonjs_1.Tools.Download(file, 'scene.obj');
                                return [3 /*break*/, 8];
                            case 7:
                                return [2 /*return*/];
                            case 8:
                                return [3 /*break*/, 10];
                            case 9:
                                e_1 = _b.sent();
                                window_1.default.CreateAlert(e_1.message, 'Error when exporting the scene');
                                return [3 /*break*/, 10];
                            case 10:
                                lights = form.element.record['lights'];
                                if ((format === 'GLB' || format === 'GLTF') && lights) {
                                    serializedScene = babylonjs_1.SceneSerializer.Serialize(scene);
                                    json = JSON.stringify({ lights: serializedScene.lights }, null, '\t');
                                    file = tools_1.default.CreateFile(tools_1.default.ConvertStringToUInt8Array(json), 'lights.json');
                                    babylonjs_1.Tools.Download(file, 'lights.json');
                                }
                                // Clear
                                form.element.destroy();
                                return [2 /*return*/];
                        }
                    });
                });
            };
        }
        return SceneSerializer;
    }();
    exports.default = SceneSerializer;

});
$__System.registerDynamic("15", ["16", "f", "17", "e", "18", "19", "1a", "11", "d", "1b", "12", "1c", "1d", "1e"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var toolbar_1 = $__require("16");
    var window_1 = $__require("f");
    var dialog_1 = $__require("17");
    var tools_1 = $__require("e");
    var undo_redo_1 = $__require("18");
    var theme_1 = $__require("19");
    var scene_exporter_1 = $__require("1a");
    var scene_factory_1 = $__require("11");
    var scene_importer_1 = $__require("d");
    var scene_manager_1 = $__require("1b");
    var scene_serializer_1 = $__require("12");
    var project_importer_1 = $__require("1c");
    var project_exporter_1 = $__require("1d");
    var project_code_editor_1 = $__require("1e");
    var EditorToolbar = /** @class */function () {
        /**
         * Constructor
         * @param editor: the editor's reference
         */
        function EditorToolbar(editor) {
            var _this = this;
            this.editor = editor;
            // Build main toolbar
            this.main = new toolbar_1.default('MainToolBar');
            this.main.items = [{
                type: 'menu', id: 'project', text: 'Project', img: 'icon-folder', items: [{ id: 'import-project', img: 'icon-export', text: 'Import Project...' }, { type: 'break' }, { id: 'reload-project', img: 'icon-copy', text: 'Reload...' }, { id: 'new-project', img: 'icon-copy', text: 'New Project...' }, { type: 'break' }, { id: 'export-project', img: 'icon-files', text: 'Save Project...' }, { id: 'download-project', img: 'icon-files', text: 'Save Project As...' }, { type: 'break' }, { id: 'export-template', img: 'icon-files-project', text: 'Export Template...' }]
            }, {
                type: 'menu', id: 'scene', text: 'Scene', img: 'icon-scene', items: [{ id: 'import-meshes-from', img: 'icon-add', text: 'Import Meshes From...' }, { type: 'break' }, { id: 'download-scene', img: 'icon-export', text: 'Download Scene...' }, { id: 'serialize-scene', img: 'icon-export', text: 'Download Scene As...' }]
            }, { type: 'break' }, {
                type: 'menu', id: 'edit', text: 'Edit', img: 'icon-edit', items: [{ id: 'undo', img: 'icon-undo', text: 'Undo' }, { id: 'redo', img: 'icon-redo', text: 'Redo' }, { type: 'break' }, { id: 'clean-materials', img: 'icon-recycle', text: 'Clean Unused Materials' }, { id: 'clean-textures', img: 'icon-recycle', text: 'Clean Unused Textures' }, { type: 'break' }, { id: 'set-theme-light', img: 'icon-helpers', text: 'Light Theme' }, { id: 'set-theme-dark', img: 'icon-helpers', text: 'Dark Theme' }]
            }, { type: 'break' }, {
                type: 'menu', id: 'view', text: 'View', img: 'icon-helpers', items: [{ id: 'textures', img: 'icon-dynamic-texture', text: 'Textures Viewer...' }, { id: 'materials', img: 'icon-effects', text: 'Materials Viewer...' }]
            }, { type: 'break' }, {
                type: 'menu', id: 'tools', text: 'Tools', img: 'icon-scenario', items: [{ id: 'animations', img: 'icon-animators', text: 'Animations Editor...' }, { type: 'break' }, { id: 'code-editor', img: 'icon-behavior-editor', text: 'Code Editor...' }, { id: 'graph-editor', img: 'icon-graph', text: 'Graph Editor...' }, { type: 'break' }, { id: 'material-editor', img: 'icon-shaders', text: 'Material Editor...' }, { id: 'post-process-editor', img: 'icon-shaders', text: 'Post-Process Editor...' },
                // { id: 'particles-creator', img: 'icon-particles', text: 'Particles Creator' },
                { type: 'break' }, { id: 'path-finder', img: 'icon-graph', text: 'Path Finder...' }, { type: 'break' }, { id: 'metadatas', img: 'icon-behavior-editor', text: 'Metadatas Editor...' }, { id: 'notes', img: 'icon-behavior-editor', text: 'Notes...' }]
            }, { type: 'break' }, {
                type: 'menu', id: 'add', text: 'Add', img: 'icon-add', items: [{ id: 'default-environment', img: 'icon-add', text: 'Default Environment' }, { type: 'break' }, { id: 'particle-system', img: 'icon-particles', text: 'Particle System' }, { id: 'particle-system-animated', img: 'icon-particles', text: 'Animated Particle System' }, { type: 'break;' }, { id: 'sky', img: 'icon-shaders', text: 'Sky Effect' }, { id: 'water', img: 'icon-water', text: 'Water Effect' }, { type: 'break' }, { id: 'dummy-node', img: 'icon-clone', text: 'Dummy' }, { id: 'ground', img: 'icon-mesh', text: 'Ground Mesh' }, { id: 'cube', img: 'icon-box-mesh', text: 'Cube Mesh' }, { id: 'sphere', img: 'icon-sphere-mesh', text: 'Sphere Mesh' }, { type: 'break' }, { id: 'point-light', img: 'icon-light', text: 'Point Light' }, { id: 'directional-light', img: 'icon-directional-light', text: 'Directional Light' }, { id: 'spot-light', img: 'icon-directional-light', text: 'Spot Light' }, { id: 'hemispheric-light', img: 'icon-light', text: 'Hemispheric Light' }, { type: 'break' }, { id: 'sound', img: 'icon-sound', text: 'Sound' }]
            }];
            this.main.helpUrl = 'http://doc.babylonjs.com/resources/';
            this.main.onClick = function (target) {
                return _this.onMainClick(target);
            };
            this.main.build('MAIN-TOOLBAR');
            // Build toolbar
            this.tools = new toolbar_1.default('ToolsToolBar');
            this.tools.items = [{ type: 'button', id: 'test', text: 'Play', img: 'icon-play-game-windowed' }, { type: 'button', id: 'test-debug', text: 'Play And Debug...', img: 'icon-play-game-windowed' }];
            this.tools.onClick = function (target) {
                return _this.onToolsClick(target);
            };
            this.tools.build('TOOLS-TOOLBAR');
        }
        /**
         * Notifies the user that something happens
         * @param message message to draw
         */
        EditorToolbar.prototype.notifyRightMessage = function (message) {
            this.tools.element.right = message;
            this.tools.element.render();
        };
        /**
         * Once the user clicks on a menu of the main toolbar
         * @param target the target element
         */
        EditorToolbar.prototype.onMainClick = function (target) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = target;
                            switch (_a) {
                                case 'project:import-project':
                                    return [3 /*break*/, 1];
                                case 'project:reload-project':
                                    return [3 /*break*/, 2];
                                case 'project:new-project':
                                    return [3 /*break*/, 3];
                                case 'project:download-project':
                                    return [3 /*break*/, 5];
                                case 'project:export-project':
                                    return [3 /*break*/, 6];
                                case 'project:export-template':
                                    return [3 /*break*/, 8];
                                case 'scene:import-meshes-from':
                                    return [3 /*break*/, 10];
                                case 'scene:download-scene':
                                    return [3 /*break*/, 11];
                                case 'scene:serialize-scene':
                                    return [3 /*break*/, 12];
                                case 'edit:undo':
                                    return [3 /*break*/, 13];
                                case 'edit:redo':
                                    return [3 /*break*/, 14];
                                case 'edit:clean-materials':
                                    return [3 /*break*/, 15];
                                case 'edit:clean-textures':
                                    return [3 /*break*/, 16];
                                case 'edit:set-theme-light':
                                    return [3 /*break*/, 17];
                                case 'edit:set-theme-dark':
                                    return [3 /*break*/, 18];
                                case 'view:textures':
                                    return [3 /*break*/, 19];
                                case 'view:materials':
                                    return [3 /*break*/, 21];
                                case 'tools:animations':
                                    return [3 /*break*/, 23];
                                case 'tools:code-editor':
                                    return [3 /*break*/, 25];
                                case 'tools:graph-editor':
                                    return [3 /*break*/, 27];
                                case 'tools:material-editor':
                                    return [3 /*break*/, 29];
                                case 'tools:post-process-editor':
                                    return [3 /*break*/, 31];
                                case 'tools:particles-creator':
                                    return [3 /*break*/, 33];
                                case 'tools:path-finder':
                                    return [3 /*break*/, 35];
                                case 'tools:metadatas':
                                    return [3 /*break*/, 37];
                                case 'tools:notes':
                                    return [3 /*break*/, 39];
                                case 'add:default-environment':
                                    return [3 /*break*/, 41];
                                case 'add:particle-system':
                                    return [3 /*break*/, 42];
                                case 'add:particle-system-animated':
                                    return [3 /*break*/, 43];
                                case 'add:sky':
                                    return [3 /*break*/, 44];
                                case 'add:water':
                                    return [3 /*break*/, 45];
                                case 'add:dummy-node':
                                    return [3 /*break*/, 46];
                                case 'add:ground':
                                    return [3 /*break*/, 47];
                                case 'add:cube':
                                    return [3 /*break*/, 48];
                                case 'add:sphere':
                                    return [3 /*break*/, 49];
                                case 'add:point-light':
                                    return [3 /*break*/, 50];
                                case 'add:directional-light':
                                    return [3 /*break*/, 51];
                                case 'add:spot-light':
                                    return [3 /*break*/, 52];
                                case 'add:hemispheric-light':
                                    return [3 /*break*/, 53];
                                case 'add:sound':
                                    return [3 /*break*/, 54];
                                case 'gui:add-advanced-texture':
                                    return [3 /*break*/, 55];
                                case 'gui:add-image':
                                    return [3 /*break*/, 56];
                            }
                            return [3 /*break*/, 57];
                        case 1:
                            project_importer_1.default.ImportProject(this.editor);
                            return [3 /*break*/, 58];
                        case 2:
                            dialog_1.default.Create('Reload scene', 'Are you sure to reload the entire scene?', function (result) {
                                if (result === 'No') return;
                                project_code_editor_1.default.CloseAll();
                                _this.editor._showReloadDialog = false;
                                _this.editor.filesInput['_processReload']();
                            });
                            return [3 /*break*/, 58];
                        case 3:
                            return [4 /*yield*/, this.editor.createDefaultScene(true)];
                        case 4:
                            _b.sent();
                            return [3 /*break*/, 58];
                        case 5:
                            project_exporter_1.default.DownloadProjectFile(this.editor);
                            return [3 /*break*/, 58];
                        case 6:
                            return [4 /*yield*/, project_exporter_1.default.ExportProject(this.editor)];
                        case 7:
                            _b.sent();
                            return [3 /*break*/, 58];
                        case 8:
                            return [4 /*yield*/, project_exporter_1.default.ExportTemplate(this.editor)];
                        case 9:
                            _b.sent();
                            return [3 /*break*/, 58];
                        case 10:
                            scene_importer_1.default.ImportMeshesFromFile(this.editor);
                            return [3 /*break*/, 58];
                        case 11:
                            scene_exporter_1.default.DownloadBabylonFile(this.editor);
                            return [3 /*break*/, 58];
                        case 12:
                            new scene_serializer_1.default(this.editor.core.scene);
                            return [3 /*break*/, 58];
                        case 13:
                            undo_redo_1.default.Undo();
                            return [3 /*break*/, 58];
                        case 14:
                            undo_redo_1.default.Redo();
                            return [3 /*break*/, 58];
                        case 15:
                            window_1.default.CreateAlert("Cleared " + scene_manager_1.default.CleanUnusedMaterials(this.editor.core.scene) + " materials", 'Report');
                            return [3 /*break*/, 58];
                        case 16:
                            window_1.default.CreateAlert("Cleared " + scene_manager_1.default.CleanUnusedTextures(this.editor.core.scene) + " textures", 'Report');
                            return [3 /*break*/, 58];
                        case 17:
                            theme_1.default.ThemeName = 'Light';
                            return [3 /*break*/, 58];
                        case 18:
                            theme_1.default.ThemeName = 'Dark';
                            return [3 /*break*/, 58];
                        case 19:
                            return [4 /*yield*/, this.loadTool('texture-viewer', 'Textures Viewer')];
                        case 20:
                            _b.sent();
                            return [3 /*break*/, 58];
                        case 21:
                            return [4 /*yield*/, this.loadTool('material-viewer', 'Materials Viewer')];
                        case 22:
                            _b.sent();
                            return [3 /*break*/, 58];
                        case 23:
                            return [4 /*yield*/, this.loadTool('animation-editor', 'Animations Editor')];
                        case 24:
                            _b.sent();
                            return [3 /*break*/, 58];
                        case 25:
                            return [4 /*yield*/, this.loadTool('behavior-editor', 'Code Editor')];
                        case 26:
                            _b.sent();
                            return [3 /*break*/, 58];
                        case 27:
                            return [4 /*yield*/, this.loadTool('graph-editor', 'Graph Editor')];
                        case 28:
                            _b.sent();
                            return [3 /*break*/, 58];
                        case 29:
                            return [4 /*yield*/, this.loadTool('material-editor', 'Material Editor')];
                        case 30:
                            _b.sent();
                            return [3 /*break*/, 58];
                        case 31:
                            return [4 /*yield*/, this.loadTool('post-process-editor', 'Post-Process Editor')];
                        case 32:
                            _b.sent();
                            return [3 /*break*/, 58];
                        case 33:
                            return [4 /*yield*/, this.loadTool('particles-creator', 'Particles Creator')];
                        case 34:
                            _b.sent();
                            return [3 /*break*/, 58];
                        case 35:
                            return [4 /*yield*/, this.loadTool('path-finder', 'Path Finder')];
                        case 36:
                            _b.sent();
                            return [3 /*break*/, 58];
                        case 37:
                            return [4 /*yield*/, this.loadTool('metadatas', 'Metadatas Editor')];
                        case 38:
                            _b.sent();
                            return [3 /*break*/, 58];
                        case 39:
                            return [4 /*yield*/, this.loadTool('notes', 'Notes')];
                        case 40:
                            _b.sent();
                            return [3 /*break*/, 58];
                        case 41:
                            scene_factory_1.default.CreateDefaultEnvironment(this.editor);
                            return [3 /*break*/, 58];
                        case 42:
                            scene_factory_1.default.CreateDefaultParticleSystem(this.editor, false);
                            return [3 /*break*/, 58];
                        case 43:
                            scene_factory_1.default.CreateDefaultParticleSystem(this.editor, true);
                            return [3 /*break*/, 58];
                        case 44:
                            scene_factory_1.default.CreateSkyEffect(this.editor);
                            return [3 /*break*/, 58];
                        case 45:
                            scene_factory_1.default.CreateWaterEffect(this.editor);
                            return [3 /*break*/, 58];
                        case 46:
                            scene_factory_1.default.CreateDummyNode(this.editor);
                            return [3 /*break*/, 58];
                        case 47:
                            scene_factory_1.default.CreateGroundMesh(this.editor);
                            return [3 /*break*/, 58];
                        case 48:
                            scene_factory_1.default.CreateCube(this.editor);
                            return [3 /*break*/, 58];
                        case 49:
                            scene_factory_1.default.CreateSphere(this.editor);
                            return [3 /*break*/, 58];
                        case 50:
                            scene_factory_1.default.CreateLight(this.editor, 'point');
                            return [3 /*break*/, 58];
                        case 51:
                            scene_factory_1.default.CreateLight(this.editor, 'directional');
                            return [3 /*break*/, 58];
                        case 52:
                            scene_factory_1.default.CreateLight(this.editor, 'spot');
                            return [3 /*break*/, 58];
                        case 53:
                            scene_factory_1.default.CreateLight(this.editor, 'hemispheric');
                            return [3 /*break*/, 58];
                        case 54:
                            scene_factory_1.default.AddSound(this.editor);
                            return [3 /*break*/, 58];
                        case 55:
                            scene_factory_1.default.AddGui(this.editor);
                            return [3 /*break*/, 58];
                        case 56:
                            scene_factory_1.default.AddGuiImage(this.editor);
                            return [3 /*break*/, 58];
                        case 57:
                            return [3 /*break*/, 58];
                        case 58:
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Once the user clicks on a menu of the tools toolbar
         * @param target the target element
         */
        EditorToolbar.prototype.onToolsClick = function (target) {
            switch (target) {
                case 'test':
                    scene_exporter_1.default.CreateFiles(this.editor);
                    this.editor.addEditPanelPlugin('play-game', false, 'Game');
                    break;
                case 'test-debug':
                    scene_exporter_1.default.CreateFiles(this.editor);
                    tools_1.default.OpenPopup('./preview.html', 'Preview', 1280, 800);
                    break;
                default:
                    break;
            }
        };
        /**
         * Loads an editor tool and add it in the edit-panel
         * @param url the URL of the tool
         * @param name: the name of the tool to draw when locking the panel
         */
        EditorToolbar.prototype.loadTool = function (url, name) {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            return [4 /*yield*/, this.editor.addEditPanelPlugin(url, false, name)];
                        case 1:
                            result = _a.sent();
                            return [2 /*return*/, result];
                    }
                });
            });
        };
        return EditorToolbar;
    }();
    exports.default = EditorToolbar;

});
$__System.registerDynamic("1f", ["c", "20", "e", "21", "18", "22"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var babylonjs_gui_1 = $__require("20");
    var tools_1 = $__require("e");
    var tree_1 = $__require("21");
    var undo_redo_1 = $__require("18");
    var scene_picker_1 = $__require("22");
    var EditorGraph = /** @class */function () {
        /**
         * Constructor
         * @param editor the editor reference
         */
        function EditorGraph(editor) {
            var _this = this;
            this.editor = editor;
            this.root = 'ROOT';
            this.gui = 'GUI';
            this.currentObject = this.editor.core.scene;
            this.tree = new tree_1.default('SceneTree');
            this.tree.multipleSelection = true;
            this.tree.build('SCENE-GRAPH');
            // Events
            this.tree.onClick = function (id, data) {
                _this.currentObject = data;
                _this.editor.scenePicker.setGizmoAttachedMesh(data);
                _this.editor.core.onSelectObject.notifyObservers(data, undefined, _this);
            };
            this.tree.onDblClick = function (id, data) {
                if (data.globalPosition || data.getAbsolutePosition) scene_picker_1.default.CreateAndPlayFocusAnimation(_this.editor.camera.getTarget(), data.globalPosition || data.getAbsolutePosition(), _this.editor.camera);
            };
            this.tree.onContextMenu = function (id, data) {
                if (!data.clone) return [];
                var result = [];
                if (data.globalPosition || data.getAbsolutePosition) result.push({ id: 'focus', text: 'Focus', img: 'icon-focus', separatorAfter: true, callback: function () {
                        return _this.onMenuClick('focus');
                    } });
                if (data instanceof babylonjs_1.Mesh) result.push({ id: 'create-prefab', text: 'Create Prefab', img: 'icon-add', separatorBefore: true, callback: function () {
                        return _this.onMenuClick('create-prefab');
                    } });
                if (data instanceof babylonjs_1.AbstractMesh) result.push({ id: 'set-material', text: 'Set Material...', img: 'icon-shaders', separatorAfter: true, callback: function () {
                        return _this.onMenuClick('set-material');
                    } });
                if (data instanceof babylonjs_1.Node || data instanceof babylonjs_1.Scene || data instanceof babylonjs_1.ParticleSystem) {
                    result.push({ id: 'attach-script', text: 'Attach Existing Script...', img: 'icon-behavior-editor', callback: function () {
                            return _this.onMenuClick('attach-script');
                        } });
                    result.push({ id: 'add-script', text: 'Add Script...', img: 'icon-behavior-editor', separatorAfter: true, callback: function () {
                            return _this.onMenuClick('add-script');
                        } });
                }
                if (data.clone) result.push({ id: 'clone', text: 'Clone', img: 'icon-clone', callback: function () {
                        return _this.onMenuClick('clone');
                    } });
                result.push.apply(result, [{ id: 'delete', text: 'Delete', img: 'icon-error', callback: function () {
                        return _this.onMenuClick('remove');
                    } }]);
                return result;
            };
            this.tree.onCanDrag = function (id, data) {
                return !(data instanceof babylonjs_1.Scene);
            };
            this.tree.onDrag = function (node, parent) {
                if (node instanceof babylonjs_1.ParticleSystem) {
                    if (!(parent instanceof babylonjs_1.AbstractMesh)) return false;
                    // Undo redo
                    var oldEmitter_1 = node.emitter;
                    var newEmitter_1 = parent;
                    undo_redo_1.default.Push({ object: node, property: 'emitter', from: oldEmitter_1, to: newEmitter_1, fn: function (type) {
                            if (type === 'from') _this.tree.setParent(node.id, oldEmitter_1['id']);else _this.tree.setParent(node.id, newEmitter_1.id);
                        } });
                    // Apply
                    node.emitter = parent;
                    return true;
                }
                if (node instanceof babylonjs_1.Node) {
                    if (!(parent instanceof babylonjs_1.Node) && !(parent instanceof babylonjs_1.Scene)) return false;
                    // Undo redo
                    var oldParent_1 = node.parent;
                    var newParent_1 = parent instanceof babylonjs_1.Scene ? null : parent;
                    undo_redo_1.default.Push({ object: node, property: 'parent', from: oldParent_1, to: newParent_1, fn: function (type) {
                            if (type === 'from') _this.tree.setParent(node.id, oldParent_1 ? oldParent_1.id : _this.root);else _this.tree.setParent(node.id, newParent_1 ? newParent_1.id : _this.root);
                        } });
                    // Apply
                    node.parent = newParent_1;
                    return true;
                }
                if (node instanceof babylonjs_1.Sound) {
                    // TODO: undo-redo for sounds
                    // Need to get current attached mesh
                    if (parent instanceof babylonjs_1.Scene) {
                        node.spatialSound = false;
                        node.detachFromMesh();
                        return true;
                    }
                    if (parent instanceof babylonjs_1.AbstractMesh) {
                        node.spatialSound = true;
                        node.attachToMesh(parent);
                        return true;
                    }
                }
                return false;
            };
            // Search
            var search = $('#SCENE-GRAPH-SEARCH');
            search.keyup(function () {
                _this.tree.search(search.val());
            });
            // Observer
            this.editor.core.onSelectObject.add(function (node, ev) {
                return ev.target !== _this && node && _this.tree.select(node.id);
            });
        }
        /**
        * Rename the node with id "id"
        * @param id the id of the node
        * @param name the new name/id
        */
        EditorGraph.prototype.renameNode = function (id, name) {
            this.tree.rename(id, name);
        };
        /**
         * Set parent of the given node (id)
         * @param id the id of the node
         * @param parentId the parent id
         */
        EditorGraph.prototype.setParent = function (id, parentId) {
            this.tree.setParent(id, parentId);
        };
        /**
         * Adds a new node
         * @param node: the node to add
         * @param parentId: the parent id of the node to add
         */
        EditorGraph.prototype.add = function (node, parentId) {
            this.tree.add(node, parentId);
        };
        /**
         * Selects the given node id
         * @param id the node id
         */
        EditorGraph.prototype.select = function (id) {
            this.tree.select(id);
        };
        /**
         * Returns the selected node id
         */
        EditorGraph.prototype.getSelected = function () {
            return this.tree.getSelected();
        };
        /**
         * Returns a anode
         * @param data: the data to search
         */
        EditorGraph.prototype.getByData = function (data) {
            return this.tree.get(data.id || data.name);
        };
        /**
         * Clears the graph
         */
        EditorGraph.prototype.clear = function () {
            this.tree.clear();
        };
        /**
         * Fills the tree
         * @param scene: the root scene
         * @param root: the root node
         */
        EditorGraph.prototype.fill = function (scene, root) {
            var _this = this;
            if (scene === void 0) {
                scene = this.editor.core.scene;
            }
            var nodes = root ? /*root.getDescendants()*/root.getChildren() : [];
            if (!root) {
                this.tree.add({
                    id: this.root,
                    text: 'Scene',
                    img: 'icon-scene',
                    data: scene
                });
                this.tree.select(this.root);
                this.editor.edition.setObject(scene);
                // Sort nodes alphabetically
                tools_1.default.SortAlphabetically(scene.cameras, 'name');
                tools_1.default.SortAlphabetically(scene.lights, 'name');
                tools_1.default.SortAlphabetically(scene.meshes, 'name');
                // Set nodes
                scene.cameras.forEach(function (c) {
                    return !c.parent && nodes.push(c);
                });
                scene.lights.forEach(function (l) {
                    return !l.parent && nodes.push(l);
                });
                scene.meshes.forEach(function (m) {
                    return !m.parent && nodes.push(m);
                });
                // Fill sounds
                this.fillSounds(scene, scene);
            } else {
                tools_1.default.SortAlphabetically(nodes, 'name');
            }
            // Add nodes
            nodes.forEach(function (n) {
                // Hide prefabs, keep only masters
                if (babylonjs_1.Tags.MatchesQuery(n, 'prefab')) return;
                // Create a random ID if not defined
                if (!n.id) n.id = babylonjs_1.Tools.RandomId();
                // Instance?
                var parent = root ? root.id : _this.root;
                var parentNode = _this.tree.add({
                    id: n.id,
                    text: n.name,
                    img: _this.getIcon(n),
                    data: n
                }, parent);
                // Cannot add
                if (!parentNode) return;
                // Mesh
                if (n instanceof babylonjs_1.AbstractMesh) {
                    // Sub meshes
                    if (n.subMeshes && n.subMeshes.length > 1) {
                        n.subMeshes.forEach(function (sm, index) {
                            _this.tree.add({
                                id: n.id + 'submesh_' + index,
                                text: sm.getMaterial().name,
                                img: _this.getIcon(n),
                                data: sm
                            }, n.id);
                        });
                    }
                    // Skeleton
                    if (n.skeleton) {
                        _this.tree.add({
                            id: n.skeleton.id || babylonjs_1.Tools.RandomId(),
                            text: n.skeleton.name,
                            img: _this.getIcon(n.skeleton),
                            data: n.skeleton
                        }, n.id);
                    }
                }
                // Check particle systems
                scene.particleSystems.forEach(function (ps) {
                    if (ps.emitter === n) {
                        _this.tree.add({
                            id: ps.id,
                            text: ps.name,
                            img: _this.getIcon(ps),
                            data: ps
                        }, n.id);
                    }
                });
                // Check lens flares
                scene.lensFlareSystems && scene.lensFlareSystems.forEach(function (lf) {
                    if (lf.getEmitter() === n) {
                        _this.tree.add({
                            id: lf.id,
                            text: lf.name,
                            img: _this.getIcon(lf),
                            data: lf
                        }, n.id);
                    }
                });
                // Camera? Add post-processes
                if (n instanceof babylonjs_1.Camera) {
                    scene.postProcesses.forEach(function (p) {
                        var camera = p.getCamera();
                        if (camera !== n) return;
                        _this.tree.add({
                            id: p.name + babylonjs_1.Tools.RandomId(),
                            text: p.name,
                            img: _this.getIcon(p),
                            data: p
                        }, n.id);
                    });
                }
                // Sounds
                _this.fillSounds(scene, n);
                // TODO: wait for parse and serialize for GUI
                // parentNode.count += this.fillGuiTextures(n);
                // Fill descendants
                _this.fill(scene, n);
            });
            // Expand scene as default
            if (!root) this.tree.expand(this.root);
        };
        /**
        * Returns the icon related to the object type
        * @param object
        */
        EditorGraph.prototype.getIcon = function (obj) {
            if (obj instanceof babylonjs_1.AbstractMesh) {
                return 'icon-mesh';
            } else if (obj instanceof babylonjs_1.Light) {
                return 'icon-light';
            } else if (obj instanceof babylonjs_1.Camera) {
                return 'icon-camera';
            } else if (obj instanceof babylonjs_1.ParticleSystem || obj instanceof babylonjs_1.GPUParticleSystem) {
                return 'icon-particles';
            } else if (obj instanceof babylonjs_1.Skeleton) {
                return 'icon-animated-mesh';
            } else if (obj instanceof babylonjs_1.PostProcess) {
                return 'icon-helpers';
            } else if (obj instanceof babylonjs_1.Sound) {
                return 'icon-sound';
            } else if (obj instanceof babylonjs_gui_1.AdvancedDynamicTexture) {
                return 'icon-ground';
            } else if (obj instanceof babylonjs_gui_1.Image) {
                return 'icon-dynamic-texture';
            }
            return null;
        };
        /**
         * Fills the sounds giving the scene and the root node (attached mesh or scene)
         * @param scene: the scene containing the sound
         * @param root: the root node to check
         */
        EditorGraph.prototype.fillSounds = function (scene, root) {
            var _this = this;
            // Set sounds
            if (scene.soundTracks.length === 0 || scene.soundTracks[0].soundCollection.length === 0) return;
            var count = 0;
            scene.soundTracks.forEach(function (st) {
                st.soundCollection.forEach(function (s) {
                    if (root === scene && !s['_connectedMesh']) {
                        _this.tree.add({
                            id: s['id'] || babylonjs_1.Tools.RandomId(),
                            text: s.name,
                            img: _this.getIcon(s),
                            data: s
                        }, _this.root);
                    } else if (s['_connectedMesh'] === root) {
                        _this.tree.add({
                            id: s['id'] || babylonjs_1.Tools.RandomId(),
                            text: s.name,
                            img: _this.getIcon(s),
                            data: s
                        }, root.id);
                        count++;
                    }
                });
            });
            return count;
        };
        /**
         * Fills the GUI advanced textures
         * @param root: the node to check GUI is attached to
         */
        EditorGraph.prototype.fillGuiTextures = function (root) {
            var _this = this;
            var count = 0;
            if (!root) {
                // Advanced ui textures
                this.editor.core.uiTextures.forEach(function (ut) {
                    _this.tree.add({
                        id: ut.name,
                        text: ut.name,
                        img: _this.getIcon(ut),
                        data: ut
                    }, _this.gui);
                });
            } else {
                // Attached to mesh
                this.editor.core.uiTextures.forEach(function (ut) {});
            }
            return count;
        };
        /**
         * On the user clicks on a context menu item
         * @param id the context menu item id
         * @param node the related tree node
         */
        EditorGraph.prototype.onMenuClick = function (id) {
            return __awaiter(this, void 0, void 0, function () {
                var node, _a, clone, parent_1, ui, index;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            node = this.getSelected();
                            if (!node) return [2 /*return*/];
                            _a = id;
                            switch (_a) {
                                case 'focus':
                                    return [3 /*break*/, 1];
                                case 'create-prefab':
                                    return [3 /*break*/, 2];
                                case 'set-material':
                                    return [3 /*break*/, 4];
                                case 'attach-script':
                                    return [3 /*break*/, 6];
                                case 'add-script':
                                    return [3 /*break*/, 8];
                                case 'clone':
                                    return [3 /*break*/, 10];
                                case 'remove':
                                    return [3 /*break*/, 11];
                            }
                            return [3 /*break*/, 12];
                        case 1:
                            scene_picker_1.default.CreateAndPlayFocusAnimation(this.editor.camera.getTarget(), node.data.globalPosition || node.data.getAbsolutePosition(), this.editor.camera);
                            return [3 /*break*/, 13];
                        case 2:
                            return [4 /*yield*/, this.editor.assets.prefabs.createPrefab(node.data)];
                        case 3:
                            _b.sent();
                            return [3 /*break*/, 13];
                        case 4:
                            return [4 /*yield*/, this.editor.addEditPanelPlugin('material-viewer', false, 'Materials Viewer', node.data, true)];
                        case 5:
                            _b.sent();
                            return [3 /*break*/, 13];
                        case 6:
                            return [4 /*yield*/, this.editor.addEditPanelPlugin('behavior-editor', false, 'Code Editor', node.data, false, true)];
                        case 7:
                            _b.sent();
                            return [3 /*break*/, 13];
                        case 8:
                            return [4 /*yield*/, this.editor.addEditPanelPlugin('behavior-editor', false, 'Code Editor', node.data, true)];
                        case 9:
                            _b.sent();
                            return [3 /*break*/, 13];
                        case 10:
                            if (!node || !(node.data instanceof babylonjs_1.Node)) return [2 /*return*/];
                            clone = node && node.data && node.data['clone'] && node.data['clone']();
                            clone.name = node.data.name + ' Cloned';
                            clone.id = babylonjs_1.Tools.RandomId();
                            if (node.data['skeleton']) {
                                clone.skeleton = node.data['skeleton'].clone();
                                clone.skeleton.name = node.data['skeleton'].name;
                                clone.skeleton.id = node.data['skeleton'].id;
                            }
                            parent_1 = clone.parent ? clone.parent.id : this.root;
                            this.tree.add({ id: clone.id, text: clone.name, img: this.getIcon(clone), data: clone }, parent_1);
                            // Setup this
                            this.currentObject = clone;
                            this.editor.core.onSelectObject.notifyObservers(clone);
                            return [3 /*break*/, 13];
                        case 11:
                            // TODO: implement undo-redo and do not dispose objects
                            node.data && node.data.dispose && node.data.dispose(false);
                            this.tree.remove(node.id);
                            // Gui
                            if (node.data instanceof babylonjs_gui_1.AdvancedDynamicTexture) {
                                ui = this.editor.core.uiTextures.find(function (ut) {
                                    return ut === node.data;
                                });
                                index = this.editor.core.uiTextures.indexOf(ui);
                                if (index !== -1) this.editor.core.uiTextures.splice(index, 1);
                            }
                            return [3 /*break*/, 13];
                        case 12:
                            return [3 /*break*/, 13];
                        case 13:
                            return [2 /*return*/];
                    }
                });
            });
        };
        return EditorGraph;
    }();
    exports.default = EditorGraph;

});
$__System.registerDynamic("23", ["24", "16", "22"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var layout_1 = $__require("24");
    var toolbar_1 = $__require("16");
    var scene_picker_1 = $__require("22");
    var EditorPreview = /** @class */function () {
        /**
         * Constructor
         * @param editor: the editor reference
         */
        function EditorPreview(editor) {
            var _this = this;
            this.editor = editor;
            // Layout
            this.layout = new layout_1.default('PREVIEW');
            this.layout.panels = [{ type: 'top', size: 30, resizable: false, content: '<div id="PREVIEW-TOOLBAR" style="width: 100%; height: 100%;"></div>' }, { type: 'main', resizable: false, content: '<canvas id="renderCanvasEditor"></canvas>' }];
            this.layout.build('PREVIEW');
            // Toolbar
            this.toolbar = new toolbar_1.default('PREVIEW-TOOLBAR');
            this.toolbar.onClick = function (id) {
                return _this.onToolbarClicked(id);
            };
            this.toolbar.items = [{ type: 'menu', id: 'show', text: 'Show', img: 'icon-helpers', selected: [], items: [{ id: 'bounding-boxes', img: 'icon-bounding-box', text: 'Bounding Box' }, { id: 'wireframe', img: 'icon-wireframe', text: 'Wireframe' }, { type: 'break' }, { id: 'post-processes', img: 'icon-helpers', text: 'Post-Processes' }, { type: 'break' }, { id: 'textures', img: 'icon-dynamic-texture', text: 'Textures' }, { id: 'lights', img: 'icon-light', text: 'Lights' }] }, { type: 'break' }, { type: 'menu', id: 'camera', text: 'Camera', img: 'icon-camera', items: [{ id: 'free', text: 'Free Camera', img: 'icon-camera' }, { id: 'arc', text: 'Arc Rotate Camera', img: 'icon-camera' }] }, { type: 'break' }, { type: 'button', id: 'position', text: '', img: 'icon-position', checked: false }, { type: 'button', id: 'rotation', text: '', img: 'icon-rotation', checked: false }, { type: 'button', id: 'scaling', text: '', img: 'icon-scaling', checked: false }, { type: 'button', id: 'bounding-box', text: '', img: 'icon-bounding-box', checked: false }];
            this.toolbar.build('PREVIEW-TOOLBAR');
        }
        /**
         * Resizes the preview
         */
        EditorPreview.prototype.resize = function () {
            this.layout.element.resize();
            this.editor.core.engine.resize();
        };
        /**
         * Sets a click and the given item's id
         * @param id the id of the item to click
         */
        EditorPreview.prototype.setToolClicked = function (id) {
            this.onToolbarClicked(id);
        };
        /**
         * On the user clicks on the toolbar
         * @param id the id of the clicked item
         */
        EditorPreview.prototype.onToolbarClicked = function (id) {
            switch (id) {
                // Show
                case 'show:bounding-boxes':
                    this.editor.core.scene.forceShowBoundingBoxes = !this.editor.core.scene.forceShowBoundingBoxes;
                    break;
                case 'show:wireframe':
                    this.editor.core.scene.forceWireframe = !this.editor.core.scene.forceWireframe;
                    break;
                case 'show:post-processes':
                    this.editor.core.scene.postProcessesEnabled = !this.editor.core.scene.postProcessesEnabled;
                    break;
                case 'show:textures':
                    this.editor.core.scene.texturesEnabled = !this.editor.core.scene.texturesEnabled;
                    break;
                case 'show:lights':
                    this.editor.core.scene.lightsEnabled = !this.editor.core.scene.lightsEnabled;
                    break;
                // Camera
                case 'camera:free':
                    this.editor.createEditorCamera('free');
                    break;
                case 'camera:arc':
                    this.editor.createEditorCamera('arc');
                    break;
                // Gizmos
                case 'bounding-box':
                case 'position':
                case 'rotation':
                case 'scaling':
                    var active = this.toolbar.isChecked(id, true);
                    this.toolbar.setChecked('bounding-box', false);
                    this.toolbar.setChecked('position', false);
                    this.toolbar.setChecked('rotation', false);
                    this.toolbar.setChecked('scaling', false);
                    this.toolbar.setChecked(id, active);
                    this.editor.scenePicker.gizmosLayer.shouldRender = active;
                    if (!active) {
                        this.editor.scenePicker.gizmoType = scene_picker_1.GizmoType.NONE;
                        break;
                    }
                    switch (id) {
                        case 'bounding-box':
                            this.editor.scenePicker.gizmoType = scene_picker_1.GizmoType.BOUNDING_BOX;
                            break;
                        case 'position':
                            this.editor.scenePicker.gizmoType = scene_picker_1.GizmoType.POSITION;
                            break;
                        case 'rotation':
                            this.editor.scenePicker.gizmoType = scene_picker_1.GizmoType.ROTATION;
                            break;
                        case 'scaling':
                            this.editor.scenePicker.gizmoType = scene_picker_1.GizmoType.SCALING;
                            break;
                        default:
                            break; // Should never happen
                    }
                    break;
                default:
                    break;
            }
        };
        return EditorPreview;
    }();
    exports.default = EditorPreview;

});
$__System.registerDynamic("25", ["c", "26", "e", "1b"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var edition_tool_1 = $__require("26");
    var tools_1 = $__require("e");
    var scene_manager_1 = $__require("1b");
    var SceneTool = /** @class */function (_super) {
        __extends(SceneTool, _super);
        function SceneTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'SCENE-TOOL';
            _this.tabName = 'Properties';
            // Private members
            _this._physicsEnabled = false;
            _this._fogMode = '';
            _this._glowEnabled = false;
            _this._hightlightEnabled = false;
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        SceneTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_1.Scene;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        SceneTool.prototype.update = function (scene) {
            var _this = this;
            _super.prototype.update.call(this, scene);
            // Misc.
            this._physicsEnabled = scene.isPhysicsEnabled();
            this._glowEnabled = scene_manager_1.default.GlowLayer !== null;
            this._hightlightEnabled = scene_manager_1.default.HighLightLayer !== null;
            // Colors
            var colors = this.tool.addFolder('Colors');
            colors.open();
            this.tool.addColor(colors, 'Ambient', scene.ambientColor).open();
            this.tool.addColor(colors, 'Clear', scene.clearColor).open();
            // Image processing
            var imageProcessing = this.tool.addFolder('Image Processing');
            imageProcessing.open();
            imageProcessing.add(scene.imageProcessingConfiguration, 'exposure').step(0.01).name('Exposure');
            imageProcessing.add(scene.imageProcessingConfiguration, 'contrast').step(0.01).name('Contrast');
            imageProcessing.add(scene.imageProcessingConfiguration, 'toneMappingEnabled').name('Tone Mapping Enabled');
            // Glow layer
            var glow = this.tool.addFolder('Glow Layer');
            glow.open();
            glow.add(this, '_glowEnabled').name('Enable Glow Layer').onFinishChange(function (r) {
                if (!r) {
                    scene_manager_1.default.GlowLayer.dispose();
                    scene_manager_1.default.GlowLayer = null;
                } else scene_manager_1.default.GlowLayer = new babylonjs_1.GlowLayer('GlowLayer', scene);
                _this.update(scene);
            });
            if (this._glowEnabled) {
                glow.add(scene_manager_1.default.GlowLayer, 'intensity').min(0).step(0.01).name('Intensity');
                glow.add(scene_manager_1.default.GlowLayer, 'blurKernelSize').min(0).max(512).step(1).name('Blur Size').onChange(function (r) {
                    scene_manager_1.default.GlowLayer['_options'].blurKernelSize = r * 2;
                });
            }
            // Highlight
            var highlight = this.tool.addFolder('HighLight');
            highlight.open();
            highlight.add(this, '_hightlightEnabled').name('Enable HightLight Layer').onFinishChange(function (r) {
                if (!r) {
                    scene_manager_1.default.HighLightLayer.dispose();
                    scene_manager_1.default.HighLightLayer = null;
                } else scene_manager_1.default.HighLightLayer = new babylonjs_1.HighlightLayer('HightLight Layer', scene);
                _this.update(scene);
            });
            if (this._hightlightEnabled) {
                highlight.add(scene_manager_1.default.HighLightLayer, 'blurHorizontalSize').min(0).max(128).step(1).name('Horizontal Blur Size');
                highlight.add(scene_manager_1.default.HighLightLayer, 'blurVerticalSize').min(0).max(128).step(1).name('Horizontal Blur Size');
                highlight.add(scene_manager_1.default.HighLightLayer, 'innerGlow').name('Inner Glow');
                highlight.add(scene_manager_1.default.HighLightLayer, 'outerGlow').name('Outer Glow');
                this.tool.addColor(highlight, 'Neutral Color', scene_manager_1.default.HighLightLayer.neutralColor).open();
            }
            // Environment texture
            var environment = this.tool.addFolder('Environment Texture');
            environment.open();
            this.tool.addTexture(environment, this.editor, 'environmentTexture', scene, true, true).name('Environment Texture');
            // Collisions
            var collisions = this.tool.addFolder('Collisions');
            collisions.open();
            collisions.add(scene, 'collisionsEnabled').name('Collisions Enabled');
            this.tool.addVector(collisions, 'Gravity', scene.gravity, function () {
                var physics = scene.getPhysicsEngine();
                if (physics) physics.setGravity(scene.gravity);
            });
            // Physics
            var physics = this.tool.addFolder('Physics');
            physics.open();
            physics.add(this, '_physicsEnabled').name('Physics Enabled').onFinishChange(function (r) {
                return __awaiter(_this, void 0, void 0, function () {
                    var cannonjs;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!r) return [3 /*break*/, 2];
                                this.editor.layout.lockPanel('left', 'Enabling...', true);
                                return [4 /*yield*/, tools_1.default.ImportScript('cannon')];
                            case 1:
                                cannonjs = _a.sent();
                                scene.enablePhysics(new babylonjs_1.Vector3(0, -0.91, 0), new babylonjs_1.CannonJSPlugin(true));
                                scene.getPhysicsEngine().setTimeStep(0);
                                this.editor.layout.unlockPanel('left');
                                return [3 /*break*/, 3];
                            case 2:
                                scene.disablePhysicsEngine();
                                _a.label = 3;
                            case 3:
                                return [2 /*return*/];
                        }
                    });
                });
            });
            // Audio
            var audio = this.tool.addFolder('Audio');
            audio.open();
            audio.add(scene, 'audioEnabled').name('Enable Audio');
            // Fog
            var fog = this.tool.addFolder('Fog');
            fog.open();
            fog.add(scene, 'fogEnabled').name('Enable Fog');
            fog.add(scene, 'fogStart').name('Fog Start');
            fog.add(scene, 'fogEnd').name('Fog End');
            fog.add(scene, 'fogDensity').name('Fog Density');
            var fogModes = ['FOGMODE_NONE', 'FOGMODE_LINEAR', 'FOGMODE_EXP', 'FOGMODE_EXP2'];
            this._fogMode = fogModes[0];
            for (var _i = 0, fogModes_1 = fogModes; _i < fogModes_1.length; _i++) {
                var mode = fogModes_1[_i];
                if (scene.fogMode === babylonjs_1.Scene[mode]) {
                    this._fogMode = mode;
                    break;
                }
            }
            fog.add(this, '_fogMode', fogModes).name('Fog Mode').onFinishChange(function (r) {
                scene.fogMode = babylonjs_1.Scene[r];
            });
            this.tool.addColor(fog, 'Color', scene.fogColor).open();
        };
        return SceneTool;
    }(edition_tool_1.default);
    exports.default = SceneTool;

});
$__System.registerDynamic("27", ["c", "26", "1b", "e", "28"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var edition_tool_1 = $__require("26");
    var scene_manager_1 = $__require("1b");
    var tools_1 = $__require("e");
    var extensions_1 = $__require("28");
    var NodeTool = /** @class */function (_super) {
        __extends(NodeTool, _super);
        function NodeTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'NODE-TOOL';
            _this.tabName = 'Properties';
            // Private members
            _this._parentId = '';
            _this._enabled = true;
            _this._currentMaterial = '';
            _this._currentCamera = false;
            _this._highlightEnabled = false;
            return _this;
        }
        /**
         * Returns if the object is supported
         * @param object the object selected in the graph
         */
        NodeTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_1.Node || object instanceof babylonjs_1.SubMesh;
        };
        /**
         * Updates the edition tool
         * @param object the object selected in the graph
         */
        NodeTool.prototype.update = function (object) {
            var _this = this;
            // Get node
            var node = object instanceof babylonjs_1.SubMesh ? object.getMesh() : object;
            _super.prototype.update.call(this, node);
            // Misc.
            var scene = node.getScene();
            this._enabled = node.isEnabled();
            // Common
            var common = this.tool.addFolder('Common');
            common.open();
            common.add(node, 'name').name('Name').onFinishChange(function (r) {
                return _this.editor.graph.renameNode(node.id, r);
            });
            common.add(this, '_enabled').name('Enabled').onFinishChange(function (r) {
                return node.setEnabled(r);
            });
            if (node instanceof babylonjs_1.AbstractMesh) common.add(node, 'isVisible').name('Is Visible');
            if (object instanceof babylonjs_1.Mesh) {
                var materials = ['None'].concat(this.editor.core.scene.materials.map(function (m) {
                    return m.name;
                }));
                this._currentMaterial = object.material ? object.material.name : 'None';
                common.add(this, '_currentMaterial', materials).name('Material').onFinishChange(function (r) {
                    if (r === 'None') return object.material = null;
                    var material = _this.editor.core.scene.getMaterialByName(r);
                    object.material = material;
                });
            }
            // Parenting
            var parenting = this.tool.addFolder('Parenting');
            parenting.open();
            var parents = ['None'];
            scene.meshes.forEach(function (m) {
                return m.name !== node.name && parents.push(m.name);
            });
            scene.lights.forEach(function (l) {
                return l.name !== node.name && parents.push(l.name);
            });
            scene.cameras.forEach(function (c) {
                return c.name !== node.name && parents.push(c.name);
            });
            this._parentId = node.parent ? node.parent.id : parents[0];
            parenting.add(this, '_parentId', parents).name('Parent').onChange(function (n) {
                node.parent = scene.getNodeByName(n);
                _this.editor.graph.setParent(node.id, node.parent ? node.parent.id : _this.editor.graph.root);
            });
            // Transforms
            var transforms = this.tool.addFolder('Transfroms');
            transforms.open();
            if (node['position']) this.tool.addVector(transforms, 'Position', node['position']).open();
            if (node['rotation']) this.tool.addVector(transforms, 'Rotation', node['rotation']).open();
            if (node['scaling']) this.tool.addVector(transforms, 'Scaling', node['scaling']).open();
            if (node['direction']) this.tool.addVector(transforms, 'Direction', node['direction']).open();
            // Abstract mesh
            if (node instanceof babylonjs_1.AbstractMesh) {
                if (!(node instanceof babylonjs_1.InstancedMesh)) {
                    // Instances
                    var instances = this.tool.addFolder('Instances');
                    instances.open();
                    instances.add(this, 'createInstance').name('Create Instance...');
                }
                // HighLight Layer
                if (node instanceof babylonjs_1.Mesh && scene_manager_1.default.HighLightLayer) {
                    var highlight = this.tool.addFolder('Highlight Layer');
                    highlight.open();
                    this._highlightEnabled = scene_manager_1.default.HighLightLayer.hasMesh(node);
                    highlight.add(this, '_highlightEnabled').name('Highlight Enabled').onFinishChange(function (r) {
                        if (r) {
                            scene_manager_1.default.HighLightLayer.addMesh(node, babylonjs_1.Color3.White());
                        } else scene_manager_1.default.HighLightLayer.removeMesh(node);
                        _this.update(node);
                    });
                    if (this._highlightEnabled) {
                        for (var m in scene_manager_1.default.HighLightLayer['_meshes']) {
                            var mesh = scene_manager_1.default.HighLightLayer['_meshes'][m];
                            if (mesh.mesh !== node) continue;
                            this.tool.addColor(highlight, 'HighLight Color', mesh.color).open();
                            highlight.add(mesh, 'glowEmissiveOnly').name('Glow Emissive Only');
                        }
                    }
                }
            }
            // Camera
            else if (node instanceof babylonjs_1.Camera) {
                    this._currentCamera = scene.activeCamera === node;
                    var camera = this.tool.addFolder('Camera');
                    camera.open();
                    camera.add(this, '_currentCamera').name('Active Camera').onFinishChange(function (r) {
                        scene.activeCamera = r ? node : _this.editor.camera;
                    });
                    if (node instanceof babylonjs_1.ArcRotateCamera) {
                        camera.add(node, 'panningSensibility').step(1).name('Panning Sensibility');
                        camera.add(node.inputs.attached.mousewheel, 'wheelPrecision').step(0.01).name('Zoom Factor');
                    }
                    if (node['speed'] !== undefined) {
                        camera.add(node, 'speed').step(0.01).name('Speed');
                    }
                    camera.add(node, 'minZ').step(0.01).name('Min Z');
                    camera.add(node, 'maxZ').step(0.01).name('Max Z');
                    camera.add(node, 'fov').step(0.01).name('Fov');
                }
            // Animations
            if (node.animations && node.animations.length > 0 || node instanceof babylonjs_1.Mesh && node.skeleton) {
                var animations = this.tool.addFolder('Animations');
                animations.open();
                animations.add(this, 'playAnimations').name('Play Animations');
            }
            // Scripts
            this.addScriptsConfiguration(node);
        };
        /**
         * Creates a new instance
         */
        NodeTool.prototype.createInstance = function () {
            var instance = this.object.createInstance('New instance ' + babylonjs_1.Tools.RandomId());
            instance.id = babylonjs_1.Tools.RandomId();
            this.editor.graph.add({
                id: instance.id,
                img: this.editor.graph.getIcon(instance),
                text: instance.name,
                data: instance
            }, this.object.id);
            this.editor.edition.setObject(instance);
            this.editor.graph.select(instance.id);
        };
        /**
         * Plays the animations of the current node
         * (including skeleton if exists)
         */
        NodeTool.prototype.playAnimations = function () {
            var scene = this.editor.core.scene;
            if (this.object.animations && this.object.animations.length > 0) {
                var bounds = scene_manager_1.default.GetAnimationFrameBounds([this.object]);
                scene.stopAnimation(this.object);
                scene.beginAnimation(this.object, bounds.min, bounds.max, false, 1.0);
            }
            if (this.object instanceof babylonjs_1.Mesh && this.object.skeleton) {
                var bounds = scene_manager_1.default.GetAnimationFrameBounds(this.object.skeleton.bones);
                scene.stopAnimation(this.object.skeleton);
                scene.beginAnimation(this.object.skeleton, bounds.min, bounds.max, false, 1.0);
            }
        };
        /**
         * Adds all the scripts metadatas to configure custom user values
         */
        NodeTool.prototype.addScriptsConfiguration = function (node) {
            var _this = this;
            var scripts = this.tool.addFolder('Scripts');
            scripts.open();
            var behaviorExtension = extensions_1.default.RequestExtension(this.editor.core.scene, 'BehaviorExtension');
            if (behaviorExtension && node.metadata && node.metadata.behavior) {
                var data = node.metadata.behavior;
                // For each metadata, get parameters
                data.metadatas.forEach(function (m) {
                    var code = _this.editor.core.scene.metadata.behaviorScripts.find(function (s) {
                        return s.id === m.codeId;
                    });
                    var params = null;
                    try {
                        params = behaviorExtension.getConstructor(code, node, true);
                        if (!params.ctor) return;
                    } catch (e) {
                        return;
                    }
                    // Set params
                    m.params = m.params || {};
                    // Add folder and children
                    var script = scripts.addFolder(code.name);
                    script.open();
                    for (var p in params) {
                        if (p === 'ctor') continue;
                        m.params[p] = m.params[p] || params[p];
                        if (typeof m.params[p] !== typeof params[p]) m.params[p] = params[p];
                        // Types
                        switch (tools_1.default.GetConstructorName(params[p])) {
                            case 'Number':
                                script.add(m.params, p);
                                break;
                            case 'String':
                                script.add(m.params, p);
                                break;
                            case 'Vector2':
                            case 'Vector3':
                            case 'Vector4':
                                _this.tool.addVector(script, p, m.params[p]).open();
                                break;
                            case 'Color3':
                            case 'Color4':
                                _this.tool.addColor(script, p, m.params[p]).open();
                                break;
                            default:
                                debugger;
                                console.info('Not supported data type');
                                break;
                        }
                    }
                });
            }
        };
        return NodeTool;
    }(edition_tool_1.default);
    exports.default = NodeTool;

});
$__System.registerDynamic("29", ["c", "26", "e"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var edition_tool_1 = $__require("26");
    var tools_1 = $__require("e");
    var LightTool = /** @class */function (_super) {
        __extends(LightTool, _super);
        function LightTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'LIGHT-TOOL';
            _this.tabName = 'Light';
            // Private members
            _this._generatesShadows = false;
            _this._shadowMapSize = '512';
            _this._darkness = 0;
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        LightTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_1.Light;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        LightTool.prototype.update = function (light) {
            var _this = this;
            _super.prototype.update.call(this, light);
            _super.prototype.setTabName.call(this, tools_1.default.GetConstructorName(light).replace('Light', ''));
            // Common
            var common = this.tool.addFolder('Common');
            common.open();
            common.add(light, 'intensity').min(0).step(0.01).name('Intensity');
            common.add(light, 'range').min(0).step(0.01).name('Range');
            common.add(light, 'radius').min(0).step(0.01).name('Radius');
            // Colors
            var colors = this.tool.addFolder('Colors');
            colors.open();
            this.tool.addColor(colors, 'Diffuse', light.diffuse).open();
            this.tool.addColor(colors, 'Specular', light.specular).open();
            // Spot
            if (light instanceof babylonjs_1.SpotLight) {
                var spot = this.tool.addFolder('Spot Light');
                spot.open();
                spot.add(light, 'angle').step(0.01).name('Angle');
                spot.add(light, 'exponent').step(0.01).name('Exponent');
            }
            // Shadows
            if (light instanceof babylonjs_1.DirectionalLight || light instanceof babylonjs_1.PointLight || light instanceof babylonjs_1.SpotLight) {
                var shadowGenerator_1 = light.getShadowGenerator();
                shadowGenerator_1 ? this._generatesShadows = true : this._generatesShadows = false;
                var shadows = this.tool.addFolder('Shadows');
                shadows.open();
                shadows.add(this, '_generatesShadows').name('Generate Shadows').onFinishChange(function (r) {
                    if (!r) light.getShadowGenerator().dispose();else {
                        var size = parseInt(_this._shadowMapSize);
                        new babylonjs_1.ShadowGenerator(size, light);
                    }
                    _this.editor.edition.setObject(light);
                });
                shadows.add(light, 'shadowEnabled').name('Enable Shadows');
                var sizes = [];
                var max = this.editor.core.engine.getCaps().maxTextureSize;
                var current = 8;
                while (current < max) {
                    current <<= 1;
                    sizes.push(current.toString());
                }
                shadows.add(this, '_shadowMapSize', sizes).name('Shadow Map Size').onFinishChange(function (r) {
                    return shadowGenerator_1 && shadowGenerator_1.getShadowMap().resize(parseInt(r));
                });
                if (shadowGenerator_1) {
                    this._darkness = shadowGenerator_1.getDarkness();
                    shadows.add(this, '_darkness').min(0).max(1).step(0.01).name('Darkness').onChange(function (r) {
                        return shadowGenerator_1.setDarkness(r);
                    });
                    shadows.add(shadowGenerator_1, 'bias').min(0).max(1).step(0.0000001).name('Bias');
                    shadows.add(shadowGenerator_1, 'blurBoxOffset').min(0).max(10).step(1).name('Blur Box Offset');
                    shadows.add(shadowGenerator_1, 'blurScale').min(0).max(16).step(1).name('Blur Scale');
                    shadows.add(shadowGenerator_1, 'useKernelBlur').name('Use Kernel Blur');
                    shadows.add(shadowGenerator_1, 'blurKernel').min(0).max(512).step(1).name('Blur Kernel');
                    shadows.add(shadowGenerator_1, 'usePoissonSampling').name('Use Poisson Sampling');
                    shadows.add(shadowGenerator_1, 'useExponentialShadowMap').name('Use Exponential Shadow Map');
                    shadows.add(shadowGenerator_1, 'useBlurExponentialShadowMap').name('Use Blur Exponential Shadow Map');
                    shadows.add(shadowGenerator_1, 'useCloseExponentialShadowMap').name('Use Close Exponential Shadow Map');
                    shadows.add(shadowGenerator_1, 'useBlurCloseExponentialShadowMap').name('Use Blur Close Exponential Shadow Map');
                }
            }
        };
        return LightTool;
    }(edition_tool_1.default);
    exports.default = LightTool;

});
$__System.registerDynamic("2a", ["c", "26"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var edition_tool_1 = $__require("26");
    var PhysicsTool = /** @class */function (_super) {
        __extends(PhysicsTool, _super);
        function PhysicsTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'PHYSICS-TOOL';
            _this.tabName = 'Physics';
            // Private members
            _this._currentImpostor = '';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        PhysicsTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_1.Mesh || object instanceof babylonjs_1.FreeCamera;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        PhysicsTool.prototype.update = function (node) {
            var _this = this;
            _super.prototype.update.call(this, node);
            // Collisions
            var collisions = this.tool.addFolder('Collisions');
            collisions.open();
            collisions.add(node, 'checkCollisions').name('Check Collisions');
            collisions.add(node, 'collisionMask').step(0.01).name('Collision Mask');
            if (node instanceof babylonjs_1.AbstractMesh) collisions.add(node, 'isBlocker').name('Is Blocker');
            if (node instanceof babylonjs_1.Mesh) collisions.add(node, 'useOctreeForCollisions').name('Use Octree For Collisions');else this.tool.addVector(collisions, 'Ellipsoid', node.ellipsoid).open();
            // Physics
            if (node instanceof babylonjs_1.Mesh && node.getScene().isPhysicsEnabled()) {
                var physics = this.tool.addFolder('Physics');
                physics.open();
                var impostors = ['NoImpostor', 'SphereImpostor', 'BoxImpostor', 'PlaneImpostor', 'MeshImpostor', 'CylinderImpostor', 'ParticleImpostor', 'HeightmapImpostor'];
                var impostor = node.getPhysicsImpostor();
                if (!impostor) this._currentImpostor = impostors[0];else this._currentImpostor = impostors[impostor.type];
                physics.add(this, '_currentImpostor', impostors).name('Impostor').onFinishChange(function (r) {
                    node.physicsImpostor = new babylonjs_1.PhysicsImpostor(node, babylonjs_1.PhysicsImpostor[r], { mass: 0 });
                    _this.update(node);
                });
                if (impostor) {
                    physics.add(impostor, 'mass').step(0.01).name('Mass');
                    physics.add(impostor, 'friction').step(0.01).name('Friction');
                    physics.add(impostor, 'restitution').step(0.01).name('Restitution');
                }
            }
        };
        return PhysicsTool;
    }(edition_tool_1.default);
    exports.default = PhysicsTool;

});
$__System.registerDynamic("2b", ["c", "26", "10"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var edition_tool_1 = $__require("26");
    var picker_1 = $__require("10");
    var RenderTargetTool = /** @class */function (_super) {
        __extends(RenderTargetTool, _super);
        function RenderTargetTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'RENDER-TARGET-TOOL';
            _this.tabName = 'Render Target';
            // Private members
            _this._renderTarget = null;
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        RenderTargetTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_1.Light && !!object.getShadowGenerator() || object instanceof babylonjs_1.RenderTargetTexture || object instanceof babylonjs_1.ReflectionProbe;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        RenderTargetTool.prototype.update = function (node) {
            _super.prototype.update.call(this, node);
            // Get render target
            this._renderTarget = node instanceof babylonjs_1.Light ? node.getShadowGenerator().getShadowMap() : node instanceof babylonjs_1.ReflectionProbe ? node.cubeTexture : node;
            // Common
            var common = this.tool.addFolder('Common');
            common.open();
            common.add(node instanceof babylonjs_1.ReflectionProbe ? node : this._renderTarget, 'name').name('Name');
            common.add(this._renderTarget, 'refreshRate').min(0).step(1).name('Refresh Rate');
            // Render list
            var renderList = this.tool.addFolder('Render List');
            renderList.open();
            renderList.add(this._renderTarget, 'renderParticles').name('Render Particles');
            renderList.add(this._renderTarget, 'renderSprites').name('Render Sprites');
            renderList.add(this, '_setRenderList').name('Configure Render List...');
            // Reflection probe
            if (node instanceof babylonjs_1.ReflectionProbe) {
                var reflectionProbe = this.tool.addFolder('Reflection Probe');
                reflectionProbe.open();
                this.tool.addVector(reflectionProbe, 'Position', node.position).open();
                reflectionProbe.add(this, '_attachToMesh').name('Attach To Mesh...');
            }
        };
        // Sets the render list of the render target
        RenderTargetTool.prototype._setRenderList = function () {
            var _this = this;
            var picker = new picker_1.default('Render List');
            picker.addItems(this.object.getScene().meshes);
            picker.addSelected(this._renderTarget.renderList);
            picker.open(function (selected) {
                var scene = _this._renderTarget.getScene();
                _this._renderTarget.renderList = [];
                selected.forEach(function (s) {
                    return _this._renderTarget.renderList.push(scene.getMeshByName(s.name));
                });
            });
        };
        // Sets the attached mesh of the reflection probe
        RenderTargetTool.prototype._attachToMesh = function () {
            var _this = this;
            var picker = new picker_1.default('Render List');
            picker.addItems(this.object.getScene().meshes);
            var attached = this.object['_attachedMesh'];
            if (attached) picker.addSelected([this.object['_attachedMesh']]);
            picker.open(function (selected) {
                var scene = _this._renderTarget.getScene();
                _this.object.attachToMesh(scene.getMeshByName(selected[0].name));
            });
        };
        return RenderTargetTool;
    }(edition_tool_1.default);
    exports.default = RenderTargetTool;

});
$__System.registerDynamic("2c", ["c", "26"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var edition_tool_1 = $__require("26");
    var ParticleSystemTool = /** @class */function (_super) {
        __extends(ParticleSystemTool, _super);
        function ParticleSystemTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'PARTICLE-SYSTEM-TOOL';
            _this.tabName = 'Particle System';
            // Private members
            _this._currentEmitter = '';
            _this._currentBlendMode = '';
            _this._currentEmiterType = '';
            return _this;
        }
        /**
         * Returns if the object is supported
         * @param object the object selected in the graph
         */
        ParticleSystemTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_1.ParticleSystem;
        };
        /**
         * Updates the edition tool
         * @param object the object selected in the graph
         */
        ParticleSystemTool.prototype.update = function (ps) {
            var _this = this;
            _super.prototype.update.call(this, ps);
            // Misc.
            var scene = this.editor.core.scene;
            // Particle System
            if (ps instanceof babylonjs_1.ParticleSystem) {
                // Emitter
                var emitter = this.tool.addFolder('Emitter');
                emitter.open();
                emitter.add(ps, 'id').name('Id');
                emitter.add(ps, 'name').name('Name');
                if (ps.emitter instanceof babylonjs_1.Vector3) this.tool.addVector(emitter, 'Emitter', ps.emitter);else {
                    this._currentEmitter = ps.emitter.name;
                    var nodes = scene.meshes.map(function (m) {
                        return m.name;
                    });
                    emitter.add(this, '_currentEmitter', nodes).name('Emitter').onFinishChange(function (r) {
                        var mesh = scene.getMeshByName(r);
                        if (mesh) ps.emitter = mesh;
                    });
                }
                // Emitter type
                var emiterType = this.tool.addFolder('Emiter Type');
                emiterType.open();
                this._currentEmiterType = this._getEmiterTypeString(ps);
                var emiterTypes = ['Box', 'Sphere', 'Sphere Directed', 'Cone'];
                emiterType.add(this, '_currentEmiterType', emiterTypes).name('Emiter Type').onFinishChange(function (r) {
                    switch (r) {
                        case 'Box':
                            ps.createBoxEmitter(ps.direction1, ps.direction2, ps.minEmitBox, ps.maxEmitBox);
                            break;
                        case 'Sphere':
                            ps.createSphereEmitter(10);
                            break;
                        case 'Sphere Directed':
                            ps.createDirectedSphereEmitter(10, ps.direction1, ps.direction2);
                            break;
                        case 'Cone':
                            ps.createConeEmitter(10, 0);
                            break;
                        default:
                            break;
                    }
                    _this.update(ps);
                });
                if (ps.particleEmitterType instanceof babylonjs_1.SphereParticleEmitter) {
                    emiterType.add(ps.particleEmitterType, 'radius').step(0.01).name('Radius');
                } else if (ps.particleEmitterType instanceof babylonjs_1.ConeParticleEmitter) {
                    emiterType.add(ps.particleEmitterType, 'radius').step(0.01).name('Radius');
                    emiterType.add(ps.particleEmitterType, 'angle').step(0.01).name('Angle');
                }
                if (!(ps.particleEmitterType instanceof babylonjs_1.BoxParticleEmitter)) emiterType.add(ps.particleEmitterType, 'directionRandomizer').min(0).max(1).step(0.001).name('Direction Randomizer');
                // Texture
                var texture = this.tool.addFolder('Texture');
                texture.open();
                this.tool.addTexture(texture, this.editor, 'particleTexture', ps, false).name('Particle Texture');
                var blendModes = ['BLENDMODE_ONEONE', 'BLENDMODE_STANDARD'];
                this._currentBlendMode = blendModes[ps.blendMode];
                texture.add(this, '_currentBlendMode', blendModes).name('Blend Mode').onChange(function (r) {
                    return ps.blendMode = babylonjs_1.ParticleSystem[r];
                });
                // Actions
                var actions = this.tool.addFolder('Actions');
                actions.open();
                actions.add(ps, 'rebuild').name('Rebuild');
                actions.add(ps, 'start').name('Start');
                actions.add(ps, 'stop').name('Stop');
                // Emit
                var emit = this.tool.addFolder('Emit');
                emit.open();
                emit.add(ps, 'emitRate').min(0).step(0.01).name('Emit Rate');
                emit.add(ps, 'minEmitPower').min(0).step(0.01).name('Min Emit Power');
                emit.add(ps, 'maxEmitPower').min(0).step(0.01).name('Max Emit Power');
                // Update
                var update = this.tool.addFolder('Update');
                update.open();
                update.add(ps, 'updateSpeed').min(0).step(0.01).name('Update Speed');
                // Life
                var life = this.tool.addFolder('Life Time');
                life.open();
                life.add(ps, 'minLifeTime').min(0).step(0.01).name('Min Life Time');
                life.add(ps, 'maxLifeTime').min(0).step(0.01).name('Max Life Time');
                // Size
                var size = this.tool.addFolder('Size');
                size.open();
                size.add(ps, 'minSize').min(0).step(0.01).name('Min Size');
                size.add(ps, 'maxSize').min(0).step(0.01).name('Max Size');
                // Angular Speed
                var angular = this.tool.addFolder('Angular Speed');
                angular.open();
                angular.add(ps, 'minAngularSpeed').min(0).step(0.01).name('Min Angular Speed');
                angular.add(ps, 'maxAngularSpeed').min(0).step(0.01).name('Max Angular Speed');
                // Sprite
                if (ps.isAnimationSheetEnabled) {
                    var sprite = this.tool.addFolder('Sprite');
                    sprite.open();
                    sprite.add(ps, 'startSpriteCellID').min(0).step(1).name('Start Sprite Cell ID');
                    sprite.add(ps, 'endSpriteCellID').min(0).step(1).name('End Sprite Cell ID');
                    sprite.add(ps, 'spriteCellWidth').min(0).step(1).name('Sprite Cell Width');
                    sprite.add(ps, 'spriteCellHeight').min(0).step(1).name('Sprite Cell Height');
                    // sprite.add(ps, 'spriteCellLoop').name('Sprite Cell Loop').onFinishChange(r => ps.spriteCellLoop = r);
                    sprite.add(ps, 'spriteCellChangeSpeed').min(0).step(1).name('Sprite Cell Change Speed');
                }
                // Gravity
                this.tool.addVector(this.tool.element, 'Gravity', ps.gravity).open();
                if (ps.particleEmitterType instanceof babylonjs_1.BoxParticleEmitter || ps.particleEmitterType instanceof babylonjs_1.SphereDirectedParticleEmitter) {
                    // Direction1
                    this.tool.addVector(this.tool.element, 'Direction 1', ps.direction1).open();
                    // Direction2
                    this.tool.addVector(this.tool.element, 'Direction 2', ps.direction2).open();
                    if (ps.particleEmitterType instanceof babylonjs_1.BoxParticleEmitter) {
                        // Min Emit Box
                        this.tool.addVector(this.tool.element, 'Min Emit Box', ps.minEmitBox).open();
                        // Max Emit Box
                        this.tool.addVector(this.tool.element, 'Max Emit Box', ps.maxEmitBox).open();
                    }
                }
                // Color 1
                this.tool.addColor(this.tool.element, 'Color 1', ps.color1).open();
                // Color 2
                this.tool.addColor(this.tool.element, 'Color 2', ps.color2).open();
                // Color Dead
                this.tool.addColor(this.tool.element, 'Color Dead', ps.colorDead).open();
            }
        };
        // Returns the emiter type as a string
        ParticleSystemTool.prototype._getEmiterTypeString = function (ps) {
            if (ps.particleEmitterType instanceof babylonjs_1.BoxParticleEmitter) return 'Box';
            if (ps.particleEmitterType instanceof babylonjs_1.SphereDirectedParticleEmitter) return 'Sphere Directed';
            if (ps.particleEmitterType instanceof babylonjs_1.SphereParticleEmitter) return 'Sphere';
            if (ps.particleEmitterType instanceof babylonjs_1.ConeParticleEmitter) return 'Cone';
            return 'None';
        };
        return ParticleSystemTool;
    }(edition_tool_1.default);
    exports.default = ParticleSystemTool;

});
$__System.registerDynamic("2d", ["c", "26", "10"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var edition_tool_1 = $__require("26");
    var picker_1 = $__require("10");
    var SoundTool = /** @class */function (_super) {
        __extends(SoundTool, _super);
        function SoundTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'SOUND-TOOL';
            _this.tabName = 'Sound';
            // Private members
            _this._volume = 0;
            _this._playbackRate = 0;
            _this._rolloffFactor = 0;
            _this._position = babylonjs_1.Vector3.Zero();
            _this._time = 0;
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        SoundTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_1.Sound;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        SoundTool.prototype.update = function (sound) {
            var _this = this;
            _super.prototype.update.call(this, sound);
            // Common
            var common = this.tool.addFolder('Sound');
            common.open();
            common.add(this, '_playSound').name('Play Sound');
            common.add(this, '_pauseSound').name('Pause Sound');
            common.add(this, '_stopSound').name('Stop Sound');
            this._volume = sound.getVolume();
            this._playbackRate = sound['_playbackRate'];
            this._rolloffFactor = sound.rolloffFactor;
            common.add(this, '_volume').min(0.0).max(1.0).step(0.01).name('Volume').onChange(function (result) {
                return sound.setVolume(result);
            });
            common.add(this, '_playbackRate').min(0.0).max(1.0).step(0.01).name('Playback Rate').onChange(function (result) {
                return sound.setPlaybackRate(result);
            });
            common.add(this, '_rolloffFactor').min(0.0).max(1.0).step(0.01).name('Rolloff Factor').onChange(function (result) {
                return sound.updateOptions({ rolloffFactor: result });
            });
            common.add(sound, 'loop').name('Loop').onChange(function (result) {
                return sound.updateOptions({ loop: result });
            });
            // Player
            var player = this.tool.addFolder('Player');
            player.open();
            this._time = 0;
            var buffer = this.object.getAudioBuffer();
            if (buffer) {
                player.add(this, '_time').min(0).max(buffer.duration).name('Time (seconds)').onChange(function (r) {
                    _this.object.stop();
                    _this.object.play(0, _this._time);
                });
            }
            // Spatial
            var spatial = this.tool.addFolder('Spatial');
            spatial.open();
            if (sound.spatialSound) {
                spatial.add(sound, 'distanceModel', ['linear', 'exponential', 'inverse']).name('Distance Model').onFinishChange(function (result) {
                    return sound.updateOptions({ distanceModel: result });
                });
                spatial.add(sound, 'maxDistance').min(0.0).name('Max Distance').onChange(function (result) {
                    return sound.updateOptions({ maxDistance: result });
                });
                this._position = sound['_position'];
                this.tool.addVector(spatial, 'Position', this._position, function () {
                    return sound.setPosition(_this._position);
                }).open();
            }
            spatial.add(this, '_attachToMesh').name('Attach to mesh...');
        };
        // Pause sound
        SoundTool.prototype._pauseSound = function () {
            this.object.pause();
        };
        // Play sound
        SoundTool.prototype._playSound = function () {
            if (!this.object.isPlaying) this.object.play();
        };
        // Stop sound
        SoundTool.prototype._stopSound = function () {
            this.object.stop();
        };
        // Attaches the sound to given mesh
        SoundTool.prototype._attachToMesh = function () {
            var _this = this;
            var picker = new picker_1.default('Select mesh to attach');
            picker.addItems(this.editor.core.scene.meshes);
            if (this.object['_connectedMesh']) picker.addSelected([this.object['_connectedMesh']]);
            picker.open(function (items) {
                if (items.length === 0) {
                    _this.object.detachFromMesh();
                    _this.editor.graph.setParent(_this.object['id'], _this.editor.graph.root);
                } else {
                    var mesh = _this.editor.core.scene.getMeshByName(items[0].name);
                    if (mesh) {
                        _this.object.attachToMesh(mesh);
                        _this.editor.graph.setParent(_this.object['id'], mesh.id);
                    }
                }
                _this.update(_this.object);
            });
        };
        return SoundTool;
    }(edition_tool_1.default);
    exports.default = SoundTool;

});
$__System.registerDynamic("2e", ["c", "26", "e"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var BABYLON = $__require("c");
    var babylonjs_1 = $__require("c");
    var edition_tool_1 = $__require("26");
    var tools_1 = $__require("e");
    var AnimationTool = /** @class */function (_super) {
        __extends(AnimationTool, _super);
        function AnimationTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'ANIMATION-TOOL';
            _this.tabName = 'Animation';
            // Private members
            _this._easingFunction = '';
            _this._easingMode = '';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        AnimationTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_1.Animation;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        AnimationTool.prototype.update = function (animation) {
            var _this = this;
            _super.prototype.update.call(this, animation);
            // Animation
            var common = this.tool.addFolder('Common');
            common.open();
            common.add(animation, 'name').name('Name');
            common.add(animation, 'framePerSecond').step(0.1).name('Frame Per Second');
            // Blending
            var blending = this.tool.addFolder('Blending');
            blending.open();
            if (animation.enableBlending !== undefined) {
                blending.add(animation, 'enableBlending').name('Enable Blending');
                blending.add(animation, 'blendingSpeed').name('Blending Speed');
            }
            // Easing
            var easing = this.tool.addFolder('Easing');
            easing.open();
            var easingFunction = animation.getEasingFunction();
            var easingFunctions = ['None', 'CircleEase', 'BackEase', 'BounceEase', 'CubicEase', 'ElasticEase', 'ExponentialEase', 'PowerEase', 'QuadraticEase', 'QuarticEase', 'QuinticEase', 'SineEase', 'BezierCurveEase'];
            this._easingFunction = easingFunction ? tools_1.default.GetConstructorName(easingFunction) : 'None';
            easing.add(this, '_easingFunction', easingFunctions).name('Easing Function').onFinishChange(function (r) {
                var easingFunction = new BABYLON[r]();
                animation.setEasingFunction(easingFunction);
                _this.update(animation);
            });
            if (easingFunction) {
                // Easing mode
                var easingModes = ['EASINGMODE_EASEIN', 'EASINGMODE_EASEOUT', 'EASINGMODE_EASEINOUT'];
                this._easingMode = easingModes[easingFunction.getEasingMode()];
                easing.add(this, '_easingMode', easingModes).name('Easing Mode').onFinishChange(function (r) {
                    easingFunction.setEasingMode(babylonjs_1.EasingFunction[r]);
                });
                // Set parameters
                switch (this._easingFunction) {
                    case 'BackEase':
                        easing.add(easingFunction, 'amplitude').name('Amplitude');
                        break;
                    case 'BounceEase':
                        easing.add(easingFunction, 'bounces').name('Bounces');
                        easing.add(easingFunction, 'bounciness').name('Bounciness');
                        break;
                    case 'ElasticEase':
                        easing.add(easingFunction, 'oscillations').name('Oscillations');
                        easing.add(easingFunction, 'springiness').name('Springiness');
                        break;
                    case 'ExponentialEase':
                        easing.add(easingFunction, 'exponent').name('Exponent');
                        break;
                    case 'PowerEase':
                        easing.add(easingFunction, 'power').name('Power');
                        break;
                    case 'BezierCurveEase':
                        easing.add(easingFunction, 'x1').name('x1');
                        easing.add(easingFunction, 'y1').name('y1');
                        easing.add(easingFunction, 'x2').name('x2');
                        easing.add(easingFunction, 'y2').name('y2');
                        break;
                    default:
                        break; // Should never happen
                }
            }
        };
        return AnimationTool;
    }(edition_tool_1.default);
    exports.default = AnimationTool;

});
$__System.registerDynamic("2f", ["c", "26"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var edition_tool_1 = $__require("26");
    var SkeletonTool = /** @class */function (_super) {
        __extends(SkeletonTool, _super);
        function SkeletonTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'SKELETON-TOOL';
            _this.tabName = 'Skeleton';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        SkeletonTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_1.Skeleton || object.skeleton && object instanceof babylonjs_1.AbstractMesh;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        SkeletonTool.prototype.update = function (object) {
            var _this = this;
            // Get skeleton
            var skeleton = null;
            if (object instanceof babylonjs_1.Skeleton) skeleton = object;else skeleton = object.skeleton;
            // Super
            _super.prototype.update.call(this, skeleton);
            // Common
            var common = this.tool.addFolder('Common');
            common.open();
            common.add(skeleton, 'name').name('Name').onFinishChange(function (r) {
                return _this.editor.graph.renameNode(skeleton.id, r);
            });
            if (skeleton.needInitialSkinMatrix !== undefined) common.add(skeleton, 'needInitialSkinMatrix').name('Need Initial Skin Matrix');
            if (skeleton.dimensionsAtRest) this.tool.addVector(common, 'Dimensions At Rest', skeleton.dimensionsAtRest).open();
        };
        return SkeletonTool;
    }(edition_tool_1.default);
    exports.default = SkeletonTool;

});
$__System.registerDynamic("30", ["c", "31"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var material_tool_1 = $__require("31");
    var StandardMaterialTool = /** @class */function (_super) {
        __extends(StandardMaterialTool, _super);
        function StandardMaterialTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'STANDARD-MATERIAL-TOOL';
            _this.tabName = 'Standard Material';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        StandardMaterialTool.prototype.isSupported = function (object) {
            return _super.prototype.isSupported.call(this, object) && this.object instanceof babylonjs_1.StandardMaterial;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        StandardMaterialTool.prototype.update = function (object) {
            _super.prototype.update.call(this, object);
            // Diffuse
            var diffuse = this.tool.addFolder('Diffuse');
            diffuse.open();
            diffuse.add(this.object, 'linkEmissiveWithDiffuse').name('Link Emissive With Diffuse');
            diffuse.add(this.object, 'useAlphaFromDiffuseTexture').name('Use Alpha From Diffuse Texture');
            this.tool.addTexture(diffuse, this.editor, 'diffuseTexture', this.object).name('Diffuse Texture');
            this.tool.addColor(diffuse, 'Color', this.object.diffuseColor).open();
            // Bump
            var bump = this.tool.addFolder('Bump');
            bump.open();
            this.tool.addTexture(bump, this.editor, 'bumpTexture', this.object).name('Bump Texture');
            bump.add(this.object, 'invertNormalMapX').name('Invert Normal Map X');
            bump.add(this.object, 'invertNormalMapY').name('Invert Normal Map Y');
            bump.add(this.object, 'useParallax').name('Use Parallax');
            bump.add(this.object, 'useParallaxOcclusion').name('Use Parallax Occlusion');
            bump.add(this.object, 'parallaxScaleBias').step(0.001).name('Parallax Scale Bias');
            // Specular
            var specular = this.tool.addFolder('Specular');
            specular.open();
            specular.add(this.object, 'specularPower').step(0.01).name('Specular Power');
            specular.add(this.object, 'useGlossinessFromSpecularMapAlpha').name('Use Glossiness From Specular Map Alpha');
            specular.add(this.object, 'useReflectionFresnelFromSpecular').name('Use Reflection Fresnel From Specular');
            specular.add(this.object, 'useSpecularOverAlpha').name('Use Specular Over Alpha');
            this.tool.addTexture(specular, this.editor, 'specularTexture', this.object).name('Specular Texture');
            this.tool.addColor(specular, 'Color', this.object.specularColor).open();
            // Opacity
            var opacity = this.tool.addFolder('Opacity');
            opacity.open();
            this.tool.addTexture(opacity, this.editor, 'opacityTexture', this.object).name('Opacity Texture');
            // Emissive
            var emissive = this.tool.addFolder('Emissive');
            emissive.open();
            this.tool.addColor(emissive, 'Emissive', this.object.emissiveColor).open();
            emissive.add(this.object, 'useEmissiveAsIllumination').name('Use Emissive As Illumination');
            this.tool.addTexture(emissive, this.editor, 'emissiveTexture', this.object).name('Emissive Texture');
            // Ambient
            var ambient = this.tool.addFolder('Ambient');
            ambient.open();
            this.tool.addColor(ambient, 'Ambient', this.object.ambientColor).open();
            this.tool.addTexture(ambient, this.editor, 'ambientTexture', this.object).name('Ambient Texture');
            // Light map
            var lightmap = this.tool.addFolder('Lightmap');
            lightmap.open();
            lightmap.add(this.object, 'useLightmapAsShadowmap').name('Use Lightmap As Shadowmap');
            this.tool.addTexture(lightmap, this.editor, 'lightmapTexture', this.object).name('Lightmap Texture');
            // Reflection
            var reflection = this.tool.addFolder('Reflection');
            reflection.open();
            this.tool.addTexture(reflection, this.editor, 'reflectionTexture', this.object, true).name('Reflection Texture');
            // Refraction
            var refraction = this.tool.addFolder('Refraction');
            refraction.open();
            refraction.add(this.object, 'indexOfRefraction').name('Index of Refraction');
            refraction.add(this.object, 'invertRefractionY').name('Invert Y');
            this.tool.addTexture(refraction, this.editor, 'refractionTexture', this.object, true).name('Refraction Texture');
            // Options
            var options = _super.prototype.addOptions.call(this);
            options.add(this, '_convertToPbr').name('Convert to PBR...');
        };
        // Convert standard material to PBR material
        StandardMaterialTool.prototype._convertToPbr = function () {
            var _this = this;
            // Create material
            var pbr = new babylonjs_1.PBRMaterial(this.object.name + '_pbr', this.object.getScene());
            pbr.albedoColor = this.object.diffuseColor;
            pbr.albedoTexture = this.object.diffuseTexture;
            pbr.useAlphaFromAlbedoTexture = this.object.useAlphaFromDiffuseTexture;
            pbr.bumpTexture = this.object.bumpTexture;
            pbr.parallaxScaleBias = this.object.parallaxScaleBias;
            pbr.useParallax = this.object.useParallax;
            pbr.useParallaxOcclusion = this.object.useParallaxOcclusion;
            pbr.reflectivityColor = this.object.specularColor;
            pbr.reflectivityTexture = this.object.specularTexture;
            pbr.reflectionTexture = this.object.reflectionTexture;
            pbr.emissiveColor = this.object.emissiveColor;
            pbr.emissiveTexture = this.object.emissiveTexture;
            pbr.ambientColor = this.object.ambientColor;
            pbr.ambientTexture = this.object.ambientTexture;
            // Add tags to pbr
            babylonjs_1.Tags.AddTagsTo(pbr, 'added');
            // Reassign
            this.object.getBindedMeshes().forEach(function (m) {
                return m.material = pbr;
            });
            // Special for multi materials
            this.editor.core.scene.meshes.forEach(function (m) {
                if (!m.material || !(m.material instanceof babylonjs_1.MultiMaterial)) return;
                var multiMaterial = m.material;
                m.material.subMaterials.forEach(function (sm, index) {
                    if (sm === _this.object) multiMaterial.subMaterials[index] = pbr;
                });
            });
            // Update
            this.editor.edition.refresh();
        };
        return StandardMaterialTool;
    }(material_tool_1.default);
    exports.default = StandardMaterialTool;

});
$__System.registerDynamic("32", ["c", "31"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var material_tool_1 = $__require("31");
    var PBRMaterialTool = /** @class */function (_super) {
        __extends(PBRMaterialTool, _super);
        function PBRMaterialTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'PBR-TOOL';
            _this.tabName = 'PBR Material';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        PBRMaterialTool.prototype.isSupported = function (object) {
            return _super.prototype.isSupported.call(this, object) && this.object instanceof babylonjs_1.PBRMaterial;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        PBRMaterialTool.prototype.update = function (object) {
            var _this = this;
            _super.prototype.update.call(this, object);
            // Options
            var pbrOptions = this.tool.addFolder('PBR Options');
            pbrOptions.open();
            pbrOptions.add(this.object, 'forceIrradianceInFragment').name('Force Irradiance In Fragment');
            pbrOptions.add(this.object, 'forceNormalForward').name('Force Normal Forward');
            pbrOptions.add(this.object, 'enableSpecularAntiAliasing').name('Force Specular Anti-Aliasing');
            pbrOptions.add(this.object, 'usePhysicalLightFalloff').name('Use Physical Light Falloff');
            // Albedo
            var albedo = this.tool.addFolder('Albedo');
            albedo.open();
            this.tool.addTexture(albedo, this.editor, 'albedoTexture', this.object).name('Albedo Texture');
            this.tool.addColor(albedo, 'Color', this.object.albedoColor).open();
            // Bump
            var bump = this.tool.addFolder('Bump');
            bump.open();
            this.tool.addTexture(bump, this.editor, 'bumpTexture', this.object).name('Bump Texture');
            bump.add(this.object, 'invertNormalMapX').name('Invert Normal Map X');
            bump.add(this.object, 'invertNormalMapY').name('Invert Normal Map Y');
            bump.add(this.object, 'useParallax').name('Use Parallax');
            bump.add(this.object, 'useParallaxOcclusion').name('Use Parallax Occlusion');
            bump.add(this.object, 'parallaxScaleBias').step(0.001).name('Parallax Scale Bias');
            // Reflectivity
            var reflectivity = this.tool.addFolder('Reflectivity');
            reflectivity.open();
            this.tool.addTexture(reflectivity, this.editor, 'reflectivityTexture', this.object).name('Reflectivity Texture');
            this.tool.addColor(reflectivity, 'Color', this.object.reflectivityColor).open();
            // Reflection
            var reflection = this.tool.addFolder('Reflection');
            reflection.open();
            this.tool.addTexture(reflection, this.editor, 'reflectionTexture', this.object, true, false).name('Reflection Texture');
            this.tool.addColor(reflection, 'Color', this.object.reflectionColor).open();
            reflection.add(this.object, 'environmentIntensity').step(0.01).name('Environment Intensity');
            // Microsurface
            var micro = this.tool.addFolder('Micro Surface');
            micro.open();
            this.tool.addTexture(micro, this.editor, 'microSurfaceTexture', this.object, false).name('Micro Surface Texture');
            micro.add(this.object, 'microSurface').min(0).max(1).name('Micro Surface');
            micro.add(this.object, 'useAutoMicroSurfaceFromReflectivityMap').name('Use Auto Micro Surface From Reflectivity Map');
            micro.add(this.object, 'useMicroSurfaceFromReflectivityMapAlpha').name('Use Micro Surface From Reflectivity Map Alpha');
            // Metallic
            var metallic = this.tool.addFolder('Metallic');
            metallic.open();
            metallic.add(this.object, 'useMetallnessFromMetallicTextureBlue').name('Metallness From Metallic Texture Blue');
            metallic.add(this.object, 'useRoughnessFromMetallicTextureAlpha').name('Use Roughness From Metallic Texture Alpha');
            metallic.add(this.object, 'useRoughnessFromMetallicTextureGreen').name('Use Roughness From Metallic Texture Green');
            if (this.object.metallic !== undefined) metallic.add(this.object, 'metallic').step(0.01).name('Metallic');
            this.tool.addTexture(metallic, this.editor, 'metallicTexture', this.object, false, false, function (t) {
                if (_this.object.metallic === undefined) {
                    _this.object.metallic = 1;
                    _this.update(_this.object);
                }
            }).name('Metallic Texture');
            // Emissive
            var emissive = this.tool.addFolder('Emissive');
            emissive.open();
            this.tool.addColor(emissive, 'Emissive', this.object.emissiveColor).open();
            emissive.add(this.object, 'emissiveIntensity').step(0.01).name('Emissive Intensity');
            this.tool.addTexture(emissive, this.editor, 'emissiveTexture', this.object).name('Emissive Texture');
            // Ambient
            var ambient = this.tool.addFolder('Ambient');
            ambient.open();
            this.tool.addColor(ambient, 'Ambient', this.object.ambientColor).open();
            this.tool.addTexture(ambient, this.editor, 'ambientTexture', this.object).name('Ambient Texture');
            ambient.add(this.object, 'ambientTextureStrength').step(0.01).name('Ambient Texture Strength');
            // Light map
            var lightmap = this.tool.addFolder('Lightmap');
            lightmap.open();
            lightmap.add(this.object, 'useLightmapAsShadowmap').name('Use Lightmap As Shadowmap');
            this.tool.addTexture(lightmap, this.editor, 'lightmapTexture', this.object).name('Lightmap Texture');
            // Refraction
            var refraction = this.tool.addFolder('Refraction');
            refraction.open();
            refraction.add(this.object, 'indexOfRefraction').step(0.01).name('Index of Refraction');
            refraction.add(this.object, 'invertRefractionY').name('Invert Y');
            refraction.add(this.object, 'linkRefractionWithTransparency').name('Link Refraction With Transparency');
            this.tool.addTexture(refraction, this.editor, 'refractionTexture', this.object, true).name('Refraction Texture');
            // Options
            _super.prototype.addOptions.call(this);
        };
        return PBRMaterialTool;
    }(material_tool_1.default);
    exports.default = PBRMaterialTool;

});
$__System.registerDynamic("33", ["c", "31"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var material_tool_1 = $__require("31");
    var PBRMetallicRoughnessMaterialTool = /** @class */function (_super) {
        __extends(PBRMetallicRoughnessMaterialTool, _super);
        function PBRMetallicRoughnessMaterialTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'PBR-METALLIC-ROUGHNESS-MATERIAL-TOOL';
            _this.tabName = 'PBR Metallic Roughness';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        PBRMetallicRoughnessMaterialTool.prototype.isSupported = function (object) {
            return _super.prototype.isSupported.call(this, object) && this.object instanceof babylonjs_1.PBRMetallicRoughnessMaterial;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        PBRMetallicRoughnessMaterialTool.prototype.update = function (object) {
            _super.prototype.update.call(this, object);
            // Base Color
            var baseColor = this.tool.addFolder('Base');
            baseColor.open();
            this.tool.addColor(baseColor, 'Base Color', this.object.baseColor).open();
            this.tool.addTexture(baseColor, this.editor, 'baseTexture', this.object, false).name('Texture');
            // Bump
            var normal = this.tool.addFolder('Normal');
            normal.open();
            this.tool.addTexture(normal, this.editor, 'normalTexture', this.object).name('Normal Texture');
            normal.add(this.object, 'invertNormalMapX').name('Invert Normal Map X');
            normal.add(this.object, 'invertNormalMapY').name('Invert Normal Map Y');
            // Reflection
            var reflection = this.tool.addFolder('Reflection');
            reflection.open();
            this.tool.addTexture(reflection, this.editor, 'environmentTexture', this.object, true, false).name('Environment Texture');
            // Metallic Roughness
            var metallic = this.tool.addFolder('Metallic Roughness');
            metallic.open();
            metallic.add(this.object, 'roughness').step(0.01).name('Roughness');
            metallic.add(this.object, 'metallic').step(0.01).name('Metallic');
            this.tool.addTexture(metallic, this.editor, 'metallicRoughnessTexture', this.object).name('Metallic Roughness Texture');
            // Emissive
            var emissive = this.tool.addFolder('Emissive');
            emissive.open();
            this.tool.addColor(emissive, 'Color', this.object.emissiveColor).open();
            this.tool.addTexture(emissive, this.editor, 'emissiveTexture', this.object).name('Emissive Texture');
            // Lightmap
            var lightmap = this.tool.addFolder('Lightmap');
            lightmap.open();
            lightmap.add(this.object, 'useLightmapAsShadowmap').name('Use Lightmap As Shadowmap');
            this.tool.addTexture(lightmap, this.editor, 'lightmapTexture', this.object).name('Lightmap Texture');
            // Occlusion
            var occlusion = this.tool.addFolder('Occlusion');
            occlusion.open();
            occlusion.add(this.object, 'occlusionStrength').name('Occlusion Strength');
            this.tool.addTexture(occlusion, this.editor, 'occlusionTexture', this.object).name('Occlusion Texture');
            // Options
            _super.prototype.addOptions.call(this);
        };
        return PBRMetallicRoughnessMaterialTool;
    }(material_tool_1.default);
    exports.default = PBRMetallicRoughnessMaterialTool;

});
$__System.registerDynamic("34", ["c", "31"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var material_tool_1 = $__require("31");
    var PBRSpecularGlossinessMaterialTool = /** @class */function (_super) {
        __extends(PBRSpecularGlossinessMaterialTool, _super);
        function PBRSpecularGlossinessMaterialTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'PBR-SPECULAR-GLOSSINESS-MATERIAL-TOOL';
            _this.tabName = 'PBR Specular Glossiness';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        PBRSpecularGlossinessMaterialTool.prototype.isSupported = function (object) {
            return _super.prototype.isSupported.call(this, object) && this.object instanceof babylonjs_1.PBRSpecularGlossinessMaterial;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        PBRSpecularGlossinessMaterialTool.prototype.update = function (object) {
            _super.prototype.update.call(this, object);
            // Diffuse Color
            var diffuseColor = this.tool.addFolder('Diffuse');
            diffuseColor.open();
            this.tool.addColor(diffuseColor, 'Color', this.object.diffuseColor).open();
            this.tool.addTexture(diffuseColor, this.editor, 'diffuseTexture', this.object, false).name('Texture');
            // Bump
            var normal = this.tool.addFolder('Normal');
            normal.open();
            this.tool.addTexture(normal, this.editor, 'normalTexture', this.object).name('Normal Texture');
            normal.add(this.object, 'invertNormalMapX').name('Invert Normal Map X');
            normal.add(this.object, 'invertNormalMapY').name('Invert Normal Map Y');
            // Reflection
            var reflection = this.tool.addFolder('Reflection');
            reflection.open();
            this.tool.addTexture(reflection, this.editor, 'environmentTexture', this.object, true, false).name('Environment Texture');
            // Specular Roughness
            var glossiness = this.tool.addFolder('Glossiness');
            glossiness.open();
            glossiness.add(this.object, 'glossiness').step(0.01).name('Glossiness');
            this.tool.addTexture(glossiness, this.editor, 'specularGlossinessTexture', this.object).name('Specular Glossiness Texture');
            // Emissive
            var emissive = this.tool.addFolder('Emissive');
            emissive.open();
            this.tool.addColor(emissive, 'Color', this.object.emissiveColor).open();
            this.tool.addTexture(emissive, this.editor, 'emissiveTexture', this.object).name('Emissive Texture');
            // Lightmap
            var lightmap = this.tool.addFolder('Lightmap');
            lightmap.open();
            lightmap.add(this.object, 'useLightmapAsShadowmap').name('Use Lightmap As Shadowmap');
            this.tool.addTexture(lightmap, this.editor, 'lightmapTexture', this.object).name('Lightmap Texture');
            // Occlusion
            var occlusion = this.tool.addFolder('Occlusion');
            occlusion.open();
            occlusion.add(this.object, 'occlusionStrength').name('Occlusion Strength');
            this.tool.addTexture(occlusion, this.editor, 'occlusionTexture', this.object).name('Occlusion Texture');
            // Options
            _super.prototype.addOptions.call(this);
        };
        return PBRSpecularGlossinessMaterialTool;
    }(material_tool_1.default);
    exports.default = PBRSpecularGlossinessMaterialTool;

});
$__System.registerDynamic("35", ["36", "31", "10"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_materials_1 = $__require("36");
    var material_tool_1 = $__require("31");
    var picker_1 = $__require("10");
    var WaterMaterialTool = /** @class */function (_super) {
        __extends(WaterMaterialTool, _super);
        function WaterMaterialTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'WATER-MATERIAL-TOOL';
            _this.tabName = 'Water Material';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        WaterMaterialTool.prototype.isSupported = function (object) {
            return _super.prototype.isSupported.call(this, object) && this.object instanceof babylonjs_materials_1.WaterMaterial;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        WaterMaterialTool.prototype.update = function (object) {
            _super.prototype.update.call(this, object);
            // Diffuse & Specular
            this.tool.addColor(this.tool.element, 'Diffuse', this.object.diffuseColor).open();
            var specular = this.tool.addFolder('Specular');
            specular.open();
            this.tool.addColor(specular, 'Specular', this.object.specularColor).open();
            specular.add(this.object, 'specularPower').step(0.1).name('Specular Power');
            // Render List
            var renderList = this.tool.addFolder('Reflection & Refraction');
            renderList.open();
            renderList.add(this, '_setRenderList').name('Set Render List...');
            // Bump
            var bump = this.tool.addFolder('Bump');
            bump.open();
            this.tool.addTexture(bump, this.editor, 'bumpTexture', this.object, false);
            bump.add(this.object, 'bumpHeight').min(0).max(10).step(0.001).name('Bump Height');
            // Wind
            var wind = this.tool.addFolder('Wind');
            wind.open();
            wind.add(this.object, 'windForce').min(0.0).step(0.01).name('Wind Force');
            this.tool.addVector(wind, 'Wind Direction', this.object.windDirection).open();
            ;
            // Waves
            var waves = this.tool.addFolder('Waves');
            waves.open();
            waves.add(this.object, 'waveHeight').min(0.0).step(0.01).name('Wave Height');
            waves.add(this.object, 'waveLength').min(0.0).step(0.01).name('Wave Length');
            waves.add(this.object, 'waveSpeed').min(0.0).step(0.01).name('Wave Speed');
            // Colors
            var colors = this.tool.addFolder('Colors');
            colors.open();
            this.tool.addColor(colors, 'Water Color 1', this.object.waterColor).open();
            colors.add(this.object, 'colorBlendFactor').min(0.0).max(1.0).step(0.01).name('Blend Factor 1');
            this.tool.addColor(colors, 'Water Color 2', this.object.waterColor2).open();
            colors.add(this.object, 'colorBlendFactor2').min(0.0).max(1.0).step(0.01).name('Blend Factor 2');
            // Advanced
            var advanced = this.tool.addFolder('Advanced');
            advanced.open();
            advanced.add(this.object, 'bumpSuperimpose').name('Bump Super Impose');
            advanced.add(this.object, 'bumpAffectsReflection').name('Bump Affects Reflection');
            advanced.add(this.object, 'fresnelSeparate').name('Fresnel Separate');
            // Options
            _super.prototype.addOptions.call(this);
        };
        // Sets the render list
        WaterMaterialTool.prototype._setRenderList = function () {
            var _this = this;
            var picker = new picker_1.default('Reflection & Refraction');
            picker.addSelected(this.object.getRenderList().map(function (m) {
                return { id: m.id };
            }));
            picker.addItems(this.editor.core.scene.meshes);
            picker.open(function (items) {
                _this.object['_reflectionRTT'].renderList = [];
                _this.object['_refractionRTT'].renderList = [];
                items.forEach(function (i) {
                    var mesh = _this.editor.core.scene.getMeshByID(i.name);
                    if (mesh) _this.object.addToRenderList(mesh);
                });
            });
        };
        return WaterMaterialTool;
    }(material_tool_1.default);
    exports.default = WaterMaterialTool;

});
$__System.registerDynamic("37", ["c", "31"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var material_tool_1 = $__require("31");
    var CustomMaterialTool = /** @class */function (_super) {
        __extends(CustomMaterialTool, _super);
        function CustomMaterialTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'CUSTOM-MATERIAL-TOOL';
            _this.tabName = 'Custom Material';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        CustomMaterialTool.prototype.isSupported = function (object) {
            return _super.prototype.isSupported.call(this, object) && this.object.getClassName && this.object.getClassName() === 'CustomMaterial';
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        CustomMaterialTool.prototype.update = function (object) {
            var _this = this;
            _super.prototype.update.call(this, object);
            this.setTabName('Custom Material');
            // Get current config of the post-process
            var config = this.object.config;
            // Base Color
            this.tool.addColor(this.tool.element, 'Base Color', this.object.baseColor).open();
            // Floats
            var floats = this.tool.addFolder('Floats');
            floats.open();
            config.floats.forEach(function (f) {
                if (_this.object.userConfig[f] === undefined) _this.object.userConfig[f] = 1;
                floats.add(_this.object.userConfig, f).step(0.01).name(f).onChange(function () {
                    return _this.object.markAsDirty(babylonjs_1.Material.MiscDirtyFlag);
                });
            });
            // Vectors
            var vectors = this.tool.addFolder('Vectors');
            vectors.open();
            config.vectors2.forEach(function (v) {
                if (!_this.object.userConfig[v] || !(_this.object.userConfig[v] instanceof babylonjs_1.Vector2)) _this.object.userConfig[v] = babylonjs_1.Vector2.Zero();
                _this.tool.addVector(vectors, v, _this.object.userConfig[v], function () {
                    return _this.object.markAsDirty(babylonjs_1.Material.MiscDirtyFlag);
                }).open();
            });
            config.vectors3.forEach(function (v) {
                if (!_this.object.userConfig[v] || !(_this.object.userConfig[v] instanceof babylonjs_1.Vector3)) _this.object.userConfig[v] = babylonjs_1.Vector3.Zero();
                _this.tool.addVector(vectors, v, _this.object.userConfig[v], function () {
                    return _this.object.markAsDirty(babylonjs_1.Material.MiscDirtyFlag);
                }).open();
            });
            // Samplers
            var samplers = this.tool.addFolder('Samplers');
            samplers.open();
            config.textures.forEach(function (t) {
                _this.tool.addTexture(samplers, _this.editor, t.name, _this.object.userConfig, false, false, function () {
                    return _this.object.markAsDirty(babylonjs_1.Material.TextureDirtyFlag);
                }).name(t.name);
            });
            // Options
            _super.prototype.addOptions.call(this);
        };
        return CustomMaterialTool;
    }(material_tool_1.default);
    exports.default = CustomMaterialTool;

});
$__System.registerDynamic("38", ["36", "31"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_materials_1 = $__require("36");
    var material_tool_1 = $__require("31");
    var SkyMaterialTool = /** @class */function (_super) {
        __extends(SkyMaterialTool, _super);
        function SkyMaterialTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'SKY-MATERIAL-TOOL';
            _this.tabName = 'Sky Material';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        SkyMaterialTool.prototype.isSupported = function (object) {
            return _super.prototype.isSupported.call(this, object) && this.object instanceof babylonjs_materials_1.SkyMaterial;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        SkyMaterialTool.prototype.update = function (object) {
            _super.prototype.update.call(this, object);
            // Sky
            this.tool.add(this.object, 'inclination').step(0.01).name('Inclination');
            this.tool.add(this.object, 'azimuth').step(0.01).name('Azimuth');
            this.tool.add(this.object, 'luminance').step(0.01).name('Luminance');
            this.tool.add(this.object, 'turbidity').step(0.01).name('Turbidity');
            this.tool.add(this.object, 'mieCoefficient').step(0.0001).name('Mie Coefficient');
            this.tool.add(this.object, 'mieDirectionalG').step(0.01).name('Mie Coefficient G');
            this.tool.add(this.object, 'rayleigh').step(0.01).name('Reileigh Coefficient');
            // Options
            _super.prototype.addOptions.call(this);
        };
        return SkyMaterialTool;
    }(material_tool_1.default);
    exports.default = SkyMaterialTool;

});
$__System.registerDynamic("39", ["36", "31"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_materials_1 = $__require("36");
    var material_tool_1 = $__require("31");
    var FireMaterialTool = /** @class */function (_super) {
        __extends(FireMaterialTool, _super);
        function FireMaterialTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'FIRE-MATERIAL-TOOL';
            _this.tabName = 'Fire Material';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        FireMaterialTool.prototype.isSupported = function (object) {
            return _super.prototype.isSupported.call(this, object) && this.object instanceof babylonjs_materials_1.FireMaterial;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        FireMaterialTool.prototype.update = function (object) {
            _super.prototype.update.call(this, object);
            // Diffuse
            var diffuse = this.tool.addFolder('Diffuse');
            diffuse.open();
            this.tool.addColor(diffuse, 'Color', this.object.diffuseColor).open();
            this.tool.addTexture(diffuse, this.editor, 'diffuseTexture', this.object, false).name('Texture');
            // Fire
            var fire = this.tool.addFolder('Fire');
            fire.open();
            fire.add(this.object, 'speed').min(0).step(0.01).name('Speed');
            this.tool.addTexture(fire, this.editor, 'distortionTexture', this.object, false).name('Distortion');
            this.tool.addTexture(fire, this.editor, 'opacityTexture', this.object, false).name('Opacity');
            // Options
            _super.prototype.addOptions.call(this);
        };
        return FireMaterialTool;
    }(material_tool_1.default);
    exports.default = FireMaterialTool;

});
$__System.registerDynamic("3a", ["36", "31"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_materials_1 = $__require("36");
    var material_tool_1 = $__require("31");
    var CellMaterialTool = /** @class */function (_super) {
        __extends(CellMaterialTool, _super);
        function CellMaterialTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'CELL-MATERIAL-TOOL';
            _this.tabName = 'Cell Material';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        CellMaterialTool.prototype.isSupported = function (object) {
            return _super.prototype.isSupported.call(this, object) && this.object instanceof babylonjs_materials_1.CellMaterial;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        CellMaterialTool.prototype.update = function (object) {
            _super.prototype.update.call(this, object);
            // Diffuse
            var diffuse = this.tool.addFolder('Diffuse');
            diffuse.open();
            this.tool.addColor(diffuse, 'Color', this.object.diffuseColor).open();
            this.tool.addTexture(diffuse, this.editor, 'diffuseTexture', this.object, false).name('Texture');
            // Cell
            var cell = this.tool.addFolder('Fire');
            cell.open();
            cell.add(this.object, 'computeHighLevel').name('Compute High Level');
            // Options
            _super.prototype.addOptions.call(this);
        };
        return CellMaterialTool;
    }(material_tool_1.default);
    exports.default = CellMaterialTool;

});
$__System.registerDynamic("3b", ["36", "31"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_materials_1 = $__require("36");
    var material_tool_1 = $__require("31");
    var CellMaterialTool = /** @class */function (_super) {
        __extends(CellMaterialTool, _super);
        function CellMaterialTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'GRID-MATERIAL-TOOL';
            _this.tabName = 'Grid Material';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        CellMaterialTool.prototype.isSupported = function (object) {
            return _super.prototype.isSupported.call(this, object) && this.object instanceof babylonjs_materials_1.GridMaterial;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        CellMaterialTool.prototype.update = function (object) {
            _super.prototype.update.call(this, object);
            // Grid
            var grid = this.tool.addFolder('Fire');
            grid.open();
            this.tool.addColor(grid, 'Main Color', this.object.mainColor).open();
            this.tool.addColor(grid, 'Line Color', this.object.lineColor).open();
            grid.add(this.object, 'gridRatio').step(0.1).name('Grid Ratio');
            grid.add(this.object, 'opacity').min(0).step(0.01).name('Opacity');
            grid.add(this.object, 'majorUnitFrequency').name('Major Unit Frequency');
            grid.add(this.object, 'minorUnitVisibility').name('Minor Unit Visibility');
            // Options
            _super.prototype.addOptions.call(this);
        };
        return CellMaterialTool;
    }(material_tool_1.default);
    exports.default = CellMaterialTool;

});
$__System.registerDynamic("3c", ["36", "31"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_materials_1 = $__require("36");
    var material_tool_1 = $__require("31");
    var TriPlanarMaterialTool = /** @class */function (_super) {
        __extends(TriPlanarMaterialTool, _super);
        function TriPlanarMaterialTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'TRI-PLANAR-MATERIAL-TOOL';
            _this.tabName = 'Tri Planar Material';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        TriPlanarMaterialTool.prototype.isSupported = function (object) {
            return _super.prototype.isSupported.call(this, object) && this.object instanceof babylonjs_materials_1.TriPlanarMaterial;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        TriPlanarMaterialTool.prototype.update = function (object) {
            _super.prototype.update.call(this, object);
            // Tri planar
            var triplanar = this.tool.addFolder('Tri Planar');
            triplanar.open();
            triplanar.add(this.object, 'tileSize').min(0).step(0.01).name('Tile Size');
            // Diffuse
            var diffuse = triplanar.addFolder('Diffuse');
            diffuse.open();
            this.tool.addColor(diffuse, 'Color', this.object.diffuseColor).open();
            this.tool.addTexture(diffuse, this.editor, 'diffuseTextureX', this.object, false).name('Diffuse Texture X');
            this.tool.addTexture(diffuse, this.editor, 'diffuseTextureY', this.object, false).name('Diffuse Texture Y');
            this.tool.addTexture(diffuse, this.editor, 'diffuseTextureZ', this.object, false).name('Diffuse Texture Z');
            // Bump
            var bump = triplanar.addFolder('Bump');
            bump.open();
            this.tool.addTexture(triplanar, this.editor, 'normalTextureX', this.object, false).name('Normal Texture X');
            this.tool.addTexture(triplanar, this.editor, 'normalTextureY', this.object, false).name('Normal Texture Y');
            this.tool.addTexture(triplanar, this.editor, 'normalTextureZ', this.object, false).name('Normal Texture Z');
            // Specular
            var specular = triplanar.addFolder('Specular');
            specular.open();
            this.tool.addColor(specular, 'Color', this.object.specularColor).open();
            specular.add(this.object, 'specularPower').min(0).step(0.5).name('Specular Power');
            // Options
            _super.prototype.addOptions.call(this);
        };
        return TriPlanarMaterialTool;
    }(material_tool_1.default);
    exports.default = TriPlanarMaterialTool;

});
$__System.registerDynamic("3d", ["36", "31"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_materials_1 = $__require("36");
    var material_tool_1 = $__require("31");
    var TerrainMaterialTool = /** @class */function (_super) {
        __extends(TerrainMaterialTool, _super);
        function TerrainMaterialTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'TERRAIN-MATERIAL-TOOL';
            _this.tabName = 'Terrain Material';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        TerrainMaterialTool.prototype.isSupported = function (object) {
            return _super.prototype.isSupported.call(this, object) && this.object instanceof babylonjs_materials_1.TerrainMaterial;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        TerrainMaterialTool.prototype.update = function (object) {
            _super.prototype.update.call(this, object);
            // Tri planar
            var terrain = this.tool.addFolder('Terrain');
            terrain.open();
            this.tool.addTexture(terrain, this.editor, 'mixTexture', this.object, false).name('Mix Texture');
            // Diffuse
            var diffuse = terrain.addFolder('Diffuse');
            diffuse.open();
            this.tool.addColor(diffuse, 'Color', this.object.diffuseColor).open();
            this.tool.addTexture(diffuse, this.editor, 'diffuseTexture1', this.object, false).name('Diffuse Texture R');
            this.tool.addTexture(diffuse, this.editor, 'diffuseTexture2', this.object, false).name('Diffuse Texture G');
            this.tool.addTexture(diffuse, this.editor, 'diffuseTexture3', this.object, false).name('Diffuse Texture B');
            // Bump
            var bump = terrain.addFolder('Bump');
            bump.open();
            this.tool.addTexture(bump, this.editor, 'bumpTexture1', this.object, false).name('Bump Texture R');
            this.tool.addTexture(bump, this.editor, 'bumpTexture2', this.object, false).name('Bump Texture G');
            this.tool.addTexture(bump, this.editor, 'bumpTexture3', this.object, false).name('Bump Texture B');
            // Specular
            var specular = terrain.addFolder('Specular');
            specular.open();
            this.tool.addColor(specular, 'Color', this.object.specularColor).open();
            specular.add(this.object, 'specularPower').min(0).step(0.5).name('Specular Power');
            // Options
            _super.prototype.addOptions.call(this);
        };
        return TerrainMaterialTool;
    }(material_tool_1.default);
    exports.default = TerrainMaterialTool;

});
$__System.registerDynamic("3e", ["36", "31"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_materials_1 = $__require("36");
    var material_tool_1 = $__require("31");
    var LavaMaterialTool = /** @class */function (_super) {
        __extends(LavaMaterialTool, _super);
        function LavaMaterialTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'LAVA-MATERIAL-TOOL';
            _this.tabName = 'Lava Material';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        LavaMaterialTool.prototype.isSupported = function (object) {
            return _super.prototype.isSupported.call(this, object) && this.object instanceof babylonjs_materials_1.LavaMaterial;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        LavaMaterialTool.prototype.update = function (object) {
            _super.prototype.update.call(this, object);
            // Diffuse
            var diffuse = this.tool.addFolder('Diffuse');
            diffuse.open();
            this.tool.addColor(diffuse, 'Color', this.object.diffuseColor).open();
            this.tool.addTexture(diffuse, this.editor, 'diffuseTexture', this.object, false).name('Texture');
            // Lava
            var lava = this.tool.addFolder('Lava');
            lava.open();
            this.tool.addTexture(lava, this.editor, 'noiseTexture', this.object, false).name('Noise');
            lava.add(this.object, 'movingSpeed').min(0).name('Moving Speed');
            lava.add(this.object, 'lowFrequencySpeed').min(0).name('Low Frequency Speed');
            // Fog
            var fog = this.tool.addFolder('Fog');
            fog.open();
            this.tool.addColor(fog, 'Fog Color', this.object.fogColor).open();
            fog.add(this.object, 'fogDensity').min(0).name('Fog Density');
            // Options
            _super.prototype.addOptions.call(this);
        };
        return LavaMaterialTool;
    }(material_tool_1.default);
    exports.default = LavaMaterialTool;

});
$__System.registerDynamic("3f", ["36", "31"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_materials_1 = $__require("36");
    var material_tool_1 = $__require("31");
    var FurMaterialTool = /** @class */function (_super) {
        __extends(FurMaterialTool, _super);
        function FurMaterialTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'FUR-MATERIAL-TOOL';
            _this.tabName = 'Fur Material';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        FurMaterialTool.prototype.isSupported = function (object) {
            return _super.prototype.isSupported.call(this, object) && this.object instanceof babylonjs_materials_1.FurMaterial;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        FurMaterialTool.prototype.update = function (object) {
            var _this = this;
            _super.prototype.update.call(this, object);
            // Diffuse
            var diffuse = this.tool.addFolder('Diffuse');
            diffuse.open();
            this.tool.addColor(diffuse, 'Color', this.object.diffuseColor, function () {
                return _this.object.updateFur();
            }).open();
            this.tool.addTexture(diffuse, this.editor, 'diffuseTexture', this.object, false, false, function () {
                return _this.object.updateFur();
            }).name('Texture');
            // Fur
            var fur = this.tool.addFolder('Fur');
            fur.open();
            this.tool.addColor(fur, 'Fur Color', this.object.furColor, function () {
                return _this.object.updateFur();
            }).open();
            fur.add(this.object, 'furLength').min(0).step(0.01).name('Fur Length').onChange(function () {
                return _this.object.updateFur();
            });
            fur.add(this.object, 'furAngle').min(0).step(0.1).name('Fur Angle').onChange(function () {
                return _this.object.updateFur();
            });
            // High level
            var highlevel = this.tool.addFolder('High Level Fur');
            highlevel.open();
            highlevel.add(this.object, 'highLevelFur').name('Compute High Level').onFinishChange(function () {
                return _this.object.updateFur();
            });
            highlevel.add(this.object, 'furDensity').min(0).step(0.1).name('Fur Density').onChange(function () {
                return _this.object.updateFur();
            });
            highlevel.add(this.object, 'furSpacing').min(0).step(0.01).name('Fur Spacing').onChange(function () {
                return _this.object.updateFur();
            });
            highlevel.add(this.object, 'furSpeed').min(1).max(1000).step(0.01).name('Fur Speed').onChange(function () {
                return _this.object.updateFur();
            });
            this.tool.addVector(highlevel, 'Gravity', this.object.furGravity, function () {
                return _this.object.updateFur();
            }).open();
            // Options
            _super.prototype.addOptions.call(this);
        };
        return FurMaterialTool;
    }(material_tool_1.default);
    exports.default = FurMaterialTool;

});
$__System.registerDynamic("31", ["c", "26", "e"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var edition_tool_1 = $__require("26");
    var tools_1 = $__require("e");
    var MaterialTool = /** @class */function (_super) {
        __extends(MaterialTool, _super);
        function MaterialTool() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        MaterialTool.prototype.isSupported = function (object) {
            var supported = object instanceof babylonjs_1.Material || object instanceof babylonjs_1.AbstractMesh && !!object.material || object instanceof babylonjs_1.SubMesh && !!object.getMaterial();
            if (supported) {
                // Set this.object
                this.object = object instanceof babylonjs_1.Material ? object : object instanceof babylonjs_1.AbstractMesh && !!object.material ? object.material : object instanceof babylonjs_1.SubMesh && !!object.getMaterial() ? object.getMaterial() : null;
            }
            return supported;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        MaterialTool.prototype.update = function (object) {
            _super.prototype.update.call(this, object);
            if (object instanceof babylonjs_1.Material) this.object = object;else this.object = object instanceof babylonjs_1.SubMesh ? object.getMaterial() : object.material;
            _super.prototype.setTabName.call(this, tools_1.default.GetConstructorName(this.object).replace('Material', '') + ' Material');
            // Common
            var common = this.tool.addFolder('Common');
            common.open();
            common.add(this.object, 'name').name('Name');
            common.add(this.object, 'alpha').min(0).max(1).name('Alpha');
            if (object instanceof babylonjs_1.AbstractMesh) {
                common.add(object, 'receiveShadows').name('Receive Shadows');
                common.add(object, 'applyFog').name('Apply Fog');
            }
        };
        /**
         * Add material options
         */
        MaterialTool.prototype.addOptions = function () {
            var options = this.tool.addFolder('Options');
            options.open();
            options.add(this.object, "wireframe").name("Wire Frame");
            options.add(this.object, "fogEnabled").name("Fog Enabled");
            options.add(this.object, "backFaceCulling").name("Back Face Culling");
            options.add(this.object, "checkReadyOnEveryCall").name("Check Ready On Every Call");
            options.add(this.object, "checkReadyOnlyOnce").name("Check Ready Only Once");
            options.add(this.object, "disableDepthWrite").name("Disable Depth Write");
            options.add(this.object, 'needDepthPrePass').name('Need Depth Pre Pass');
            this.object['useLogarithmicDepth'] = this.object['useLogarithmicDepth'] || false;
            options.add(this.object, "useLogarithmicDepth").name("Use Logarithmic Depth");
            return options;
        };
        return MaterialTool;
    }(edition_tool_1.default);
    exports.default = MaterialTool;

});
$__System.registerDynamic("40", ["36", "31"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_materials_1 = $__require("36");
    var material_tool_1 = $__require("31");
    var MixMaterialTool = /** @class */function (_super) {
        __extends(MixMaterialTool, _super);
        function MixMaterialTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'MIX-MATERIAL-TOOL';
            _this.tabName = 'Mix Material';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        MixMaterialTool.prototype.isSupported = function (object) {
            return _super.prototype.isSupported.call(this, object) && this.object instanceof babylonjs_materials_1.MixMaterial;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        MixMaterialTool.prototype.update = function (object) {
            _super.prototype.update.call(this, object);
            // Mix map 1
            var mixmap1 = this.tool.addFolder('Mix Map 1');
            mixmap1.open();
            this.tool.addTexture(mixmap1, this.editor, 'mixTexture1', this.object, false).name('Mix Texture 1');
            this.tool.addTexture(mixmap1, this.editor, 'diffuseTexture1', this.object, false).name('Diffuse Texture 1');
            this.tool.addTexture(mixmap1, this.editor, 'diffuseTexture2', this.object, false).name('Diffuse Texture 2');
            this.tool.addTexture(mixmap1, this.editor, 'diffuseTexture3', this.object, false).name('Diffuse Texture 3');
            this.tool.addTexture(mixmap1, this.editor, 'diffuseTexture4', this.object, false).name('Diffuse Texture 4');
            // Mix map 2
            var mixmap2 = this.tool.addFolder('Mix Map 2');
            mixmap2.open();
            this.tool.addTexture(mixmap2, this.editor, 'mixTexture2', this.object, false).name('Mix Texture 2');
            this.tool.addTexture(mixmap2, this.editor, 'diffuseTexture5', this.object, false).name('Diffuse Texture 5');
            this.tool.addTexture(mixmap2, this.editor, 'diffuseTexture6', this.object, false).name('Diffuse Texture 6');
            this.tool.addTexture(mixmap2, this.editor, 'diffuseTexture7', this.object, false).name('Diffuse Texture 7');
            this.tool.addTexture(mixmap2, this.editor, 'diffuseTexture8', this.object, false).name('Diffuse Texture 8');
            // Options
            _super.prototype.addOptions.call(this);
        };
        return MixMaterialTool;
    }(material_tool_1.default);
    exports.default = MixMaterialTool;

});
$__System.registerDynamic("41", ["c", "26", "e", "1b", "10", "28"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var edition_tool_1 = $__require("26");
    var tools_1 = $__require("e");
    var scene_manager_1 = $__require("1b");
    var picker_1 = $__require("10");
    var extensions_1 = $__require("28");
    var PostProcessesTool = /** @class */function (_super) {
        __extends(PostProcessesTool, _super);
        function PostProcessesTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'POST-PROCESSES-TOOL';
            _this.tabName = 'Post-Processes';
            // Private members
            _this._standardEnabled = false;
            _this._defaultEnabled = false;
            _this._ssaoEnabled = false;
            _this._ssao2Enabled = false;
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        PostProcessesTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_1.Scene;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        PostProcessesTool.prototype.update = function (scene) {
            var _this = this;
            _super.prototype.update.call(this, scene);
            // Standard
            var standardPipeline = this.tool.addFolder('Standard');
            standardPipeline.open();
            this._standardEnabled = scene_manager_1.default.StandardRenderingPipeline !== null;
            standardPipeline.add(this, '_standardEnabled').name('Enable').onChange(function (r) {
                return __awaiter(_this, void 0, void 0, function () {
                    var pipeline;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!!r) return [3 /*break*/, 1];
                                scene_manager_1.default.StandardRenderingPipeline.dispose();
                                scene_manager_1.default.StandardRenderingPipeline = null;
                                return [3 /*break*/, 5];
                            case 1:
                                pipeline = new babylonjs_1.StandardRenderingPipeline('Standard', scene, 1.0, null, scene.cameras);
                                pipeline.depthOfFieldDistance = 0.05;
                                return [4 /*yield*/, tools_1.default.CreateFileFromURL('assets/textures/lensflaredirt.png')];
                            case 2:
                                _a.sent();
                                pipeline.lensTexture = pipeline.lensFlareDirtTexture = new babylonjs_1.Texture('file:lensflaredirt.png', scene);
                                return [4 /*yield*/, tools_1.default.CreateFileFromURL('assets/textures/lensstar.png')];
                            case 3:
                                _a.sent();
                                pipeline.lensStarTexture = new babylonjs_1.Texture('file:lensstar.png', scene);
                                return [4 /*yield*/, tools_1.default.CreateFileFromURL('assets/textures/lenscolor.png')];
                            case 4:
                                _a.sent();
                                pipeline.lensColorTexture = new babylonjs_1.Texture('file:lenscolor.png', scene);
                                pipeline.lensTexture.url = pipeline.lensTexture.name = pipeline.lensTexture.url.replace('file:', '');
                                pipeline.lensStarTexture.url = pipeline.lensStarTexture.name = pipeline.lensStarTexture.url.replace('file:', '');
                                pipeline.lensColorTexture.url = pipeline.lensColorTexture.name = pipeline.lensColorTexture.url.replace('file:', '');
                                scene_manager_1.default.StandardRenderingPipeline = pipeline;
                                _a.label = 5;
                            case 5:
                                // Update tool
                                this.update(scene);
                                // Check if extension is created
                                this._checkExtension();
                                return [2 /*return*/];
                        }
                    });
                });
            });
            if (this._standardEnabled) {
                standardPipeline.add(this, '_editStandardAnimations').name('Edit animations...');
                var antialiasing = standardPipeline.addFolder('Anti Aliasing');
                antialiasing.open();
                antialiasing.add(scene_manager_1.default.StandardRenderingPipeline, 'fxaaEnabled').name('Enable FXAA');
                antialiasing.add(scene_manager_1.default.StandardRenderingPipeline, 'samples').min(1).max(32).name('Multisample Anti-Aliasing');
                var bloom = standardPipeline.addFolder('Bloom');
                bloom.open();
                bloom.add(scene_manager_1.default.StandardRenderingPipeline, 'BloomEnabled').name('Bloom Enabled');
                bloom.add(scene_manager_1.default.StandardRenderingPipeline, 'exposure').min(0).max(10).step(0.01).name('Exposure');
                bloom.add(scene_manager_1.default.StandardRenderingPipeline, 'brightThreshold').min(0).max(10).step(0.01).name('Bright Threshold');
                bloom.add(scene_manager_1.default.StandardRenderingPipeline, 'blurWidth').min(0).max(512).step(0.01).name('Blur Width');
                bloom.add(scene_manager_1.default.StandardRenderingPipeline, 'horizontalBlur').name('Horizontal Blur');
                var lensTexture = bloom.addFolder('Lens Dirt Texture');
                lensTexture.open();
                this.tool.addTexture(lensTexture, this.editor, 'lensTexture', scene_manager_1.default.StandardRenderingPipeline, false, false, function (texture) {
                    scene_manager_1.default.StandardRenderingPipeline.lensFlareDirtTexture = texture;
                }).name('Texture');
                var motionBlur = standardPipeline.addFolder('Motion Blur');
                motionBlur.open();
                motionBlur.add(scene_manager_1.default.StandardRenderingPipeline, 'MotionBlurEnabled').name('Motion Blur Enabled');
                motionBlur.add(scene_manager_1.default.StandardRenderingPipeline, 'motionBlurSamples').min(1).max(64).step(1).name('Samples Count');
                motionBlur.add(scene_manager_1.default.StandardRenderingPipeline, 'motionStrength').min(0).step(0.01).name('Strength');
                var lensFlare = standardPipeline.addFolder('Lens Flare');
                lensFlare.open();
                lensFlare.add(scene_manager_1.default.StandardRenderingPipeline, 'LensFlareEnabled').name('Lens Flare Enabled');
                lensFlare.add(scene_manager_1.default.StandardRenderingPipeline, 'lensFlareStrength').min(0).max(100).step(0.01).name('Strength');
                lensFlare.add(scene_manager_1.default.StandardRenderingPipeline, 'lensFlareHaloWidth').min(0).max(2).step(0.01).name('Halo Width');
                lensFlare.add(scene_manager_1.default.StandardRenderingPipeline, 'lensFlareGhostDispersal').min(0).max(10).step(0.1).name('Ghost Dispersal');
                lensFlare.add(scene_manager_1.default.StandardRenderingPipeline, 'lensFlareDistortionStrength').min(0).max(500).step(0.1).name('Distortion Strength');
                var dof = standardPipeline.addFolder('Depth-Of-Field');
                dof.open();
                dof.add(scene_manager_1.default.StandardRenderingPipeline, 'DepthOfFieldEnabled').name('Depth-Of-Field Enabled');
                dof.add(scene_manager_1.default.StandardRenderingPipeline, 'depthOfFieldDistance').min(0).max(1).step(0.001).name('DOF Distance');
                dof.add(scene_manager_1.default.StandardRenderingPipeline, 'depthOfFieldBlurWidth').min(0).max(512).name('Blur Width');
                var hdr = standardPipeline.addFolder('HDR');
                hdr.open();
                hdr.add(scene_manager_1.default.StandardRenderingPipeline, 'HDREnabled').name('HDR Enabled');
                hdr.add(scene_manager_1.default.StandardRenderingPipeline, 'hdrMinimumLuminance').min(0).max(2).name('Minimum Luminance');
                hdr.add(scene_manager_1.default.StandardRenderingPipeline, 'hdrDecreaseRate').min(0).max(2).name('Decrease Rate');
                hdr.add(scene_manager_1.default.StandardRenderingPipeline, 'hdrIncreaseRate').min(0).max(2).name('Increase Rate');
                var vls = standardPipeline.addFolder('Volumetric Lights');
                vls.open();
                vls.add(scene_manager_1.default.StandardRenderingPipeline, 'VLSEnabled').name('Volumetric Lights Enabled').onChange(function (r) {
                    if (!r) return;
                    var lights = [];
                    scene.lights.forEach(function (l) {
                        return (l instanceof babylonjs_1.SpotLight || l instanceof babylonjs_1.DirectionalLight) && lights.push(l);
                    });
                    var picker = new picker_1.default('Select Light Emitter');
                    picker.addItems(lights);
                    if (scene_manager_1.default.StandardRenderingPipeline.sourceLight) picker.addSelected([scene_manager_1.default.StandardRenderingPipeline.sourceLight]);
                    picker.open(function (items) {
                        if (items.length > 0) scene_manager_1.default.StandardRenderingPipeline.sourceLight = scene.getLightByName(items[0].name);
                        _this.update(scene);
                    });
                });
                if (scene_manager_1.default.StandardRenderingPipeline.VLSEnabled) {
                    vls.add(scene_manager_1.default.StandardRenderingPipeline, 'volumetricLightCoefficient').min(-2).max(2).step(0.01).name('Scattering Coefficient');
                    vls.add(scene_manager_1.default.StandardRenderingPipeline, 'volumetricLightPower').min(0).max(10).step(0.01).name('Scattering Power');
                    vls.add(scene_manager_1.default.StandardRenderingPipeline, 'volumetricLightBlurScale').min(0).max(64).step(1).name('Blur scale');
                    vls.add(scene_manager_1.default.StandardRenderingPipeline, 'volumetricLightStepsCount').min(0).max(512).step(1).name('Steps count');
                }
            }
            // Default
            var def = this.tool.addFolder('Default');
            def.open();
            this._defaultEnabled = scene_manager_1.default.DefaultRenderingPipeline !== null;
            def.add(this, '_defaultEnabled').name('Enable').onChange(function (r) {
                if (!r) {
                    scene_manager_1.default.DefaultRenderingPipeline.dispose();
                    scene_manager_1.default.DefaultRenderingPipeline = null;
                } else {
                    scene_manager_1.default.DefaultRenderingPipeline = new BABYLON.DefaultRenderingPipeline('Default', true, scene, scene.cameras, true);
                    var curve = new BABYLON.ColorCurves();
                    curve.globalHue = 200;
                    curve.globalDensity = 80;
                    curve.globalSaturation = 80;
                    curve.highlightsHue = 20;
                    curve.highlightsDensity = 80;
                    curve.highlightsSaturation = -80;
                    curve.shadowsHue = 2;
                    curve.shadowsDensity = 80;
                    curve.shadowsSaturation = 40;
                    scene_manager_1.default.DefaultRenderingPipeline.imageProcessing.colorCurves = curve;
                    scene_manager_1.default.DefaultRenderingPipeline.depthOfField.focalLength = 150;
                    scene_manager_1.default.DefaultRenderingPipeline.chromaticAberration.direction.x = Math.PI * 2;
                    scene_manager_1.default.DefaultRenderingPipeline.chromaticAberration.direction.y = Math.PI * 2;
                }
                // Update tool
                _this.update(scene);
                // Check if extension is created
                _this._checkExtension();
            });
            if (this._defaultEnabled) {
                // Anti aliasing
                var antialiasing = def.addFolder('Anti Aliasing');
                antialiasing.open();
                antialiasing.add(scene_manager_1.default.DefaultRenderingPipeline, 'samples').min(1).max(32).name('Multisample Anti-Aliasing');
                antialiasing.add(scene_manager_1.default.DefaultRenderingPipeline, 'fxaaEnabled').name('Fast Approximate Anti-Aliasing');
                // Image processing
                var imageProcessing = def.addFolder('Image Processing');
                imageProcessing.open();
                imageProcessing.add(scene_manager_1.default.DefaultRenderingPipeline.imageProcessing, 'toneMappingEnabled').name('Tone Mapping');
                imageProcessing.add(scene_manager_1.default.DefaultRenderingPipeline.imageProcessing, 'contrast').min(0).max(4).name('Contrast');
                imageProcessing.add(scene_manager_1.default.DefaultRenderingPipeline.imageProcessing, 'exposure').min(0).max(10).name('Exposure');
                // Bloom
                var bloom = def.addFolder('Bloom');
                bloom.open();
                bloom.add(scene_manager_1.default.DefaultRenderingPipeline, 'bloomEnabled').name('Enable Bloom');
                bloom.add(scene_manager_1.default.DefaultRenderingPipeline, 'bloomKernel').min(0).max(500).name('Kernel');
                bloom.add(scene_manager_1.default.DefaultRenderingPipeline, 'bloomWeight').min(0).max(10).name('Weight');
                bloom.add(scene_manager_1.default.DefaultRenderingPipeline, 'bloomThreshold').min(0).max(10).name('Threshold');
                bloom.add(scene_manager_1.default.DefaultRenderingPipeline, 'bloomScale').min(0).max(10).name('Scale');
                // Chromatic aberration
                var chromatic = def.addFolder('Chromatic Aberration');
                chromatic.open();
                chromatic.add(scene_manager_1.default.DefaultRenderingPipeline, 'chromaticAberrationEnabled').name('Enable Chromatic Aberration');
                chromatic.add(scene_manager_1.default.DefaultRenderingPipeline.chromaticAberration, 'aberrationAmount').min(-1000).max(1000).name('Amount');
                chromatic.add(scene_manager_1.default.DefaultRenderingPipeline.chromaticAberration, 'radialIntensity').min(0.1).max(15).step(0.01).name('Radial Intensity');
                chromatic.add(scene_manager_1.default.DefaultRenderingPipeline.chromaticAberration.direction, 'x').min(0).max(Math.PI * 2).step(0.01).name('Direction').onChange(function (r) {
                    scene_manager_1.default.DefaultRenderingPipeline.chromaticAberration.direction.x = Math.sin(r);
                    scene_manager_1.default.DefaultRenderingPipeline.chromaticAberration.direction.y = Math.cos(r);
                });
                // Sharpen
                var sharpen = def.addFolder('Sharpen');
                sharpen.open();
                sharpen.add(scene_manager_1.default.DefaultRenderingPipeline, 'sharpenEnabled').name('Enable Sharpen');
                sharpen.add(scene_manager_1.default.DefaultRenderingPipeline.sharpen, 'edgeAmount').min(0).max(4).step(0.01).name('Edge Amount');
                sharpen.add(scene_manager_1.default.DefaultRenderingPipeline.sharpen, 'colorAmount').min(0).max(2).step(0.01).name('Color Amount');
                // Grain
                var grain = def.addFolder('Grain');
                grain.open();
                grain.add(scene_manager_1.default.DefaultRenderingPipeline, 'grainEnabled').name('Enable Grain');
                grain.add(scene_manager_1.default.DefaultRenderingPipeline.grain, 'intensity').min(0).max(100).step(0.1).name('Intensity');
                grain.add(scene_manager_1.default.DefaultRenderingPipeline.grain, 'animated').name('Animated');
            }
            // SSAO
            var ssao = this.tool.addFolder('SSAO');
            ssao.open();
            this._ssaoEnabled = scene_manager_1.default.SSAORenderingPipeline !== null;
            ssao.add(this, '_ssaoEnabled').name('Enable').onChange(function (r) {
                return __awaiter(_this, void 0, void 0, function () {
                    var pipeline;
                    return __generator(this, function (_a) {
                        if (!r) {
                            scene_manager_1.default.SSAORenderingPipeline.dispose();
                            scene_manager_1.default.SSAORenderingPipeline = null;
                        } else {
                            pipeline = new babylonjs_1.SSAORenderingPipeline('SSAO', scene, { ssaoRatio: 0.5, combineRatio: 1.0 }, scene.cameras);
                            pipeline.fallOff = 0.000001;
                            pipeline.area = 1.0;
                            pipeline.radius = 0.0004;
                            pipeline.totalStrength = 2;
                            pipeline.base = 1.3;
                            scene_manager_1.default.SSAORenderingPipeline = pipeline;
                        }
                        // Update tool
                        this.update(scene);
                        // Check if extension is created
                        this._checkExtension();
                        return [2 /*return*/];
                    });
                });
            });
            if (this._ssaoEnabled) {
                ssao.add(scene_manager_1.default.SSAORenderingPipeline, 'totalStrength').min(0).step(0.0001).name('Strength');
                ssao.add(scene_manager_1.default.SSAORenderingPipeline, 'radius').min(0).step(0.0001).name('Radius');
                ssao.add(scene_manager_1.default.SSAORenderingPipeline, 'area').min(0).step(0.0001).name('Area');
                ssao.add(scene_manager_1.default.SSAORenderingPipeline, 'fallOff').min(0).step(0.0001).name('Fall Off');
                ssao.add(scene_manager_1.default.SSAORenderingPipeline, 'base').min(0).step(0.0001).name('Base');
            }
            // SSAO 2
            var ssao2 = this.tool.addFolder('SSAO 2');
            ssao2.open();
            this._ssao2Enabled = scene_manager_1.default.SSAO2RenderingPipeline !== null;
            ssao2.add(this, '_ssao2Enabled').name('Enable').onChange(function (r) {
                return __awaiter(_this, void 0, void 0, function () {
                    var pipeline;
                    return __generator(this, function (_a) {
                        if (!r) {
                            scene_manager_1.default.SSAO2RenderingPipeline.dispose();
                            scene_manager_1.default.SSAO2RenderingPipeline = null;
                        } else {
                            pipeline = new babylonjs_1.SSAO2RenderingPipeline('SSAO2', scene, { ssaoRatio: 0.5, blurRatio: 0.5 }, scene.cameras);
                            pipeline.radius = 3.5;
                            pipeline.totalStrength = 1.3;
                            pipeline.expensiveBlur = true;
                            pipeline.samples = 16;
                            pipeline.maxZ = 250;
                            scene_manager_1.default.SSAO2RenderingPipeline = pipeline;
                        }
                        // Update tool
                        this.update(scene);
                        // Check if extension is created
                        this._checkExtension();
                        return [2 /*return*/];
                    });
                });
            });
            if (this._ssao2Enabled) {
                ssao2.add(scene_manager_1.default.SSAO2RenderingPipeline, 'totalStrength').min(0).step(0.0001).name('Strength');
                ssao2.add(scene_manager_1.default.SSAO2RenderingPipeline, 'radius').min(0).step(0.0001).name('Radius');
                ssao2.add(scene_manager_1.default.SSAO2RenderingPipeline, 'expensiveBlur').name('Expensive Blur');
                ssao2.add(scene_manager_1.default.SSAO2RenderingPipeline, 'maxZ').min(0).step(0.01).name('Max Z');
                ssao2.add(scene_manager_1.default.SSAO2RenderingPipeline, 'samples').min(0).max(64).step(1).name('Samples');
            }
        };
        // Checks if the post processes extension is created
        PostProcessesTool.prototype._checkExtension = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            return [4 /*yield*/, tools_1.default.ImportScript('./build/src/extensions/post-process/post-processes.js')];
                        case 1:
                            _a.sent();
                            scene_manager_1.default.PostProcessExtension = scene_manager_1.default.PostProcessExtension || extensions_1.default.RequestExtension(this.editor.core.scene, 'PostProcess');
                            return [2 /*return*/];
                    }
                });
            });
        };
        // Edit the animations of the standard rendering pipeline
        PostProcessesTool.prototype._editStandardAnimations = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            return [4 /*yield*/, this.editor.addEditPanelPlugin('animation-editor', false, 'Animations Editor - Standard', scene_manager_1.default.StandardRenderingPipeline)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        return PostProcessesTool;
    }(edition_tool_1.default);
    exports.default = PostProcessesTool;

});
$__System.registerDynamic("42", ["c", "26"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var edition_tool_1 = $__require("26");
    var CustomPostProcessTool = /** @class */function (_super) {
        __extends(CustomPostProcessTool, _super);
        function CustomPostProcessTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'CUSTOM-POST-PROCESS-TOOL';
            _this.tabName = 'Custom Post-Process';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        CustomPostProcessTool.prototype.isSupported = function (object) {
            return object.getClassName && object.getClassName() === 'PostProcessEditor';
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        CustomPostProcessTool.prototype.update = function (object) {
            var _this = this;
            _super.prototype.update.call(this, object);
            this.setTabName('Custom Post-Process');
            // Get current config of the post-process
            var config = this.object.config;
            // Floats
            var floats = this.tool.addFolder('Floats');
            floats.open();
            config.floats.forEach(function (f) {
                if (_this.object.userConfig[f] === undefined) _this.object.userConfig[f] = 1;
                floats.add(_this.object.userConfig, f).step(0.01).name(f);
            });
            // Vectors
            var vectors = this.tool.addFolder('Vectors');
            vectors.open();
            config.vectors2.forEach(function (v) {
                if (!_this.object.userConfig[v] || !(_this.object.userConfig[v] instanceof babylonjs_1.Vector2)) _this.object.userConfig[v] = babylonjs_1.Vector2.Zero();
                _this.tool.addVector(vectors, v, _this.object.userConfig[v]).open();
            });
            config.vectors3.forEach(function (v) {
                if (!_this.object.userConfig[v] || !(_this.object.userConfig[v] instanceof babylonjs_1.Vector3)) _this.object.userConfig[v] = babylonjs_1.Vector3.Zero();
                _this.tool.addVector(vectors, v, _this.object.userConfig[v]).open();
            });
            // Samplers
            var samplers = this.tool.addFolder('Samplers');
            samplers.open();
            config.textures.forEach(function (t) {
                _this.tool.addTexture(samplers, _this.editor, t, _this.object.userConfig, false, false).name(t);
            });
        };
        return CustomPostProcessTool;
    }(edition_tool_1.default);
    exports.default = CustomPostProcessTool;

});
$__System.registerDynamic("43", ["c", "26"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var edition_tool_1 = $__require("26");
    var TextureTool = /** @class */function (_super) {
        __extends(TextureTool, _super);
        function TextureTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'TEXTURE-TOOL';
            _this.tabName = 'Texture';
            // Private members
            _this._currentCoordinatesMode = '';
            _this._textureSize = '';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        TextureTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_1.BaseTexture;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        TextureTool.prototype.update = function (texture) {
            _super.prototype.update.call(this, texture);
            // Common
            var common = this.tool.addFolder('Common');
            common.open();
            if (texture instanceof babylonjs_1.ProceduralTexture) common.add(texture, 'name').name('Name');
            common.add(texture, 'invertZ').name('Invert Z');
            common.add(texture, 'hasAlpha').name('Has Alpha');
            common.add(texture, 'gammaSpace').name('Gamma Space');
            common.add(texture, 'getAlphaFromRGB').name('Get Alpha From RGB');
            var coordinates = ['EXPLICIT_MODE', 'SPHERICAL_MODE', 'PLANAR_MODE', 'CUBIC_MODE', 'PROJECTION_MODE', 'SKYBOX_MODE', 'INVCUBIC_MODE', 'EQUIRECTANGULAR_MODE', 'FIXED_EQUIRECTANGULAR_MODE', 'FIXED_EQUIRECTANGULAR_MIRRORED_MODE'];
            this._currentCoordinatesMode = coordinates[texture.coordinatesMode];
            common.add(this, '_currentCoordinatesMode', coordinates).name('Coordinates Mode').onFinishChange(function (r) {
                texture.coordinatesMode = babylonjs_1.Texture[r];
            });
            // Texture
            if (texture instanceof babylonjs_1.Texture) {
                var tex = this.tool.addFolder('Texture');
                tex.open();
                tex.add(texture, 'vScale').step(0.01).name('V Scale');
                tex.add(texture, 'uScale').step(0.01).name('U Scale');
            } else if (texture instanceof babylonjs_1.CubeTexture) {}
            // TODO

            // Mirror
            if (texture instanceof babylonjs_1.MirrorTexture) {
                // Plane
                var mirror = this.tool.addFolder('Mirror');
                mirror.open();
                mirror.add(texture.mirrorPlane, 'd').name('Distance');
                this.tool.addVector(mirror, 'Normal', texture.mirrorPlane.normal).open();
            }
            if (texture instanceof babylonjs_1.ProceduralTexture) {
                var procedural = this.tool.addFolder('Procedural');
                procedural.open();
                procedural.add(texture, 'refreshRate').step(1).min(0).name('Refresh Rate');
            }
            // Resize
            if (texture['resize']) {
                var size = this.tool.addFolder('Size');
                size.open();
                // Size
                var sizes = [];
                for (var i = 1; i < 12; i++) sizes.push(Math.pow(2, i).toString());
                this._textureSize = texture['_size'].toString();
                size.add(this, '_textureSize', sizes).name('Size').onFinishChange(function (r) {
                    texture['resize'](parseInt(r), texture['_generateMipMaps']);
                });
            }
        };
        return TextureTool;
    }(edition_tool_1.default);
    exports.default = TextureTool;

});
$__System.registerDynamic("44", ["45", "26"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_procedural_textures_1 = $__require("45");
    var edition_tool_1 = $__require("26");
    var BrickProceduralTool = /** @class */function (_super) {
        __extends(BrickProceduralTool, _super);
        function BrickProceduralTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'BRICK-PROCEDURAL-TOOL';
            _this.tabName = 'Brick';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        BrickProceduralTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_procedural_textures_1.BrickProceduralTexture;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        BrickProceduralTool.prototype.update = function (object) {
            // Super
            _super.prototype.update.call(this, object);
            // Brick
            var brick = this.tool.addFolder('Brick');
            brick.open();
            brick.add(object, 'numberOfBricksHeight').step(0.01).name('Bricks Height');
            brick.add(object, 'numberOfBricksWidth').step(0.01).name('Bricks Width');
            this.tool.addColor(brick, 'Joint Color', object.jointColor, function () {
                return object.updateShaderUniforms();
            }).open();
            this.tool.addColor(brick, 'Brick Color', object.brickColor, function () {
                return object.updateShaderUniforms();
            }).open();
        };
        return BrickProceduralTool;
    }(edition_tool_1.default);
    exports.default = BrickProceduralTool;

});
$__System.registerDynamic("46", ["45", "26"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_procedural_textures_1 = $__require("45");
    var edition_tool_1 = $__require("26");
    var CloudProceduralTool = /** @class */function (_super) {
        __extends(CloudProceduralTool, _super);
        function CloudProceduralTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'CLOUD-PROCEDURAL-TOOL';
            _this.tabName = 'Cloud';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        CloudProceduralTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_procedural_textures_1.CloudProceduralTexture;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        CloudProceduralTool.prototype.update = function (object) {
            // Super
            _super.prototype.update.call(this, object);
            // Cloud
            var cloud = this.tool.addFolder('Cloud');
            cloud.open();
            this.tool.addColor(cloud, 'Sky Color', object.skyColor, function () {
                return object.updateShaderUniforms();
            }).open();
            this.tool.addColor(cloud, 'Cloud Color', object.cloudColor, function () {
                return object.updateShaderUniforms();
            }).open();
        };
        return CloudProceduralTool;
    }(edition_tool_1.default);
    exports.default = CloudProceduralTool;

});
$__System.registerDynamic("47", ["45", "26"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_procedural_textures_1 = $__require("45");
    var edition_tool_1 = $__require("26");
    var FireProceduralTool = /** @class */function (_super) {
        __extends(FireProceduralTool, _super);
        function FireProceduralTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'FIRE-PROCEDURAL-TOOL';
            _this.tabName = 'Fire';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        FireProceduralTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_procedural_textures_1.FireProceduralTexture;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        FireProceduralTool.prototype.update = function (object) {
            var _this = this;
            // Super
            _super.prototype.update.call(this, object);
            // Fire
            var fire = this.tool.addFolder('Fire');
            fire.open();
            fire.add(object, 'autoGenerateTime').name('Auto Generate Time');
            fire.add(object, 'alphaThreshold').min(0).max(1).name('Alpha Threshold');
            this.tool.addVector(fire, 'Speed', object.speed, function () {
                return object.updateShaderUniforms();
            }).open();
            object.fireColors.forEach(function (c, index) {
                _this.tool.addColor(fire, 'Color ' + index, c, function () {
                    return object.updateShaderUniforms();
                }).open();
            });
        };
        return FireProceduralTool;
    }(edition_tool_1.default);
    exports.default = FireProceduralTool;

});
$__System.registerDynamic("48", ["45", "26"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_procedural_textures_1 = $__require("45");
    var edition_tool_1 = $__require("26");
    var GrassProceduralTool = /** @class */function (_super) {
        __extends(GrassProceduralTool, _super);
        function GrassProceduralTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'GRASS-PROCEDURAL-TOOL';
            _this.tabName = 'Grass';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        GrassProceduralTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_procedural_textures_1.GrassProceduralTexture;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        GrassProceduralTool.prototype.update = function (object) {
            var _this = this;
            // Super
            _super.prototype.update.call(this, object);
            // Grass
            var grass = this.tool.addFolder('Grass');
            grass.open();
            object.grassColors.forEach(function (c, index) {
                _this.tool.addColor(grass, 'Grass Color ' + index, c, function () {
                    return object.updateShaderUniforms();
                }).open();
            });
            this.tool.addColor(grass, 'Ground Color', object.groundColor, function () {
                return object.updateShaderUniforms();
            }).open();
        };
        return GrassProceduralTool;
    }(edition_tool_1.default);
    exports.default = GrassProceduralTool;

});
$__System.registerDynamic("49", ["45", "26"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_procedural_textures_1 = $__require("45");
    var edition_tool_1 = $__require("26");
    var MarbleProceduralTool = /** @class */function (_super) {
        __extends(MarbleProceduralTool, _super);
        function MarbleProceduralTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'MARBLE-PROCEDURAL-TOOL';
            _this.tabName = 'Marble';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        MarbleProceduralTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_procedural_textures_1.MarbleProceduralTexture;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        MarbleProceduralTool.prototype.update = function (object) {
            // Super
            _super.prototype.update.call(this, object);
            // Marble
            var marble = this.tool.addFolder('Brick');
            marble.open();
            marble.add(object, 'numberOfTilesHeight').step(0.01).name('Tiles Height');
            marble.add(object, 'numberOfTilesWidth').step(0.01).name('Tiles Width');
            marble.add(object, 'amplitude').step(0.01).name('Amplitude');
            this.tool.addColor(marble, 'Joint Color', object.jointColor, function () {
                return object.updateShaderUniforms();
            }).open();
        };
        return MarbleProceduralTool;
    }(edition_tool_1.default);
    exports.default = MarbleProceduralTool;

});
$__System.registerDynamic("4a", ["45", "26"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_procedural_textures_1 = $__require("45");
    var edition_tool_1 = $__require("26");
    var NormalProceduralTool = /** @class */function (_super) {
        __extends(NormalProceduralTool, _super);
        function NormalProceduralTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'NORMAL-PROCEDURAL-TOOL';
            _this.tabName = 'Normal';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        NormalProceduralTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_procedural_textures_1.NormalMapProceduralTexture;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        NormalProceduralTool.prototype.update = function (object) {
            // Super
            _super.prototype.update.call(this, object);
            // Normal
            var normal = this.tool.addFolder('Normal');
            normal.open();
            this.tool.addTexture(normal, this.editor, 'baseTexture', object, false, false, function () {
                return object.updateShaderUniforms();
            });
        };
        return NormalProceduralTool;
    }(edition_tool_1.default);
    exports.default = NormalProceduralTool;

});
$__System.registerDynamic("4b", ["45", "26"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_procedural_textures_1 = $__require("45");
    var edition_tool_1 = $__require("26");
    var PerlinNoiseProceduralTool = /** @class */function (_super) {
        __extends(PerlinNoiseProceduralTool, _super);
        function PerlinNoiseProceduralTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'PERLIN-NOISE-PROCEDURAL-TOOL';
            _this.tabName = 'Perlin Noise';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        PerlinNoiseProceduralTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_procedural_textures_1.PerlinNoiseProceduralTexture;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        PerlinNoiseProceduralTool.prototype.update = function (object) {
            // Super
            _super.prototype.update.call(this, object);
            // Perlin Noise
            var perlinNoise = this.tool.addFolder('Brick');
            perlinNoise.open();
            perlinNoise.add(object, 'timeScale').step(0.01).name('Time Scale');
            perlinNoise.add(object, 'translationSpeed').step(0.01).name('Translation Speed');
        };
        return PerlinNoiseProceduralTool;
    }(edition_tool_1.default);
    exports.default = PerlinNoiseProceduralTool;

});
$__System.registerDynamic("4c", ["45", "26"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_procedural_textures_1 = $__require("45");
    var edition_tool_1 = $__require("26");
    var RoadProceduralTool = /** @class */function (_super) {
        __extends(RoadProceduralTool, _super);
        function RoadProceduralTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'ROAD-PROCEDURAL-TOOL';
            _this.tabName = 'Road';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        RoadProceduralTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_procedural_textures_1.RoadProceduralTexture;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        RoadProceduralTool.prototype.update = function (object) {
            // Super
            _super.prototype.update.call(this, object);
            // Road
            var road = this.tool.addFolder('Road');
            road.open();
            this.tool.addColor(road, 'Road Color', object.roadColor, function () {
                return object.updateShaderUniforms();
            }).open();
        };
        return RoadProceduralTool;
    }(edition_tool_1.default);
    exports.default = RoadProceduralTool;

});
$__System.registerDynamic('45', ['c'], true, function ($__require, exports, module) {
    var global = this || self,
        GLOBAL = global;


    (function universalModuleDefinition(root, factory) {
        var amdDependencies = [];
        var BABYLON = root.BABYLON || this.BABYLON;
        if (typeof exports === 'object' && typeof module === 'object') {
            BABYLON = BABYLON || $__require('c');

            module.exports = factory(BABYLON);
        } else if (typeof undefined === 'function' && define.amd) {
            amdDependencies.push("babylonjs");

            define("babylonjs-procedural-textures", amdDependencies, factory);
        } else if (typeof exports === 'object') {
            BABYLON = BABYLON || $__require('c');

            exports["babylonjs-procedural-textures"] = factory(BABYLON);
        } else {
            root["BABYLON"] = factory(BABYLON);
        }
    })(exports, function (BABYLON) {
        BABYLON = BABYLON || this.BABYLON;

        var __decorate = this && this.__decorate || function (e, t, r, c) {
            var o,
                f = arguments.length,
                n = f < 3 ? t : null === c ? c = Object.getOwnPropertyDescriptor(t, r) : c;if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) n = Reflect.decorate(e, t, r, c);else for (var l = e.length - 1; l >= 0; l--) (o = e[l]) && (n = (f < 3 ? o(n) : f > 3 ? o(t, r, n) : o(t, r)) || n);return f > 3 && n && Object.defineProperty(t, r, n), n;
        };
        var __extends = this && this.__extends || function () {
            var t = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (t, o) {
                t.__proto__ = o;
            } || function (t, o) {
                for (var n in o) o.hasOwnProperty(n) && (t[n] = o[n]);
            };return function (o, n) {
                function r() {
                    this.constructor = o;
                }t(o, n), o.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r());
            };
        }();

        var BABYLON;
        (function (BABYLON) {
            var WoodProceduralTexture = /** @class */function (_super) {
                __extends(WoodProceduralTexture, _super);
                function WoodProceduralTexture(name, size, scene, fallbackTexture, generateMipMaps) {
                    var _this = _super.call(this, name, size, "woodProceduralTexture", scene, fallbackTexture, generateMipMaps) || this;
                    _this._ampScale = 100.0;
                    _this._woodColor = new BABYLON.Color3(0.32, 0.17, 0.09);
                    _this.updateShaderUniforms();
                    return _this;
                }
                WoodProceduralTexture.prototype.updateShaderUniforms = function () {
                    this.setFloat("ampScale", this._ampScale);
                    this.setColor3("woodColor", this._woodColor);
                };
                Object.defineProperty(WoodProceduralTexture.prototype, "ampScale", {
                    get: function () {
                        return this._ampScale;
                    },
                    set: function (value) {
                        this._ampScale = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WoodProceduralTexture.prototype, "woodColor", {
                    get: function () {
                        return this._woodColor;
                    },
                    set: function (value) {
                        this._woodColor = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Serializes this wood procedural texture
                 * @returns a serialized wood procedural texture object
                 */
                WoodProceduralTexture.prototype.serialize = function () {
                    var serializationObject = BABYLON.SerializationHelper.Serialize(this, _super.prototype.serialize.call(this));
                    serializationObject.customType = "BABYLON.WoodProceduralTexture";
                    return serializationObject;
                };
                /**
                 * Creates a Wood Procedural Texture from parsed wood procedural texture data
                 * @param parsedTexture defines parsed texture data
                 * @param scene defines the current scene
                 * @param rootUrl defines the root URL containing wood procedural texture information
                 * @returns a parsed Wood Procedural Texture
                 */
                WoodProceduralTexture.Parse = function (parsedTexture, scene, rootUrl) {
                    var texture = BABYLON.SerializationHelper.Parse(function () {
                        return new WoodProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps);
                    }, parsedTexture, scene, rootUrl);
                    return texture;
                };
                __decorate([BABYLON.serialize()], WoodProceduralTexture.prototype, "ampScale", null);
                __decorate([BABYLON.serializeAsColor3()], WoodProceduralTexture.prototype, "woodColor", null);
                return WoodProceduralTexture;
            }(BABYLON.ProceduralTexture);
            BABYLON.WoodProceduralTexture = WoodProceduralTexture;
        })(BABYLON || (BABYLON = {}));


        BABYLON.Effect.ShadersStore['woodProceduralTexturePixelShader'] = "precision highp float;\nvarying vec2 vPosition;\nvarying vec2 vUV;\nuniform float ampScale;\nuniform vec3 woodColor;\nfloat rand(vec2 n) {\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\n}\nfloat noise(vec2 n) {\nconst vec2 d=vec2(0.0,1.0);\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\n}\nfloat fbm(vec2 n) {\nfloat total=0.0,amplitude=1.0;\nfor (int i=0; i<4; i++) {\ntotal+=noise(n)*amplitude;\nn+=n;\namplitude*=0.5;\n}\nreturn total;\n}\nvoid main(void) {\nfloat ratioy=mod(vUV.x*ampScale,2.0+fbm(vUV*0.8));\nvec3 wood=woodColor*ratioy;\ngl_FragColor=vec4(wood,1.0);\n}";

        var BABYLON;
        (function (BABYLON) {
            var FireProceduralTexture = /** @class */function (_super) {
                __extends(FireProceduralTexture, _super);
                function FireProceduralTexture(name, size, scene, fallbackTexture, generateMipMaps) {
                    var _this = _super.call(this, name, size, "fireProceduralTexture", scene, fallbackTexture, generateMipMaps) || this;
                    _this._time = 0.0;
                    _this._speed = new BABYLON.Vector2(0.5, 0.3);
                    _this._autoGenerateTime = true;
                    _this._alphaThreshold = 0.5;
                    _this._fireColors = FireProceduralTexture.RedFireColors;
                    _this.updateShaderUniforms();
                    return _this;
                }
                FireProceduralTexture.prototype.updateShaderUniforms = function () {
                    this.setFloat("time", this._time);
                    this.setVector2("speed", this._speed);
                    this.setColor3("c1", this._fireColors[0]);
                    this.setColor3("c2", this._fireColors[1]);
                    this.setColor3("c3", this._fireColors[2]);
                    this.setColor3("c4", this._fireColors[3]);
                    this.setColor3("c5", this._fireColors[4]);
                    this.setColor3("c6", this._fireColors[5]);
                    this.setFloat("alphaThreshold", this._alphaThreshold);
                };
                FireProceduralTexture.prototype.render = function (useCameraPostProcess) {
                    var scene = this.getScene();
                    if (this._autoGenerateTime && scene) {
                        this._time += scene.getAnimationRatio() * 0.03;
                        this.updateShaderUniforms();
                    }
                    _super.prototype.render.call(this, useCameraPostProcess);
                };
                Object.defineProperty(FireProceduralTexture, "PurpleFireColors", {
                    get: function () {
                        return [new BABYLON.Color3(0.5, 0.0, 1.0), new BABYLON.Color3(0.9, 0.0, 1.0), new BABYLON.Color3(0.2, 0.0, 1.0), new BABYLON.Color3(1.0, 0.9, 1.0), new BABYLON.Color3(0.1, 0.1, 1.0), new BABYLON.Color3(0.9, 0.9, 1.0)];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FireProceduralTexture, "GreenFireColors", {
                    get: function () {
                        return [new BABYLON.Color3(0.5, 1.0, 0.0), new BABYLON.Color3(0.5, 1.0, 0.0), new BABYLON.Color3(0.3, 0.4, 0.0), new BABYLON.Color3(0.5, 1.0, 0.0), new BABYLON.Color3(0.2, 0.0, 0.0), new BABYLON.Color3(0.5, 1.0, 0.0)];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FireProceduralTexture, "RedFireColors", {
                    get: function () {
                        return [new BABYLON.Color3(0.5, 0.0, 0.1), new BABYLON.Color3(0.9, 0.0, 0.0), new BABYLON.Color3(0.2, 0.0, 0.0), new BABYLON.Color3(1.0, 0.9, 0.0), new BABYLON.Color3(0.1, 0.1, 0.1), new BABYLON.Color3(0.9, 0.9, 0.9)];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FireProceduralTexture, "BlueFireColors", {
                    get: function () {
                        return [new BABYLON.Color3(0.1, 0.0, 0.5), new BABYLON.Color3(0.0, 0.0, 0.5), new BABYLON.Color3(0.1, 0.0, 0.2), new BABYLON.Color3(0.0, 0.0, 1.0), new BABYLON.Color3(0.1, 0.2, 0.3), new BABYLON.Color3(0.0, 0.2, 0.9)];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FireProceduralTexture.prototype, "autoGenerateTime", {
                    get: function () {
                        return this._autoGenerateTime;
                    },
                    set: function (value) {
                        this._autoGenerateTime = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FireProceduralTexture.prototype, "fireColors", {
                    get: function () {
                        return this._fireColors;
                    },
                    set: function (value) {
                        this._fireColors = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FireProceduralTexture.prototype, "time", {
                    get: function () {
                        return this._time;
                    },
                    set: function (value) {
                        this._time = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FireProceduralTexture.prototype, "speed", {
                    get: function () {
                        return this._speed;
                    },
                    set: function (value) {
                        this._speed = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(FireProceduralTexture.prototype, "alphaThreshold", {
                    get: function () {
                        return this._alphaThreshold;
                    },
                    set: function (value) {
                        this._alphaThreshold = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Serializes this fire procedural texture
                 * @returns a serialized fire procedural texture object
                 */
                FireProceduralTexture.prototype.serialize = function () {
                    var serializationObject = BABYLON.SerializationHelper.Serialize(this, _super.prototype.serialize.call(this));
                    serializationObject.customType = "BABYLON.FireProceduralTexture";
                    serializationObject.fireColors = [];
                    for (var i = 0; i < this._fireColors.length; i++) {
                        serializationObject.fireColors.push(this._fireColors[i].asArray());
                    }
                    return serializationObject;
                };
                /**
                 * Creates a Fire Procedural Texture from parsed fire procedural texture data
                 * @param parsedTexture defines parsed texture data
                 * @param scene defines the current scene
                 * @param rootUrl defines the root URL containing fire procedural texture information
                 * @returns a parsed Fire Procedural Texture
                 */
                FireProceduralTexture.Parse = function (parsedTexture, scene, rootUrl) {
                    var texture = BABYLON.SerializationHelper.Parse(function () {
                        return new FireProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps);
                    }, parsedTexture, scene, rootUrl);
                    var colors = [];
                    for (var i = 0; i < parsedTexture.fireColors.length; i++) {
                        colors.push(BABYLON.Color3.FromArray(parsedTexture.fireColors[i]));
                    }
                    texture.fireColors = colors;
                    return texture;
                };
                __decorate([BABYLON.serialize()], FireProceduralTexture.prototype, "autoGenerateTime", null);
                __decorate([BABYLON.serialize()], FireProceduralTexture.prototype, "time", null);
                __decorate([BABYLON.serializeAsVector2()], FireProceduralTexture.prototype, "speed", null);
                __decorate([BABYLON.serialize()], FireProceduralTexture.prototype, "alphaThreshold", null);
                return FireProceduralTexture;
            }(BABYLON.ProceduralTexture);
            BABYLON.FireProceduralTexture = FireProceduralTexture;
        })(BABYLON || (BABYLON = {}));

        //# sourceMappingURL=babylon.fireProceduralTexture.js.map

        BABYLON.Effect.ShadersStore['fireProceduralTexturePixelShader'] = "precision highp float;\nuniform float time;\nuniform vec3 c1;\nuniform vec3 c2;\nuniform vec3 c3;\nuniform vec3 c4;\nuniform vec3 c5;\nuniform vec3 c6;\nuniform vec2 speed;\nuniform float shift;\nuniform float alphaThreshold;\nvarying vec2 vUV;\nfloat rand(vec2 n) {\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\n}\nfloat noise(vec2 n) {\nconst vec2 d=vec2(0.0,1.0);\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\n}\nfloat fbm(vec2 n) {\nfloat total=0.0,amplitude=1.0;\nfor (int i=0; i<4; i++) {\ntotal+=noise(n)*amplitude;\nn+=n;\namplitude*=0.5;\n}\nreturn total;\n}\nvoid main() {\nvec2 p=vUV*8.0;\nfloat q=fbm(p-time*0.1);\nvec2 r=vec2(fbm(p+q+time*speed.x-p.x-p.y),fbm(p+q-time*speed.y));\nvec3 c=mix(c1,c2,fbm(p+r))+mix(c3,c4,r.x)-mix(c5,c6,r.y);\nvec3 color=c*cos(shift*vUV.y);\nfloat luminance=dot(color.rgb,vec3(0.3,0.59,0.11));\ngl_FragColor=vec4(color,luminance*alphaThreshold+(1.0-alphaThreshold));\n}";

        var BABYLON;
        (function (BABYLON) {
            var CloudProceduralTexture = /** @class */function (_super) {
                __extends(CloudProceduralTexture, _super);
                function CloudProceduralTexture(name, size, scene, fallbackTexture, generateMipMaps) {
                    var _this = _super.call(this, name, size, "cloudProceduralTexture", scene, fallbackTexture, generateMipMaps) || this;
                    _this._skyColor = new BABYLON.Color4(0.15, 0.68, 1.0, 1.0);
                    _this._cloudColor = new BABYLON.Color4(1, 1, 1, 1.0);
                    _this.updateShaderUniforms();
                    return _this;
                }
                CloudProceduralTexture.prototype.updateShaderUniforms = function () {
                    this.setColor4("skyColor", this._skyColor);
                    this.setColor4("cloudColor", this._cloudColor);
                };
                Object.defineProperty(CloudProceduralTexture.prototype, "skyColor", {
                    get: function () {
                        return this._skyColor;
                    },
                    set: function (value) {
                        this._skyColor = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(CloudProceduralTexture.prototype, "cloudColor", {
                    get: function () {
                        return this._cloudColor;
                    },
                    set: function (value) {
                        this._cloudColor = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Serializes this cloud procedural texture
                 * @returns a serialized cloud procedural texture object
                 */
                CloudProceduralTexture.prototype.serialize = function () {
                    var serializationObject = BABYLON.SerializationHelper.Serialize(this, _super.prototype.serialize.call(this));
                    serializationObject.customType = "BABYLON.CloudProceduralTexture";
                    return serializationObject;
                };
                /**
                 * Creates a Cloud Procedural Texture from parsed cloud procedural texture data
                 * @param parsedTexture defines parsed texture data
                 * @param scene defines the current scene
                 * @param rootUrl defines the root URL containing cloud procedural texture information
                 * @returns a parsed Cloud Procedural Texture
                 */
                CloudProceduralTexture.Parse = function (parsedTexture, scene, rootUrl) {
                    var texture = BABYLON.SerializationHelper.Parse(function () {
                        return new CloudProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps);
                    }, parsedTexture, scene, rootUrl);
                    return texture;
                };
                __decorate([BABYLON.serializeAsColor4()], CloudProceduralTexture.prototype, "skyColor", null);
                __decorate([BABYLON.serializeAsColor4()], CloudProceduralTexture.prototype, "cloudColor", null);
                return CloudProceduralTexture;
            }(BABYLON.ProceduralTexture);
            BABYLON.CloudProceduralTexture = CloudProceduralTexture;
        })(BABYLON || (BABYLON = {}));

        //# sourceMappingURL=babylon.cloudProceduralTexture.js.map

        BABYLON.Effect.ShadersStore['cloudProceduralTexturePixelShader'] = "precision highp float;\nvarying vec2 vUV;\nuniform vec4 skyColor;\nuniform vec4 cloudColor;\nfloat rand(vec2 n) {\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\n}\nfloat noise(vec2 n) {\nconst vec2 d=vec2(0.0,1.0);\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\n}\nfloat fbm(vec2 n) {\nfloat total=0.0,amplitude=1.0;\nfor (int i=0; i<4; i++) {\ntotal+=noise(n)*amplitude;\nn+=n;\namplitude*=0.5;\n}\nreturn total;\n}\nvoid main() {\nvec2 p=vUV*12.0;\nvec4 c=mix(skyColor,cloudColor,fbm(p));\ngl_FragColor=c;\n}\n";

        var BABYLON;
        (function (BABYLON) {
            var GrassProceduralTexture = /** @class */function (_super) {
                __extends(GrassProceduralTexture, _super);
                function GrassProceduralTexture(name, size, scene, fallbackTexture, generateMipMaps) {
                    var _this = _super.call(this, name, size, "grassProceduralTexture", scene, fallbackTexture, generateMipMaps) || this;
                    _this._groundColor = new BABYLON.Color3(1, 1, 1);
                    _this._grassColors = [new BABYLON.Color3(0.29, 0.38, 0.02), new BABYLON.Color3(0.36, 0.49, 0.09), new BABYLON.Color3(0.51, 0.6, 0.28)];
                    _this.updateShaderUniforms();
                    return _this;
                }
                GrassProceduralTexture.prototype.updateShaderUniforms = function () {
                    this.setColor3("herb1Color", this._grassColors[0]);
                    this.setColor3("herb2Color", this._grassColors[1]);
                    this.setColor3("herb3Color", this._grassColors[2]);
                    this.setColor3("groundColor", this._groundColor);
                };
                Object.defineProperty(GrassProceduralTexture.prototype, "grassColors", {
                    get: function () {
                        return this._grassColors;
                    },
                    set: function (value) {
                        this._grassColors = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GrassProceduralTexture.prototype, "groundColor", {
                    get: function () {
                        return this._groundColor;
                    },
                    set: function (value) {
                        this._groundColor = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Serializes this grass procedural texture
                 * @returns a serialized grass procedural texture object
                 */
                GrassProceduralTexture.prototype.serialize = function () {
                    var serializationObject = BABYLON.SerializationHelper.Serialize(this, _super.prototype.serialize.call(this));
                    serializationObject.customType = "BABYLON.GrassProceduralTexture";
                    serializationObject.grassColors = [];
                    for (var i = 0; i < this._grassColors.length; i++) {
                        serializationObject.grassColors.push(this._grassColors[i].asArray());
                    }
                    return serializationObject;
                };
                /**
                 * Creates a Grass Procedural Texture from parsed grass procedural texture data
                 * @param parsedTexture defines parsed texture data
                 * @param scene defines the current scene
                 * @param rootUrl defines the root URL containing grass procedural texture information
                 * @returns a parsed Grass Procedural Texture
                 */
                GrassProceduralTexture.Parse = function (parsedTexture, scene, rootUrl) {
                    var texture = BABYLON.SerializationHelper.Parse(function () {
                        return new GrassProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps);
                    }, parsedTexture, scene, rootUrl);
                    var colors = [];
                    for (var i = 0; i < parsedTexture.grassColors.length; i++) {
                        colors.push(BABYLON.Color3.FromArray(parsedTexture.grassColors[i]));
                    }
                    texture.grassColors = colors;
                    return texture;
                };
                __decorate([BABYLON.serializeAsColor3()], GrassProceduralTexture.prototype, "groundColor", null);
                return GrassProceduralTexture;
            }(BABYLON.ProceduralTexture);
            BABYLON.GrassProceduralTexture = GrassProceduralTexture;
        })(BABYLON || (BABYLON = {}));

        //# sourceMappingURL=babylon.grassProceduralTexture.js.map

        BABYLON.Effect.ShadersStore['grassProceduralTexturePixelShader'] = "precision highp float;\nvarying vec2 vPosition;\nvarying vec2 vUV;\nuniform vec3 herb1Color;\nuniform vec3 herb2Color;\nuniform vec3 herb3Color;\nuniform vec3 groundColor;\nfloat rand(vec2 n) {\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\n}\nfloat noise(vec2 n) {\nconst vec2 d=vec2(0.0,1.0);\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\n}\nfloat fbm(vec2 n) {\nfloat total=0.0,amplitude=1.0;\nfor (int i=0; i<4; i++) {\ntotal+=noise(n)*amplitude;\nn+=n;\namplitude*=0.5;\n}\nreturn total;\n}\nvoid main(void) {\nvec3 color=mix(groundColor,herb1Color,rand(gl_FragCoord.xy*4.0));\ncolor=mix(color,herb2Color,rand(gl_FragCoord.xy*8.0));\ncolor=mix(color,herb3Color,rand(gl_FragCoord.xy));\ncolor=mix(color,herb1Color,fbm(gl_FragCoord.xy*16.0));\ngl_FragColor=vec4(color,1.0);\n}";

        var BABYLON;
        (function (BABYLON) {
            var RoadProceduralTexture = /** @class */function (_super) {
                __extends(RoadProceduralTexture, _super);
                function RoadProceduralTexture(name, size, scene, fallbackTexture, generateMipMaps) {
                    var _this = _super.call(this, name, size, "roadProceduralTexture", scene, fallbackTexture, generateMipMaps) || this;
                    _this._roadColor = new BABYLON.Color3(0.53, 0.53, 0.53);
                    _this.updateShaderUniforms();
                    return _this;
                }
                RoadProceduralTexture.prototype.updateShaderUniforms = function () {
                    this.setColor3("roadColor", this._roadColor);
                };
                Object.defineProperty(RoadProceduralTexture.prototype, "roadColor", {
                    get: function () {
                        return this._roadColor;
                    },
                    set: function (value) {
                        this._roadColor = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Serializes this road procedural texture
                 * @returns a serialized road procedural texture object
                 */
                RoadProceduralTexture.prototype.serialize = function () {
                    var serializationObject = BABYLON.SerializationHelper.Serialize(this, _super.prototype.serialize.call(this));
                    serializationObject.customType = "BABYLON.RoadProceduralTexture";
                    return serializationObject;
                };
                /**
                 * Creates a Road Procedural Texture from parsed road procedural texture data
                 * @param parsedTexture defines parsed texture data
                 * @param scene defines the current scene
                 * @param rootUrl defines the root URL containing road procedural texture information
                 * @returns a parsed Road Procedural Texture
                 */
                RoadProceduralTexture.Parse = function (parsedTexture, scene, rootUrl) {
                    var texture = BABYLON.SerializationHelper.Parse(function () {
                        return new RoadProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps);
                    }, parsedTexture, scene, rootUrl);
                    return texture;
                };
                __decorate([BABYLON.serializeAsColor3()], RoadProceduralTexture.prototype, "roadColor", null);
                return RoadProceduralTexture;
            }(BABYLON.ProceduralTexture);
            BABYLON.RoadProceduralTexture = RoadProceduralTexture;
        })(BABYLON || (BABYLON = {}));

        //# sourceMappingURL=babylon.roadProceduralTexture.js.map

        BABYLON.Effect.ShadersStore['roadProceduralTexturePixelShader'] = "precision highp float;\nvarying vec2 vUV; \nuniform vec3 roadColor;\nfloat rand(vec2 n) {\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\n}\nfloat noise(vec2 n) {\nconst vec2 d=vec2(0.0,1.0);\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\n}\nfloat fbm(vec2 n) {\nfloat total=0.0,amplitude=1.0;\nfor (int i=0; i<4; i++) {\ntotal+=noise(n)*amplitude;\nn+=n;\namplitude*=0.5;\n}\nreturn total;\n}\nvoid main(void) {\nfloat ratioy=mod(gl_FragCoord.y*100.0 ,fbm(vUV*2.0));\nvec3 color=roadColor*ratioy;\ngl_FragColor=vec4(color,1.0);\n}";

        var BABYLON;
        (function (BABYLON) {
            var BrickProceduralTexture = /** @class */function (_super) {
                __extends(BrickProceduralTexture, _super);
                function BrickProceduralTexture(name, size, scene, fallbackTexture, generateMipMaps) {
                    var _this = _super.call(this, name, size, "brickProceduralTexture", scene, fallbackTexture, generateMipMaps) || this;
                    _this._numberOfBricksHeight = 15;
                    _this._numberOfBricksWidth = 5;
                    _this._jointColor = new BABYLON.Color3(0.72, 0.72, 0.72);
                    _this._brickColor = new BABYLON.Color3(0.77, 0.47, 0.40);
                    _this.updateShaderUniforms();
                    return _this;
                }
                BrickProceduralTexture.prototype.updateShaderUniforms = function () {
                    this.setFloat("numberOfBricksHeight", this._numberOfBricksHeight);
                    this.setFloat("numberOfBricksWidth", this._numberOfBricksWidth);
                    this.setColor3("brickColor", this._brickColor);
                    this.setColor3("jointColor", this._jointColor);
                };
                Object.defineProperty(BrickProceduralTexture.prototype, "numberOfBricksHeight", {
                    get: function () {
                        return this._numberOfBricksHeight;
                    },
                    set: function (value) {
                        this._numberOfBricksHeight = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BrickProceduralTexture.prototype, "numberOfBricksWidth", {
                    get: function () {
                        return this._numberOfBricksWidth;
                    },
                    set: function (value) {
                        this._numberOfBricksWidth = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BrickProceduralTexture.prototype, "jointColor", {
                    get: function () {
                        return this._jointColor;
                    },
                    set: function (value) {
                        this._jointColor = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BrickProceduralTexture.prototype, "brickColor", {
                    get: function () {
                        return this._brickColor;
                    },
                    set: function (value) {
                        this._brickColor = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Serializes this brick procedural texture
                 * @returns a serialized brick procedural texture object
                 */
                BrickProceduralTexture.prototype.serialize = function () {
                    var serializationObject = BABYLON.SerializationHelper.Serialize(this, _super.prototype.serialize.call(this));
                    serializationObject.customType = "BABYLON.BrickProceduralTexture";
                    return serializationObject;
                };
                /**
                 * Creates a Brick Procedural Texture from parsed brick procedural texture data
                 * @param parsedTexture defines parsed texture data
                 * @param scene defines the current scene
                 * @param rootUrl defines the root URL containing brick procedural texture information
                 * @returns a parsed Brick Procedural Texture
                 */
                BrickProceduralTexture.Parse = function (parsedTexture, scene, rootUrl) {
                    var texture = BABYLON.SerializationHelper.Parse(function () {
                        return new BrickProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps);
                    }, parsedTexture, scene, rootUrl);
                    return texture;
                };
                __decorate([BABYLON.serialize()], BrickProceduralTexture.prototype, "numberOfBricksHeight", null);
                __decorate([BABYLON.serialize()], BrickProceduralTexture.prototype, "numberOfBricksWidth", null);
                __decorate([BABYLON.serializeAsColor3()], BrickProceduralTexture.prototype, "jointColor", null);
                __decorate([BABYLON.serializeAsColor3()], BrickProceduralTexture.prototype, "brickColor", null);
                return BrickProceduralTexture;
            }(BABYLON.ProceduralTexture);
            BABYLON.BrickProceduralTexture = BrickProceduralTexture;
        })(BABYLON || (BABYLON = {}));

        //# sourceMappingURL=babylon.brickProceduralTexture.js.map

        BABYLON.Effect.ShadersStore['brickProceduralTexturePixelShader'] = "precision highp float;\nvarying vec2 vPosition;\nvarying vec2 vUV;\nuniform float numberOfBricksHeight;\nuniform float numberOfBricksWidth;\nuniform vec3 brickColor;\nuniform vec3 jointColor;\nfloat rand(vec2 n) {\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\n}\nfloat noise(vec2 n) {\nconst vec2 d=vec2(0.0,1.0);\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\n}\nfloat fbm(vec2 n) {\nfloat total=0.0,amplitude=1.0;\nfor (int i=0; i<4; i++) {\ntotal+=noise(n)*amplitude;\nn+=n;\namplitude*=0.5;\n}\nreturn total;\n}\nfloat roundF(float number){\nreturn sign(number)*floor(abs(number)+0.5);\n}\nvoid main(void)\n{\nfloat brickW=1.0/numberOfBricksWidth;\nfloat brickH=1.0/numberOfBricksHeight;\nfloat jointWPercentage=0.01;\nfloat jointHPercentage=0.05;\nvec3 color=brickColor;\nfloat yi=vUV.y/brickH;\nfloat nyi=roundF(yi);\nfloat xi=vUV.x/brickW;\nif (mod(floor(yi),2.0) == 0.0){\nxi=xi-0.5;\n}\nfloat nxi=roundF(xi);\nvec2 brickvUV=vec2((xi-floor(xi))/brickH,(yi-floor(yi))/brickW);\nif (yi<nyi+jointHPercentage && yi>nyi-jointHPercentage){\ncolor=mix(jointColor,vec3(0.37,0.25,0.25),(yi-nyi)/jointHPercentage+0.2);\n}\nelse if (xi<nxi+jointWPercentage && xi>nxi-jointWPercentage){\ncolor=mix(jointColor,vec3(0.44,0.44,0.44),(xi-nxi)/jointWPercentage+0.2);\n}\nelse {\nfloat brickColorSwitch=mod(floor(yi)+floor(xi),3.0);\nif (brickColorSwitch == 0.0)\ncolor=mix(color,vec3(0.33,0.33,0.33),0.3);\nelse if (brickColorSwitch == 2.0)\ncolor=mix(color,vec3(0.11,0.11,0.11),0.3);\n}\ngl_FragColor=vec4(color,1.0);\n}";

        var BABYLON;
        (function (BABYLON) {
            var MarbleProceduralTexture = /** @class */function (_super) {
                __extends(MarbleProceduralTexture, _super);
                function MarbleProceduralTexture(name, size, scene, fallbackTexture, generateMipMaps) {
                    var _this = _super.call(this, name, size, "marbleProceduralTexture", scene, fallbackTexture, generateMipMaps) || this;
                    _this._numberOfTilesHeight = 3;
                    _this._numberOfTilesWidth = 3;
                    _this._amplitude = 9.0;
                    _this._jointColor = new BABYLON.Color3(0.72, 0.72, 0.72);
                    _this.updateShaderUniforms();
                    return _this;
                }
                MarbleProceduralTexture.prototype.updateShaderUniforms = function () {
                    this.setFloat("numberOfTilesHeight", this._numberOfTilesHeight);
                    this.setFloat("numberOfTilesWidth", this._numberOfTilesWidth);
                    this.setFloat("amplitude", this._amplitude);
                    this.setColor3("jointColor", this._jointColor);
                };
                Object.defineProperty(MarbleProceduralTexture.prototype, "numberOfTilesHeight", {
                    get: function () {
                        return this._numberOfTilesHeight;
                    },
                    set: function (value) {
                        this._numberOfTilesHeight = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MarbleProceduralTexture.prototype, "amplitude", {
                    get: function () {
                        return this._amplitude;
                    },
                    set: function (value) {
                        this._amplitude = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MarbleProceduralTexture.prototype, "numberOfTilesWidth", {
                    get: function () {
                        return this._numberOfTilesWidth;
                    },
                    set: function (value) {
                        this._numberOfTilesWidth = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(MarbleProceduralTexture.prototype, "jointColor", {
                    get: function () {
                        return this._jointColor;
                    },
                    set: function (value) {
                        this._jointColor = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Serializes this marble procedural texture
                 * @returns a serialized marble procedural texture object
                 */
                MarbleProceduralTexture.prototype.serialize = function () {
                    var serializationObject = BABYLON.SerializationHelper.Serialize(this, _super.prototype.serialize.call(this));
                    serializationObject.customType = "BABYLON.MarbleProceduralTexture";
                    return serializationObject;
                };
                /**
                 * Creates a Marble Procedural Texture from parsed marble procedural texture data
                 * @param parsedTexture defines parsed texture data
                 * @param scene defines the current scene
                 * @param rootUrl defines the root URL containing marble procedural texture information
                 * @returns a parsed Marble Procedural Texture
                 */
                MarbleProceduralTexture.Parse = function (parsedTexture, scene, rootUrl) {
                    var texture = BABYLON.SerializationHelper.Parse(function () {
                        return new MarbleProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps);
                    }, parsedTexture, scene, rootUrl);
                    return texture;
                };
                __decorate([BABYLON.serialize()], MarbleProceduralTexture.prototype, "numberOfTilesHeight", null);
                __decorate([BABYLON.serialize()], MarbleProceduralTexture.prototype, "amplitude", null);
                __decorate([BABYLON.serialize()], MarbleProceduralTexture.prototype, "numberOfTilesWidth", null);
                __decorate([BABYLON.serialize()], MarbleProceduralTexture.prototype, "jointColor", null);
                return MarbleProceduralTexture;
            }(BABYLON.ProceduralTexture);
            BABYLON.MarbleProceduralTexture = MarbleProceduralTexture;
        })(BABYLON || (BABYLON = {}));

        //# sourceMappingURL=babylon.marbleProceduralTexture.js.map

        BABYLON.Effect.ShadersStore['marbleProceduralTexturePixelShader'] = "precision highp float;\nvarying vec2 vPosition;\nvarying vec2 vUV;\nuniform float numberOfTilesHeight;\nuniform float numberOfTilesWidth;\nuniform float amplitude;\nuniform vec3 marbleColor;\nuniform vec3 jointColor;\nconst vec3 tileSize=vec3(1.1,1.0,1.1);\nconst vec3 tilePct=vec3(0.98,1.0,0.98);\nfloat rand(vec2 n) {\nreturn fract(cos(dot(n,vec2(12.9898,4.1414)))*43758.5453);\n}\nfloat noise(vec2 n) {\nconst vec2 d=vec2(0.0,1.0);\nvec2 b=floor(n),f=smoothstep(vec2(0.0),vec2(1.0),fract(n));\nreturn mix(mix(rand(b),rand(b+d.yx),f.x),mix(rand(b+d.xy),rand(b+d.yy),f.x),f.y);\n}\nfloat turbulence(vec2 P)\n{\nfloat val=0.0;\nfloat freq=1.0;\nfor (int i=0; i<4; i++)\n{\nval+=abs(noise(P*freq)/freq);\nfreq*=2.07;\n}\nreturn val;\n}\nfloat roundF(float number){\nreturn sign(number)*floor(abs(number)+0.5);\n}\nvec3 marble_color(float x)\n{\nvec3 col;\nx=0.5*(x+1.);\nx=sqrt(x); \nx=sqrt(x);\nx=sqrt(x);\ncol=vec3(.2+.75*x); \ncol.b*=0.95; \nreturn col;\n}\nvoid main()\n{\nfloat brickW=1.0/numberOfTilesWidth;\nfloat brickH=1.0/numberOfTilesHeight;\nfloat jointWPercentage=0.01;\nfloat jointHPercentage=0.01;\nvec3 color=marbleColor;\nfloat yi=vUV.y/brickH;\nfloat nyi=roundF(yi);\nfloat xi=vUV.x/brickW;\nif (mod(floor(yi),2.0) == 0.0){\nxi=xi-0.5;\n}\nfloat nxi=roundF(xi);\nvec2 brickvUV=vec2((xi-floor(xi))/brickH,(yi-floor(yi))/brickW);\nif (yi<nyi+jointHPercentage && yi>nyi-jointHPercentage){\ncolor=mix(jointColor,vec3(0.37,0.25,0.25),(yi-nyi)/jointHPercentage+0.2);\n}\nelse if (xi<nxi+jointWPercentage && xi>nxi-jointWPercentage){\ncolor=mix(jointColor,vec3(0.44,0.44,0.44),(xi-nxi)/jointWPercentage+0.2);\n}\nelse {\nfloat t=6.28*brickvUV.x/(tileSize.x+noise(vec2(vUV)*6.0));\nt+=amplitude*turbulence(brickvUV.xy);\nt=sin(t);\ncolor=marble_color(t);\n}\ngl_FragColor=vec4(color,0.0);\n}";

        var BABYLON;
        (function (BABYLON) {
            var StarfieldProceduralTexture = /** @class */function (_super) {
                __extends(StarfieldProceduralTexture, _super);
                function StarfieldProceduralTexture(name, size, scene, fallbackTexture, generateMipMaps) {
                    var _this = _super.call(this, name, size, "starfieldProceduralTexture", scene, fallbackTexture, generateMipMaps) || this;
                    _this._time = 1;
                    _this._alpha = 0.5;
                    _this._beta = 0.8;
                    _this._zoom = 0.8;
                    _this._formuparam = 0.53;
                    _this._stepsize = 0.1;
                    _this._tile = 0.850;
                    _this._brightness = 0.0015;
                    _this._darkmatter = 0.400;
                    _this._distfading = 0.730;
                    _this._saturation = 0.850;
                    _this.updateShaderUniforms();
                    return _this;
                }
                StarfieldProceduralTexture.prototype.updateShaderUniforms = function () {
                    this.setFloat("time", this._time);
                    this.setFloat("alpha", this._alpha);
                    this.setFloat("beta", this._beta);
                    this.setFloat("zoom", this._zoom);
                    this.setFloat("formuparam", this._formuparam);
                    this.setFloat("stepsize", this._stepsize);
                    this.setFloat("tile", this._tile);
                    this.setFloat("brightness", this._brightness);
                    this.setFloat("darkmatter", this._darkmatter);
                    this.setFloat("distfading", this._distfading);
                    this.setFloat("saturation", this._saturation);
                };
                Object.defineProperty(StarfieldProceduralTexture.prototype, "time", {
                    get: function () {
                        return this._time;
                    },
                    set: function (value) {
                        this._time = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StarfieldProceduralTexture.prototype, "alpha", {
                    get: function () {
                        return this._alpha;
                    },
                    set: function (value) {
                        this._alpha = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StarfieldProceduralTexture.prototype, "beta", {
                    get: function () {
                        return this._beta;
                    },
                    set: function (value) {
                        this._beta = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StarfieldProceduralTexture.prototype, "formuparam", {
                    get: function () {
                        return this._formuparam;
                    },
                    set: function (value) {
                        this._formuparam = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StarfieldProceduralTexture.prototype, "stepsize", {
                    get: function () {
                        return this._stepsize;
                    },
                    set: function (value) {
                        this._stepsize = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StarfieldProceduralTexture.prototype, "zoom", {
                    get: function () {
                        return this._zoom;
                    },
                    set: function (value) {
                        this._zoom = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StarfieldProceduralTexture.prototype, "tile", {
                    get: function () {
                        return this._tile;
                    },
                    set: function (value) {
                        this._tile = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StarfieldProceduralTexture.prototype, "brightness", {
                    get: function () {
                        return this._brightness;
                    },
                    set: function (value) {
                        this._brightness = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StarfieldProceduralTexture.prototype, "darkmatter", {
                    get: function () {
                        return this._darkmatter;
                    },
                    set: function (value) {
                        this._darkmatter = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StarfieldProceduralTexture.prototype, "distfading", {
                    get: function () {
                        return this._distfading;
                    },
                    set: function (value) {
                        this._distfading = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(StarfieldProceduralTexture.prototype, "saturation", {
                    get: function () {
                        return this._saturation;
                    },
                    set: function (value) {
                        this._saturation = value;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Serializes this starfield procedural texture
                 * @returns a serialized starfield procedural texture object
                 */
                StarfieldProceduralTexture.prototype.serialize = function () {
                    var serializationObject = BABYLON.SerializationHelper.Serialize(this, _super.prototype.serialize.call(this));
                    serializationObject.customType = "BABYLON.StarfieldProceduralTexture";
                    return serializationObject;
                };
                /**
                 * Creates a Starfield Procedural Texture from parsed startfield procedural texture data
                 * @param parsedTexture defines parsed texture data
                 * @param scene defines the current scene
                 * @param rootUrl defines the root URL containing startfield procedural texture information
                 * @returns a parsed Starfield Procedural Texture
                 */
                StarfieldProceduralTexture.Parse = function (parsedTexture, scene, rootUrl) {
                    var texture = BABYLON.SerializationHelper.Parse(function () {
                        return new StarfieldProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps);
                    }, parsedTexture, scene, rootUrl);
                    return texture;
                };
                __decorate([BABYLON.serialize()], StarfieldProceduralTexture.prototype, "time", null);
                __decorate([BABYLON.serialize()], StarfieldProceduralTexture.prototype, "alpha", null);
                __decorate([BABYLON.serialize()], StarfieldProceduralTexture.prototype, "beta", null);
                __decorate([BABYLON.serialize()], StarfieldProceduralTexture.prototype, "formuparam", null);
                __decorate([BABYLON.serialize()], StarfieldProceduralTexture.prototype, "stepsize", null);
                __decorate([BABYLON.serialize()], StarfieldProceduralTexture.prototype, "zoom", null);
                __decorate([BABYLON.serialize()], StarfieldProceduralTexture.prototype, "tile", null);
                __decorate([BABYLON.serialize()], StarfieldProceduralTexture.prototype, "brightness", null);
                __decorate([BABYLON.serialize()], StarfieldProceduralTexture.prototype, "darkmatter", null);
                __decorate([BABYLON.serialize()], StarfieldProceduralTexture.prototype, "distfading", null);
                __decorate([BABYLON.serialize()], StarfieldProceduralTexture.prototype, "saturation", null);
                return StarfieldProceduralTexture;
            }(BABYLON.ProceduralTexture);
            BABYLON.StarfieldProceduralTexture = StarfieldProceduralTexture;
        })(BABYLON || (BABYLON = {}));

        //# sourceMappingURL=babylon.starfieldProceduralTexture.js.map

        BABYLON.Effect.ShadersStore['starfieldProceduralTexturePixelShader'] = "precision highp float;\n\n#define volsteps 20\n#define iterations 15\nvarying vec2 vPosition;\nvarying vec2 vUV;\nuniform float time;\nuniform float alpha;\nuniform float beta;\nuniform float zoom;\nuniform float formuparam;\nuniform float stepsize;\nuniform float tile;\nuniform float brightness;\nuniform float darkmatter;\nuniform float distfading;\nuniform float saturation;\nvoid main()\n{\nvec3 dir=vec3(vUV*zoom,1.);\nfloat localTime=time*0.0001;\n\nmat2 rot1=mat2(cos(alpha),sin(alpha),-sin(alpha),cos(alpha));\nmat2 rot2=mat2(cos(beta),sin(beta),-sin(beta),cos(beta));\ndir.xz*=rot1;\ndir.xy*=rot2;\nvec3 from=vec3(1.,.5,0.5);\nfrom+=vec3(-2.,localTime*2.,localTime);\nfrom.xz*=rot1;\nfrom.xy*=rot2;\n\nfloat s=0.1,fade=1.;\nvec3 v=vec3(0.);\nfor (int r=0; r<volsteps; r++) {\nvec3 p=from+s*dir*.5;\np=abs(vec3(tile)-mod(p,vec3(tile*2.))); \nfloat pa,a=pa=0.;\nfor (int i=0; i<iterations; i++) {\np=abs(p)/dot(p,p)-formuparam; \na+=abs(length(p)-pa); \npa=length(p);\n}\nfloat dm=max(0.,darkmatter-a*a*.001); \na*=a*a; \nif (r>6) fade*=1.-dm; \n\nv+=fade;\nv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; \nfade*=distfading; \ns+=stepsize;\n}\nv=mix(vec3(length(v)),v,saturation); \ngl_FragColor=vec4(v*.01,1.);\n}";

        var BABYLON;
        (function (BABYLON) {
            var NormalMapProceduralTexture = /** @class */function (_super) {
                __extends(NormalMapProceduralTexture, _super);
                function NormalMapProceduralTexture(name, size, scene, fallbackTexture, generateMipMaps) {
                    var _this = _super.call(this, name, size, "normalMapProceduralTexture", scene, fallbackTexture, generateMipMaps) || this;
                    _this.updateShaderUniforms();
                    return _this;
                }
                NormalMapProceduralTexture.prototype.updateShaderUniforms = function () {
                    this.setTexture("baseSampler", this._baseTexture);
                    this.setFloat("size", this.getRenderSize());
                };
                NormalMapProceduralTexture.prototype.render = function (useCameraPostProcess) {
                    _super.prototype.render.call(this, useCameraPostProcess);
                };
                NormalMapProceduralTexture.prototype.resize = function (size, generateMipMaps) {
                    _super.prototype.resize.call(this, size, generateMipMaps);
                    // We need to update the "size" uniform
                    this.updateShaderUniforms();
                };
                Object.defineProperty(NormalMapProceduralTexture.prototype, "baseTexture", {
                    get: function () {
                        return this._baseTexture;
                    },
                    set: function (texture) {
                        this._baseTexture = texture;
                        this.updateShaderUniforms();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Serializes this normal map procedural texture
                 * @returns a serialized normal map procedural texture object
                 */
                NormalMapProceduralTexture.prototype.serialize = function () {
                    var serializationObject = BABYLON.SerializationHelper.Serialize(this, _super.prototype.serialize.call(this));
                    serializationObject.customType = "BABYLON.NormalMapProceduralTexture";
                    return serializationObject;
                };
                /**
                 * Creates a Normal Map Procedural Texture from parsed normal map procedural texture data
                 * @param parsedTexture defines parsed texture data
                 * @param scene defines the current scene
                 * @param rootUrl defines the root URL containing normal map procedural texture information
                 * @returns a parsed Normal Map Procedural Texture
                 */
                NormalMapProceduralTexture.Parse = function (parsedTexture, scene, rootUrl) {
                    var texture = BABYLON.SerializationHelper.Parse(function () {
                        return new NormalMapProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps);
                    }, parsedTexture, scene, rootUrl);
                    return texture;
                };
                __decorate([BABYLON.serializeAsTexture()], NormalMapProceduralTexture.prototype, "baseTexture", null);
                return NormalMapProceduralTexture;
            }(BABYLON.ProceduralTexture);
            BABYLON.NormalMapProceduralTexture = NormalMapProceduralTexture;
        })(BABYLON || (BABYLON = {}));

        //# sourceMappingURL=babylon.normalMapProceduralTexture.js.map

        BABYLON.Effect.ShadersStore['normalMapProceduralTexturePixelShader'] = "precision highp float;\n\nuniform sampler2D baseSampler;\nuniform float size;\n\nvarying vec2 vUV;\n\nconst vec3 LUMA_COEFFICIENT=vec3(0.2126,0.7152,0.0722);\nfloat lumaAtCoord(vec2 coord)\n{\nvec3 pixel=texture2D(baseSampler,coord).rgb;\nfloat luma=dot(pixel,LUMA_COEFFICIENT);\nreturn luma;\n}\nvoid main()\n{\nfloat lumaU0=lumaAtCoord(vUV+vec2(-1.0,0.0)/size);\nfloat lumaU1=lumaAtCoord(vUV+vec2( 1.0,0.0)/size);\nfloat lumaV0=lumaAtCoord(vUV+vec2( 0.0,-1.0)/size);\nfloat lumaV1=lumaAtCoord(vUV+vec2( 0.0,1.0)/size);\nvec2 slope=(vec2(lumaU0-lumaU1,lumaV0-lumaV1)+1.0)*0.5;\ngl_FragColor=vec4(slope,1.0,1.0);\n}\n";

        var BABYLON;
        (function (BABYLON) {
            var PerlinNoiseProceduralTexture = /** @class */function (_super) {
                __extends(PerlinNoiseProceduralTexture, _super);
                function PerlinNoiseProceduralTexture(name, size, scene, fallbackTexture, generateMipMaps) {
                    var _this = _super.call(this, name, size, "perlinNoiseProceduralTexture", scene, fallbackTexture, generateMipMaps) || this;
                    _this.time = 0.0;
                    _this.timeScale = 1.0;
                    _this.translationSpeed = 1.0;
                    _this._currentTranslation = 0;
                    _this.updateShaderUniforms();
                    return _this;
                }
                PerlinNoiseProceduralTexture.prototype.updateShaderUniforms = function () {
                    this.setFloat("size", this.getRenderSize());
                    var scene = this.getScene();
                    if (!scene) {
                        return;
                    }
                    var deltaTime = scene.getEngine().getDeltaTime();
                    this.time += deltaTime;
                    this.setFloat("time", this.time * this.timeScale / 1000);
                    this._currentTranslation += deltaTime * this.translationSpeed / 1000.0;
                    this.setFloat("translationSpeed", this._currentTranslation);
                };
                PerlinNoiseProceduralTexture.prototype.render = function (useCameraPostProcess) {
                    this.updateShaderUniforms();
                    _super.prototype.render.call(this, useCameraPostProcess);
                };
                PerlinNoiseProceduralTexture.prototype.resize = function (size, generateMipMaps) {
                    _super.prototype.resize.call(this, size, generateMipMaps);
                };
                /**
                 * Serializes this perlin noise procedural texture
                 * @returns a serialized perlin noise procedural texture object
                 */
                PerlinNoiseProceduralTexture.prototype.serialize = function () {
                    var serializationObject = BABYLON.SerializationHelper.Serialize(this, _super.prototype.serialize.call(this));
                    serializationObject.customType = "BABYLON.PerlinNoiseProceduralTexture";
                    return serializationObject;
                };
                /**
                 * Creates a Perlin Noise Procedural Texture from parsed perlin noise procedural texture data
                 * @param parsedTexture defines parsed texture data
                 * @param scene defines the current scene
                 * @param rootUrl defines the root URL containing perlin noise procedural texture information
                 * @returns a parsed Perlin Noise Procedural Texture
                 */
                PerlinNoiseProceduralTexture.Parse = function (parsedTexture, scene, rootUrl) {
                    var texture = BABYLON.SerializationHelper.Parse(function () {
                        return new PerlinNoiseProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps);
                    }, parsedTexture, scene, rootUrl);
                    return texture;
                };
                __decorate([BABYLON.serialize()], PerlinNoiseProceduralTexture.prototype, "time", void 0);
                __decorate([BABYLON.serialize()], PerlinNoiseProceduralTexture.prototype, "timeScale", void 0);
                __decorate([BABYLON.serialize()], PerlinNoiseProceduralTexture.prototype, "translationSpeed", void 0);
                return PerlinNoiseProceduralTexture;
            }(BABYLON.ProceduralTexture);
            BABYLON.PerlinNoiseProceduralTexture = PerlinNoiseProceduralTexture;
        })(BABYLON || (BABYLON = {}));

        //# sourceMappingURL=babylon.perlinNoiseProceduralTexture.js.map

        BABYLON.Effect.ShadersStore['perlinNoiseProceduralTexturePixelShader'] = "\nprecision highp float;\n\nuniform float size;\nuniform float time;\nuniform float translationSpeed;\n\nvarying vec2 vUV;\n\nfloat r(float n)\n{\nreturn fract(cos(n*89.42)*343.42);\n}\nvec2 r(vec2 n)\n{\nreturn vec2(r(n.x*23.62-300.0+n.y*34.35),r(n.x*45.13+256.0+n.y*38.89)); \n}\nfloat worley(vec2 n,float s)\n{\nfloat dis=1.0;\nfor(int x=-1; x<=1; x++)\n{\nfor(int y=-1; y<=1; y++)\n{\nvec2 p=floor(n/s)+vec2(x,y);\nfloat d=length(r(p)+vec2(x,y)-fract(n/s));\nif (dis>d)\ndis=d;\n}\n}\nreturn 1.0-dis;\n}\nvec3 hash33(vec3 p3)\n{\np3=fract(p3*vec3(0.1031,0.11369,0.13787));\np3+=dot(p3,p3.yxz+19.19);\nreturn -1.0+2.0*fract(vec3((p3.x+p3.y)*p3.z,(p3.x+p3.z)*p3.y,(p3.y+p3.z)*p3.x));\n}\nfloat perlinNoise(vec3 p)\n{\nvec3 pi=floor(p);\nvec3 pf=p-pi;\nvec3 w=pf*pf*(3.0-2.0*pf);\nreturn mix(\nmix(\nmix(\ndot(pf-vec3(0,0,0),hash33(pi+vec3(0,0,0))),\ndot(pf-vec3(1,0,0),hash33(pi+vec3(1,0,0))),\nw.x\n),\nmix(\ndot(pf-vec3(0,0,1),hash33(pi+vec3(0,0,1))),\ndot(pf-vec3(1,0,1),hash33(pi+vec3(1,0,1))),\nw.x\n),\nw.z\n),\nmix(\nmix(\ndot(pf-vec3(0,1,0),hash33(pi+vec3(0,1,0))),\ndot(pf-vec3(1,1,0),hash33(pi+vec3(1,1,0))),\nw.x\n),\nmix(\ndot(pf-vec3(0,1,1),hash33(pi+vec3(0,1,1))),\ndot(pf-vec3(1,1,1),hash33(pi+vec3(1,1,1))),\nw.x\n),\nw.z\n),\nw.y\n);\n}\n\nvoid main(void)\n{\nvec2 uv=gl_FragCoord.xy+translationSpeed;\nfloat dis=(\n1.0+perlinNoise(vec3(uv/vec2(size,size),time*0.05)*8.0))\n*(1.0+(worley(uv,32.0)+ 0.5*worley(2.0*uv,32.0)+0.25*worley(4.0*uv,32.0))\n);\ngl_FragColor=vec4(vec3(dis/4.0),1.0);\n}\n";

        return BABYLON;
    });
});
$__System.registerDynamic("4d", ["45", "26"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_procedural_textures_1 = $__require("45");
    var edition_tool_1 = $__require("26");
    var WoodProceduralTool = /** @class */function (_super) {
        __extends(WoodProceduralTool, _super);
        function WoodProceduralTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'WOOD-PROCEDURAL-TOOL';
            _this.tabName = 'Wood';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        WoodProceduralTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_procedural_textures_1.WoodProceduralTexture;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        WoodProceduralTool.prototype.update = function (object) {
            // Super
            _super.prototype.update.call(this, object);
            // Wood
            var wood = this.tool.addFolder('Wood');
            wood.open();
            wood.add(object, 'ampScale').step(0.01).name('Amp Scale');
            this.tool.addColor(wood, 'Wood Color', object.woodColor, function () {
                return object.updateShaderUniforms();
            }).open();
        };
        return WoodProceduralTool;
    }(edition_tool_1.default);
    exports.default = WoodProceduralTool;

});
$__System.registerDynamic("4e", ["c", "26"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var edition_tool_1 = $__require("26");
    var GroundTool = /** @class */function (_super) {
        __extends(GroundTool, _super);
        function GroundTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'GROUND-TOOL';
            _this.tabName = 'Ground';
            // Private members
            _this._subdivisions = 0;
            _this._heightMapOptions = {};
            _this._minHeight = 0;
            _this._maxHeight = 1;
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        GroundTool.prototype.isSupported = function (object) {
            return object instanceof babylonjs_1.GroundMesh;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        GroundTool.prototype.update = function (ground) {
            var _this = this;
            _super.prototype.update.call(this, ground);
            this._subdivisions = this.object._subdivisionsX;
            this.tool.element.add(this.object, '_width').min(0.1).step(0.1).name('Width').onChange(function () {
                return _this._propertyChanged();
            });
            this.tool.element.add(this.object, '_height').min(0.1).step(0.1).name('Height').onChange(function () {
                return _this._propertyChanged();
            });
            this.tool.element.add(this, '_subdivisions').min(1).max(1000).step(1).name('Subdivisions').onChange(function () {
                return _this._propertyChanged();
            });
            this.tool.element.add(this, '_createFromHeightMap').name('Create From Height Map...');
            // Height map
            var heightMapOptions = this._heightMapOptions[this.object.id];
            if (heightMapOptions) {
                var heightmap = this.tool.element.addFolder('Height Map');
                heightmap.open();
                heightmap.add(heightMapOptions, 'minHeight').step(0.01).name('Min Height').onChange(function () {
                    return _this._heightMapTexture = heightMapOptions.texture;
                });
                heightmap.add(heightMapOptions, 'maxHeight').step(0.01).name('Max Height').onChange(function () {
                    return _this._heightMapTexture = heightMapOptions.texture;
                });
                this.tool.addColor(heightmap, 'Color Filter', heightMapOptions.colorFilter, function () {
                    return _this._heightMapTexture = heightMapOptions.texture;
                }).open();
                heightmap.add(this, '_removeHeightMap').name('Remove Height Map');
            }
        };
        // Property changed
        GroundTool.prototype._propertyChanged = function () {
            var options = this._heightMapOptions[this.object.id];
            if (options) this._heightMapTexture = options.texture;else {
                this.object.geometry.setAllVerticesData(babylonjs_1.VertexData.CreateGround({
                    width: this.object._width,
                    height: this.object._height,
                    subdivisions: this._subdivisions
                }));
            }
            this.object._subdivisionsX = this.object._subdivisionsY = this._subdivisions;
        };
        // Create ground from height map
        GroundTool.prototype._createFromHeightMap = function () {
            this.editor.addEditPanelPlugin('texture-viewer', true, 'Texture Viewer', this, '_heightMapTexture', false);
        };
        // Remove height map texture from ground
        GroundTool.prototype._removeHeightMap = function () {
            delete this._heightMapOptions[this.object.id];
            this._propertyChanged();
            this.update(this.object);
        };
        Object.defineProperty(GroundTool.prototype, "_heightMapTexture", {
            // Sets the height map texture
            set: function (texture) {
                var bufferWidth = texture.getSize().width;
                var bufferHeight = texture.getSize().height;
                var buffer = new Uint8Array(texture.readPixels().buffer);
                var options = this._heightMapOptions[this.object.id];
                var update = false;
                if (!options) {
                    update = true;
                    options = {
                        texture: texture,
                        minHeight: 0,
                        maxHeight: 1,
                        colorFilter: new babylonjs_1.Color3(0.3, 0.59, 0.11)
                    };
                }
                this.object.geometry.setAllVerticesData(babylonjs_1.VertexData.CreateGroundFromHeightMap({
                    width: this.object._width,
                    height: this.object._height,
                    subdivisions: this._subdivisions,
                    minHeight: options.minHeight,
                    maxHeight: options.maxHeight,
                    colorFilter: options.colorFilter,
                    buffer: buffer,
                    bufferWidth: bufferWidth,
                    bufferHeight: bufferHeight,
                    alphaFilter: 0
                }));
                // Update height map and options
                options.texture = texture;
                this._heightMapOptions[this.object.id] = options;
                this.object._subdivisionsX = this.object._subdivisionsY = this._subdivisions;
                // Update tool
                if (update) this.update(this.object);
            },
            enumerable: true,
            configurable: true
        });
        return GroundTool;
    }(edition_tool_1.default);
    exports.default = GroundTool;

});
$__System.registerDynamic("4f", ["26", "1b"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __extends = exports && exports.__extends || function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
                d.__proto__ = b;
            } || function (d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var edition_tool_1 = $__require("26");
    var scene_manager_1 = $__require("1b");
    var EnvironmentHelperTool = /** @class */function (_super) {
        __extends(EnvironmentHelperTool, _super);
        function EnvironmentHelperTool() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // Public members
            _this.divId = 'ENVIRONMENT-HELPER-TOOL';
            _this.tabName = 'Environment Helper';
            return _this;
        }
        /**
        * Returns if the object is supported
        * @param object the object selected in the graph
        */
        EnvironmentHelperTool.prototype.isSupported = function (object) {
            return scene_manager_1.default.EnvironmentHelper && scene_manager_1.default.EnvironmentHelper.rootMesh === object;
        };
        /**
        * Updates the edition tool
        * @param object the object selected in the graph
        */
        EnvironmentHelperTool.prototype.update = function (mesh) {
            _super.prototype.update.call(this, mesh);
            var helper = scene_manager_1.default.EnvironmentHelper;
            // Ground color
            var ground = this.tool.addFolder('Ground');
            ground.open();
            ground.add(helper['_options'], 'enableGroundMirror').onChange(function (r) {
                return scene_manager_1.default.EnvironmentHelper.updateOptions({
                    enableGroundMirror: helper['_options'].enableGroundMirror
                });
            });
            this.tool.addColor(ground, 'Color', helper['_options'].groundColor, function () {
                return scene_manager_1.default.EnvironmentHelper.updateOptions({
                    groundColor: helper['_options'].groundColor
                });
            }).open();
            // Skybox
            var skybox = this.tool.addFolder('Skybox');
            skybox.open();
            this.tool.addColor(skybox, 'Color', helper['_options'].skyboxColor, function () {
                return scene_manager_1.default.EnvironmentHelper.updateOptions({
                    skyboxColor: helper['_options'].skyboxColor
                });
            }).open();
        };
        return EnvironmentHelperTool;
    }(edition_tool_1.default);
    exports.default = EnvironmentHelperTool;

});
$__System.registerDynamic("50", ["25", "27", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "32", "33", "34", "35", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "18"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var scene_tool_1 = $__require("25");
    var node_tool_1 = $__require("27");
    var light_tool_1 = $__require("29");
    var physics_tool_1 = $__require("2a");
    var render_target_tool_1 = $__require("2b");
    var particle_system_tool_1 = $__require("2c");
    var sound_tool_1 = $__require("2d");
    var animation_tool_1 = $__require("2e");
    var skeleton_tool_1 = $__require("2f");
    var standard_tool_1 = $__require("30");
    var pbr_tool_1 = $__require("32");
    var pbr_metallic_roughness_tool_1 = $__require("33");
    var pbr_specular_glossiness_tool_1 = $__require("34");
    var water_tool_1 = $__require("35");
    var custom_tool_1 = $__require("37");
    var sky_tool_1 = $__require("38");
    var fire_tool_1 = $__require("39");
    var cell_tool_1 = $__require("3a");
    var grid_tool_1 = $__require("3b");
    var tri_planar_tool_1 = $__require("3c");
    var terrain_tool_1 = $__require("3d");
    var lava_tool_1 = $__require("3e");
    var fur_tool_1 = $__require("3f");
    var mix_tool_1 = $__require("40");
    var post_processes_tool_1 = $__require("41");
    var custom_tool_2 = $__require("42");
    var texture_tool_1 = $__require("43");
    var brick_tool_1 = $__require("44");
    var cloud_tool_1 = $__require("46");
    var fire_tool_2 = $__require("47");
    var grass_tool_1 = $__require("48");
    var marble_tool_1 = $__require("49");
    var normal_tool_1 = $__require("4a");
    var perlin_tool_1 = $__require("4b");
    var road_tool_1 = $__require("4c");
    var wood_tool_1 = $__require("4d");
    var ground_tool_1 = $__require("4e");
    var environment_helper_tool_1 = $__require("4f");
    var undo_redo_1 = $__require("18");
    var EditorInspector = /** @class */function () {
        /**
         * Constructor
         * @param editor: the editor's reference
         */
        function EditorInspector(editor, rootDiv) {
            var _this = this;
            this.editor = editor;
            // Public members
            this.tools = [];
            this.currentTools = [];
            this.currentObject = null;
            // Protected members
            this.lastTabName = null;
            // Configure div
            this.root = rootDiv || 'EDITION';
            // Add tabs
            // TODO: move to ../gui/tabs.ts
            this.tabs = $('#' + this.root).w2tabs({
                name: 'EDITION'
            });
            // Add tools
            this.addTool(new environment_helper_tool_1.default());
            this.addTool(new scene_tool_1.default());
            this.addTool(new node_tool_1.default());
            this.addTool(new physics_tool_1.default());
            this.addTool(new light_tool_1.default());
            this.addTool(new render_target_tool_1.default());
            this.addTool(new particle_system_tool_1.default());
            this.addTool(new sound_tool_1.default());
            this.addTool(new animation_tool_1.default());
            this.addTool(new skeleton_tool_1.default());
            this.addTool(new standard_tool_1.default());
            this.addTool(new pbr_tool_1.default());
            this.addTool(new pbr_metallic_roughness_tool_1.default());
            this.addTool(new pbr_specular_glossiness_tool_1.default());
            this.addTool(new water_tool_1.default());
            this.addTool(new custom_tool_1.default());
            this.addTool(new sky_tool_1.default());
            this.addTool(new fire_tool_1.default());
            this.addTool(new cell_tool_1.default());
            this.addTool(new grid_tool_1.default());
            this.addTool(new tri_planar_tool_1.default());
            this.addTool(new terrain_tool_1.default());
            this.addTool(new lava_tool_1.default());
            this.addTool(new fur_tool_1.default());
            this.addTool(new mix_tool_1.default());
            this.addTool(new post_processes_tool_1.default());
            this.addTool(new custom_tool_2.default());
            // TODO: wait for parse and serialize for GUI
            // this.addTool(new GuiImageTool());
            this.addTool(new texture_tool_1.default());
            this.addTool(new brick_tool_1.default());
            this.addTool(new cloud_tool_1.default());
            this.addTool(new fire_tool_2.default());
            this.addTool(new grass_tool_1.default());
            this.addTool(new marble_tool_1.default());
            this.addTool(new normal_tool_1.default());
            this.addTool(new perlin_tool_1.default());
            this.addTool(new road_tool_1.default());
            this.addTool(new wood_tool_1.default());
            this.addTool(new ground_tool_1.default());
            // Events
            this.editor.core.onSelectObject.add(function (node) {
                return _this.setObject(node);
            });
        }
        /**
         * Resizes the edition tools
         * @param width the width of the panel
         */
        EditorInspector.prototype.resize = function (width) {
            this.tools.forEach(function (t) {
                if (t.tool && t.tool.element) {
                    t.tool.element.width = width;
                }
            });
        };
        /**
         * Add the given tool (IEditionTool)
         * @param tool the tool to add
         */
        EditorInspector.prototype.addTool = function (tool) {
            var _this = this;
            var current = this.root;
            // Create container
            //$('#' + current).append('<div id="' + tool.divId + '" style="width: 100%; height: 100%"></div>');
            $('#' + current).append('<div id="' + tool.divId + '"></div>');
            $('#' + tool.divId).hide();
            // Add tab
            this.tabs.add({
                id: tool.divId,
                caption: tool.tabName,
                closable: false,
                onClick: function (event) {
                    return _this.changeTab(event.target);
                }
            });
            this.tabs.hide(tool.divId);
            // Add & configure tool
            tool.editor = this.editor;
            this.tools.push(tool);
            // Last tab name?
            if (!this.lastTabName) this.lastTabName = tool.tabName;
        };
        /**
         * Sets the object to edit
         * @param object the object to edit
         */
        EditorInspector.prototype.setObject = function (object) {
            var _this = this;
            this.currentTools = [];
            var lastTool = null;
            this.tools.forEach(function (t) {
                // Clear tool
                t.clear();
                // Check if supported then draw the tool, or hide if
                // not supported
                if (t.isSupported(object)) {
                    // Show
                    $('#' + t.divId).show();
                    _this.tabs.show(t.divId);
                    t.update(object);
                    if (t.divId === _this.lastTabName) lastTool = t;
                    // Manage undo / redo
                    t.tool.onFinishChange(t.tool.element, function (property, result, object, initialValue) {
                        undo_redo_1.default.Push({ baseObject: t.object, property: property, to: result, from: initialValue, object: object });
                    });
                    _this.currentTools.push(t);
                } else {
                    // Hide
                    $('#' + t.divId).hide();
                    _this.tabs.hide(t.divId);
                }
            });
            // Last tool
            lastTool = lastTool || this.currentTools[0];
            if (lastTool) {
                this.changeTab(lastTool.divId);
                this.tabs.select(lastTool.divId);
            }
            // Current object
            this.currentObject = object;
        };
        /**
         * Refresh the edition tool
         */
        EditorInspector.prototype.refresh = function () {
            this.setObject(this.currentObject);
        };
        /**
         * Updates the display of all visible edition tools
         */
        EditorInspector.prototype.updateDisplay = function () {
            this.currentTools.forEach(function (t) {
                return t.tool.updateDisplay();
            });
        };
        /**
         * When a tab changed
         * @param target the target tab Id
         */
        EditorInspector.prototype.changeTab = function (target) {
            var _this = this;
            this.tools.forEach(function (t) {
                var container = $('#' + t.divId);
                if (t.divId === target) {
                    container.show();
                    _this.lastTabName = target;
                    t.tool.element.open();
                } else container.hide();
            });
            // Hack hack hack, makes dat.gui working better
            // window.dispatchEvent(new Event('resize'));
        };
        return EditorInspector;
    }();
    exports.default = EditorInspector;

});
$__System.registerDynamic("51", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var EditorEditPanel = /** @class */function () {
        /**
         * Constructor
         * @param editor: the editor reference
         */
        function EditorEditPanel(editor) {
            this.editor = editor;
            // Protected members
            this.currentPlugin = null;
        }
        /**
         * Adds the given plugin to the
         * @param plugin the plugin to add
         */
        EditorEditPanel.prototype.addPlugin = function (pluginUrl) {
            var _this = this;
            // Add component
            var plugin = this.editor.plugins[pluginUrl];
            this.editor.resizableLayout.addPanelToStack('edit-panel', {
                type: 'component',
                title: plugin.name,
                componentName: plugin.name,
                html: function () {
                    var plugin = _this.editor.plugins[pluginUrl];
                    return plugin.divElement;
                },
                onClose: function () {
                    return __awaiter(_this, void 0, void 0, function () {
                        var plugin, first, tabsCount;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    plugin = this.editor.plugins[pluginUrl];
                                    // Remove plugin
                                    return [4 /*yield*/, this.editor.removePlugin(plugin)];
                                case 1:
                                    // Remove plugin
                                    _a.sent();
                                    first = Object.keys(this.editor.plugins)[0];
                                    if (!first) return [3 /*break*/, 3];
                                    return [4 /*yield*/, this.showPlugin(this.editor.plugins[first])];
                                case 2:
                                    _a.sent();
                                    return [3 /*break*/, 4];
                                case 3:
                                    tabsCount = this.editor.resizableLayout.getTabsCount('edit-panel');
                                    this.editor.resizableLayout.setPanelSize('edit-panel', tabsCount === 0 ? 0 : 15);
                                    _a.label = 4;
                                case 4:
                                    return [2 /*return*/];
                            }
                        });
                    });
                },
                onClick: function () {
                    var plugin = _this.editor.plugins[pluginUrl];
                    _this._onChangeTab(plugin, false);
                }
            });
            this.editor.resizableLayout.setPanelSize('edit-panel', 50);
        };
        /**
         * Shows the given plugin
         * @param plugin: the plugin to show
         * @param params: parameters to send to the plugin (onShow)
         */
        EditorEditPanel.prototype.showPlugin = function (plugin) {
            var params = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                params[_i - 1] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!plugin) return [2 /*return*/];
                            // Show tab
                            this.editor.resizableLayout.showPanelTab(plugin.name);
                            return [4 /*yield*/, this._onChangeTab.apply(this, [plugin, false].concat(params))];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        // On the tab changed
        EditorEditPanel.prototype._onChangeTab = function (plugin, firstShow) {
            var params = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                params[_i - 2] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.currentPlugin && this.currentPlugin.onHide)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.currentPlugin.onHide()];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            this.currentPlugin = plugin;
                            if (!(!firstShow && plugin.onShow)) return [3 /*break*/, 4];
                            return [4 /*yield*/, plugin.onShow.apply(plugin, params)];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4:
                            return [2 /*return*/];
                    }
                });
            });
        };
        // Static members
        EditorEditPanel.PluginCount = 0;
        return EditorEditPanel;
    }();
    exports.default = EditorEditPanel;

});
$__System.registerDynamic("52", ["24"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var layout_1 = $__require("24");
    var Stats = /** @class */function () {
        /**
         * Constructor
         * @param editor the editor reference
         */
        function Stats(editor) {
            this.frameInterval = 10;
            // Private members
            this._frameCount = 0;
            this.editor = editor;
            // Layout
            this.layout = new layout_1.default('STATS');
            this.layout.panels = [{ type: 'left', size: '50%', content: '<div id="STATS-RENDERING" style="width: 100%; height: calc(100% - 100px);"></div>' }, { type: 'main', size: '50%', content: '<div id="SCENE-RENDERING" style="width: 100%; height: calc(100% - 100px);"></div>' }];
            this.layout.build('STATS');
            // Rendering divs
            this.renderingDiv = $('#STATS-RENDERING');
            this.averageFPS = $('<h4 style="text-align: center;"></h4>');
            this.instantaneousFPS = $('<h4 style="text-align: center;"></h4>');
            this.averageFrameTime = $('<h4 style="text-align: center;"></h4>');
            this.renderingDiv.append('<h1>Rendering</h1>');
            this.renderingDiv.append(this.averageFPS);
            this.renderingDiv.append(this.instantaneousFPS);
            this.renderingDiv.append(this.averageFrameTime);
            // Scene divs
            this.sceneDiv = $('#SCENE-RENDERING');
            this.texturesCount = $('<h4 style="text-align: center;"></h4>');
            this.materialsCount = $('<h4 style="text-align: center;"></h4>');
            this.compiledEffects = $('<h4 style="text-align: center;"></h4>');
            this.sceneDiv.append('<h1>Scene</h1>');
            this.sceneDiv.append(this.texturesCount);
            this.sceneDiv.append(this.materialsCount);
            this.sceneDiv.append(this.compiledEffects);
        }
        /**
         * Update the stats
         */
        Stats.prototype.updateStats = function () {
            var _this = this;
            var engine = this.editor.core.engine;
            var scene = this.editor.core.scene;
            scene.registerAfterRender(function () {
                _this._frameCount++;
                if (_this._frameCount < _this.frameInterval) return;
                _this.averageFPS.text('Average FPS: ' + engine.performanceMonitor.averageFPS.toFixed(0));
                _this.instantaneousFPS.text('Instantanous FPS: ' + engine.performanceMonitor.instantaneousFPS.toFixed(0));
                _this.averageFrameTime.text('Average Frame Time: ' + engine.performanceMonitor.averageFrameTime.toFixed(0));
                _this.texturesCount.text('Textures Count: ' + scene.textures.length);
                _this.materialsCount.text('Materials Count: ' + scene.materials.length);
                _this.compiledEffects.text('Compiled Effects: ' + Object.keys(engine['_compiledEffects']).length);
                _this._frameCount = 0;
            });
            engine.performanceMonitor;
        };
        return Stats;
    }();
    exports.default = Stats;

});
$__System.registerDynamic("53", ["c", "e"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var tools_1 = $__require("e");
    var PrefabsHelpers = /** @class */function () {
        function PrefabsHelpers() {}
        /**
         * Creates a preview of the prefab (base64 image)
         * @param d the asset element
         * @param engine the babylonjs engine
         */
        PrefabsHelpers.CreatePreview = function (d, engine) {
            return __awaiter(this, void 0, void 0, function () {
                var serialization, file, canvas, scene, camera, light;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            serialization = babylonjs_1.SceneSerializer.SerializeMesh(d.data.sourceNode, false, true);
                            file = tools_1.default.CreateFile(tools_1.default.ConvertStringToUInt8Array(JSON.stringify(serialization)), d.name.toLowerCase() + '.babylon');
                            canvas = engine.getRenderingCanvas();
                            scene = new babylonjs_1.Scene(engine);
                            scene.clearColor.set(0, 0, 0, 1);
                            camera = new babylonjs_1.FreeCamera('PrefabAssetCamera', babylonjs_1.Vector3.Zero(), scene);
                            light = new babylonjs_1.PointLight('PrefabAssetLight', babylonjs_1.Vector3.Zero(), scene);
                            // Add file
                            babylonjs_1.FilesInput.FilesToLoad[file.name] = file;
                            return [4 /*yield*/, new Promise(function (resolve) {
                                babylonjs_1.SceneLoader.Append('file:', file.name, scene, function () {
                                    engine.runRenderLoop(function () {
                                        scene.render();
                                        if (scene.getWaitingItemsCount() === 0) {
                                            // Exclude particle systems for instance
                                            if (d.data.sourceNode instanceof babylonjs_1.ParticleSystem) return;
                                            // Find camera position
                                            var minimum_1 = new babylonjs_1.Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
                                            var maximum_1 = new babylonjs_1.Vector3(Number.MIN_VALUE, Number.MIN_VALUE, Number.MIN_VALUE);
                                            var descendants = [d.data.sourceNode].concat(d.data.sourceNode.getDescendants(false, function (n) {
                                                return n instanceof babylonjs_1.Mesh;
                                            }));
                                            descendants.forEach(function (d) {
                                                if (!(d instanceof babylonjs_1.Mesh)) return;
                                                var b = d._boundingInfo;
                                                maximum_1.x = Math.max(b.maximum.x, maximum_1.x);
                                                maximum_1.y = Math.max(b.maximum.y, maximum_1.y);
                                                maximum_1.z = Math.max(b.maximum.z, maximum_1.z);
                                                minimum_1.x = Math.min(b.minimum.x, minimum_1.x);
                                                minimum_1.y = Math.min(b.minimum.y, minimum_1.y);
                                                minimum_1.z = Math.min(b.minimum.z, minimum_1.z);
                                            });
                                            var center = babylonjs_1.Vector3.Center(minimum_1, maximum_1);
                                            var distance = babylonjs_1.Vector3.Distance(minimum_1, maximum_1) * 0.5;
                                            camera.position = d.data.sourceNode.position.add(maximum_1).add(new babylonjs_1.Vector3(distance, distance, distance));
                                            camera.setTarget(d.data.sourceNode.position.add(center));
                                            light.position = camera.position.clone();
                                            // Render
                                            scene.render();
                                            d.img = canvas.toDataURL('image/png');
                                            engine.stopRenderLoop();
                                            resolve();
                                        }
                                    });
                                });
                                engine.hideLoadingUI();
                            })];
                        case 1:
                            _a.sent();
                            // Remove file
                            delete babylonjs_1.FilesInput.FilesToLoad[file.name];
                            // Dispose
                            scene.dispose();
                            return [2 /*return*/];
                    }
                });
            });
        };
        return PrefabsHelpers;
    }();
    exports.default = PrefabsHelpers;

});
$__System.registerDynamic("54", ["c", "11", "e", "17", "53"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var scene_factory_1 = $__require("11");
    var tools_1 = $__require("e");
    var dialog_1 = $__require("17");
    var helpers_1 = $__require("53");
    var PrefabAssetComponent = /** @class */function () {
        /**
         * Constructor
         * @param editor the editor reference
         */
        function PrefabAssetComponent(editor) {
            this.editor = editor;
            // Public members
            this.id = 'prefabs';
            this.assetsCaption = 'Prefabs';
            this.size = 100;
            this.datas = [];
            this.previewCanvas = null;
            this.previewEngine = null;
        }
        /**
         * Creates a new prefab
         * @param sourceMesh the source mesh for the new prefab asset. Can be a single mesh or a root mesh
         */
        PrefabAssetComponent.prototype.createPrefab = function (sourceNode) {
            return __awaiter(this, void 0, void 0, function () {
                var descendants, sourceNodes, scene, _loop_1, _i, _a, ps, asset, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            descendants = sourceNode.getDescendants(false, function (n) {
                                return n instanceof babylonjs_1.Node;
                            });
                            sourceNodes = descendants.length > 1 || descendants[0] !== sourceNode ? [sourceNode].concat(descendants) : [sourceNode];
                            scene = this.editor.core.scene;
                            _loop_1 = function (ps) {
                                var emitter = sourceNodes.find(function (n) {
                                    return n === ps.emitter;
                                });
                                if (emitter) sourceNodes.push(ps);
                            };
                            for (_i = 0, _a = scene.particleSystems; _i < _a.length; _i++) {
                                ps = _a[_i];
                                _loop_1(ps);
                            }
                            _b = {};
                            return [4 /*yield*/, dialog_1.default.CreateWithTextInput('Prefab name?')];
                        case 1:
                            asset = (_b.name = _c.sent(), _b.data = {
                                isPrefab: true,
                                nodes: sourceNodes.map(function (m) {
                                    return m.name;
                                }),
                                nodeIds: sourceNodes.map(function (m) {
                                    return m.id;
                                }),
                                instances: {},
                                sourceNodes: sourceNodes,
                                sourceNode: sourceNode,
                                sourceInstances: {}
                            }, _b);
                            // Configure dictionaries
                            sourceNodes.forEach(function (m) {
                                asset.data.instances[m.name] = [];
                                asset.data.sourceInstances[m.name] = [];
                            });
                            // Add asset
                            this.onAddAsset(asset);
                            this.editor.assets.refresh(this.id);
                            return [2 /*return*/, asset];
                    }
                });
            });
        };
        /**
         * On the user adds a new prefab asset
         * @param asset the asset to add in the collection
         */
        PrefabAssetComponent.prototype.onAddAsset = function (asset) {
            this.datas.push(asset);
            this.buildInstances([asset]);
        };
        /**
         * On the user removes a prefab from his library
         * @param asset the asset to remove
         */
        PrefabAssetComponent.prototype.onRemoveAsset = function (asset) {
            // Serialize assets to save instances configuration
            // and allow the undo/redo
            var saved = this.onSerializeAssets();
            var assetIndex = this.datas.indexOf(asset);
            if (assetIndex !== -1) asset.data.instances = saved[assetIndex].data.instances;
            // Remove all instances in the scene
            var instancesDictionary = asset.data.sourceInstances;
            for (var key in instancesDictionary) {
                var instances = instancesDictionary[key];
                instances.forEach(function (i) {
                    return i.dispose();
                });
                instancesDictionary[key] = [];
            }
            // Remove from library
            var index = this.datas.indexOf(asset);
            if (index !== -1) this.datas.splice(index, 1);
            // Update graph
            this.editor.graph.clear();
            this.editor.graph.fill();
        };
        /**
         * On the user drops an asset in the scene
         * @param targetMesh the mesh under the pointer
         * @param asset the asset being dropped
         * @param pickInfo the pick info once the user dropped the asset
         */
        PrefabAssetComponent.prototype.onDragAndDropAsset = function (targetMesh, asset, pickInfo) {
            var _this = this;
            // Parent
            var parent = asset.data.sourceNode instanceof babylonjs_1.Mesh ? asset.data.sourceNode.createInstance(asset.name + ' (Prefab)') : this._cloneNode(asset.data.sourceNode);
            parent.id = babylonjs_1.Tools.RandomId();
            if (parent['position']) parent['position'].copyFrom(pickInfo.pickedPoint);
            parent.doNotSerialize = true;
            babylonjs_1.Tags.AddTagsTo(parent, 'prefab-master');
            asset.data.sourceInstances[asset.data.sourceNode.name].push(parent);
            // Descendants
            if (asset.data.sourceNodes.length > 1) {
                asset.data.sourceNodes.forEach(function (m, index) {
                    // Skip parent
                    if (index === 0) return;
                    var instance = m instanceof babylonjs_1.Mesh ? m.createInstance(asset.name) : _this._cloneNode(m);
                    instance.id = babylonjs_1.Tools.RandomId();
                    instance['parent'] = instance['emitter'] = parent;
                    instance.doNotSerialize = true;
                    // Register instance
                    babylonjs_1.Tags.AddTagsTo(instance, 'prefab');
                    asset.data.sourceInstances[m.name].push(instance);
                });
            }
            scene_factory_1.default.AddToGraph(this.editor, parent);
            babylonjs_1.Tags.RemoveTagsFrom(parent, 'added');
            // Select
            if (parent instanceof babylonjs_1.AbstractMesh) this.editor.scenePicker.setGizmoAttachedMesh(parent);
            this.editor.core.onSelectObject.notifyObservers(parent);
        };
        /**
         * On the user saves the editor project
         */
        PrefabAssetComponent.prototype.onSerializeAssets = function () {
            return this.datas.map(function (d) {
                var instances = {};
                d.data.sourceNodes.forEach(function (m) {
                    instances[m.name] = [];
                    // Meshes instances?
                    if (m instanceof babylonjs_1.Mesh) {
                        m.instances.forEach(function (i) {
                            if (babylonjs_1.Tags.MatchesQuery(i, 'prefab') || babylonjs_1.Tags.MatchesQuery(i, 'prefab-master')) instances[m.name].push(i.serialize());
                        });
                    }
                    // Lights, etc.
                    else {
                            d.data.sourceInstances[m.name].forEach(function (i) {
                                if (babylonjs_1.Tags.MatchesQuery(i, 'prefab') || babylonjs_1.Tags.MatchesQuery(i, 'prefab-master')) {
                                    var serializationObject = i.serialize();
                                    serializationObject.customType = tools_1.default.GetConstructorName(i);
                                    instances[m.name].push(serializationObject);
                                }
                            });
                        }
                });
                return {
                    name: d.name,
                    img: d.img,
                    data: {
                        isPrefab: true,
                        nodes: d.data.sourceNodes.map(function (m) {
                            return m.name;
                        }),
                        nodeIds: d.data.sourceNodes.map(function (m) {
                            return m.id;
                        }),
                        instances: instances
                    }
                };
            });
        };
        /**
         * On the user loads the editor project
         * @param data the previously saved data
         */
        PrefabAssetComponent.prototype.onParseAssets = function (data) {
            this.datas = data;
            var count = this.buildInstances(this.datas);
            if (count) {
                this.editor.graph.clear();
                this.editor.graph.fill();
            }
        };
        /**
         * On the assets panel requires the assets stored in this
         * asset component
         */
        PrefabAssetComponent.prototype.onGetAssets = function () {
            return __awaiter(this, void 0, void 0, function () {
                var promises, _loop_2, this_1, _i, _a, d;
                var _this = this;
                return __generator(this, function (_b) {
                    // Create engine
                    if (!this.previewCanvas) {
                        this.previewCanvas = tools_1.default.CreateElement('canvas', 'PrefabAssetComponentCanvas', {
                            'width': '100px',
                            'height': '100px',
                            'visibility': 'hidden'
                        });
                        document.body.appendChild(this.previewCanvas);
                    }
                    if (!this.previewEngine) this.previewEngine = new babylonjs_1.Engine(this.previewCanvas);
                    promises = [];
                    _loop_2 = function (d) {
                        if (!d.img) {
                            promises.push(helpers_1.default.CreatePreview(d, this_1.previewEngine).then(function () {
                                var adp = _this.editor.assets.getAssetPreviewData(d);
                                if (adp) {
                                    adp.img.src = d.img;
                                    w2utils.unlock(adp.parent);
                                }
                            }));
                            setTimeout(function () {
                                var adp = _this.editor.assets.getAssetPreviewData(d);
                                if (adp) {
                                    adp.img.src = '';
                                    w2utils.lock(adp.parent, '', true);
                                }
                            }, 0);
                        }
                    };
                    this_1 = this;
                    for (_i = 0, _a = this.datas; _i < _a.length; _i++) {
                        d = _a[_i];
                        _loop_2(d);
                    }
                    // Dispose
                    Promise.all(promises).then(function () {
                        if (_this.previewEngine) {
                            _this.previewEngine.dispose();
                            _this.previewEngine = null;
                        }
                        if (_this.previewCanvas) {
                            _this.previewCanvas.remove();
                            _this.previewCanvas = null;
                        }
                    });
                    return [2 /*return*/, this.datas];
                });
            });
        };
        /**
         * On the user wants to show the context menu on the asset
         */
        PrefabAssetComponent.prototype.onContextMenu = function () {
            var _this = this;
            return [{
                // Rename
                id: 'rename',
                text: 'Rename...',
                img: 'icon-export',
                callback: function (asset) {
                    return __awaiter(_this, void 0, void 0, function () {
                        var name, adp;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    return [4 /*yield*/, dialog_1.default.CreateWithTextInput('Asset name...')];
                                case 1:
                                    name = _a.sent();
                                    asset.name = name;
                                    adp = this.editor.assets.getAssetPreviewData(asset);
                                    adp.title.innerText = name;
                                    return [2 /*return*/];
                            }
                        });
                    });
                }
            }];
        };
        /**
         * Builds the instances of the given asset
         * @param data the asset's data
         */
        PrefabAssetComponent.prototype.buildInstances = function (data) {
            var _this = this;
            var scene = this.editor.core.scene;
            var count = 0;
            data.forEach(function (d) {
                // Misc.
                d.data.sourceNodes = [];
                d.data.sourceInstances = {};
                // Get source mesh
                var source = _this._getNode(d.data.nodeIds[0], d.data.nodes[0]);
                if (!source) return;
                d.data.sourceNode = source;
                d.data.sourceNodes.push(source);
                // Create master instances
                var parents = d.data.instances[source.name];
                d.data.sourceInstances[source.name] = [];
                parents.forEach(function (p) {
                    var parent = source instanceof babylonjs_1.Mesh ? source.createInstance(p.name) : _this._cloneNode(source, p);
                    parent.id = p.id;
                    parent.doNotSerialize = true;
                    d.data.sourceInstances[source.name].push(parent);
                    babylonjs_1.Tags.AddTagsTo(parent, 'prefab-master');
                    if (parent instanceof babylonjs_1.InstancedMesh) _this._configureInstance(p, parent);
                    count++;
                });
                var _loop_3 = function (i) {
                    var node = _this._getNode(d.data.nodeIds[i], d.data.nodes[i]);
                    if (!node) return "continue";
                    d.data.sourceNodes.push(node);
                    d.data.sourceInstances[node.name] = [];
                    d.data.instances[node.name].forEach(function (inst) {
                        var instance = node instanceof babylonjs_1.Mesh ? node.createInstance(inst.name) : _this._cloneNode(node, inst);
                        instance.id = inst.id;
                        instance['parent'] = instance['emitter'] = _this.editor.core.scene.getNodeByID(inst.parentId);
                        instance.doNotSerialize = true;
                        d.data.sourceInstances[node.name].push(instance);
                        babylonjs_1.Tags.AddTagsTo(instance, 'prefab');
                        if (instance instanceof babylonjs_1.InstancedMesh) _this._configureInstance(inst, instance);
                        count++;
                    });
                };
                // Recreate children instances
                for (var i = 1; i < d.data.nodeIds.length; i++) {
                    _loop_3(i);
                }
                // Clean data
                d.data.instances = {};
            });
            // Return number of instances created
            return count;
        };
        /**
         * Sets all the instances serializable or not
         * @param serializable if the instances are serializable
         */
        PrefabAssetComponent.prototype.setSerializable = function (serializable) {
            this.datas.forEach(function (d) {
                for (var key in d.data.sourceInstances) {
                    var instances = d.data.sourceInstances[key];
                    instances.forEach(function (i) {
                        return i.doNotSerialize = !serializable;
                    });
                }
            });
        };
        // Clones the given node
        PrefabAssetComponent.prototype._cloneNode = function (node, prefab) {
            if (prefab && prefab.customType) {
                var clone = BABYLON[prefab.customType].Parse(prefab, this.editor.core.scene, 'file:');
                return clone;
            }
            if (node.clone) {
                var clone = node.clone(node.name + ' Cloned', node.parent);
                // Fix particle texture
                if (clone instanceof babylonjs_1.ParticleSystem) {
                    clone.particleTexture && clone.particleTexture.dispose();
                    clone.particleTexture = node.particleTexture;
                }
                return clone;
            }
            return null;
        };
        // Returns the node identified by the given id or name
        PrefabAssetComponent.prototype._getNode = function (id, name) {
            var scene = this.editor.core.scene;
            return scene.getNodeByID(id) || scene.getNodeByName(name) || scene.getParticleSystemByID(id);
        };
        // Configures the given instance
        PrefabAssetComponent.prototype._configureInstance = function (data, instance) {
            instance.id = instance.id || babylonjs_1.Tools.RandomId();
            instance.position = babylonjs_1.Vector3.FromArray(data.position || data._position);
            instance.scaling = babylonjs_1.Vector3.FromArray(data.scaling || data._scaling);
            instance.checkCollisions = instance.sourceMesh.checkCollisions;
            if (data.rotationQuaternion || data._rotationQuaternion) {
                instance.rotationQuaternion = babylonjs_1.Quaternion.FromArray(data.rotationQuaternion || data._rotationQuaternion);
            } else if (data.rotation || data._rotation) {
                instance.rotation = babylonjs_1.Vector3.FromArray(data.rotation || data._rotation);
            }
            if (data.animations) {
                for (var i = 0; i < data.animations.length; i++) {
                    var parsedAnimation = data.animations[i];
                    instance.animations.push(babylonjs_1.Animation.Parse(parsedAnimation));
                }
            }
        };
        return PrefabAssetComponent;
    }();
    exports.default = PrefabAssetComponent;

});
$__System.registerDynamic("55", ["c", "e", "18", "56", "24", "16", "54", "a"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var tools_1 = $__require("e");
    var undo_redo_1 = $__require("18");
    var context_menu_1 = $__require("56");
    var layout_1 = $__require("24");
    var toolbar_1 = $__require("16");
    var asset_component_1 = $__require("54");
    var babylonjs_editor_1 = $__require("a");
    var EditorAssets = /** @class */function () {
        /**
         * Constructor
         * @param editor the editore reference
         */
        function EditorAssets(editor) {
            var _this = this;
            this.editor = editor;
            this.components = [];
            this.assetPreviewDatas = [];
            // Protected members
            this.currentComponent = null;
            this.emptyTextNode = null;
            // Context menu
            this.contextMenu = new context_menu_1.default('AssetContextMenu', {
                width: 200,
                height: 55,
                search: false
            });
            // Layout
            this.layout = new layout_1.default('ASSETS-LAYOUT');
            this.layout.panels = [{ type: 'top', size: 30, content: '<div id="ASSETS-TOOLBAR" style="width: 100%; height: 100%;"></div>', resizable: false }, { type: 'main', content: '<div id="ASSETS-CONTENT" style="width: 100%; height: 100%;"></div>' }];
            this.layout.build('ASSETS');
            // Toolbar
            this.toolbar = new toolbar_1.default('ASSETS-TOOLBAR');
            this.toolbar.items = [{ type: 'button', id: 'add', text: 'Add', img: 'icon-add' }];
            this.toolbar.onClick = function (id) {
                return _this.toolbarClicked(id);
            };
            this.toolbar.build('ASSETS-TOOLBAR');
            // Tabs
            this.tabs = $('#ASSETS-CONTENT').w2tabs({
                name: 'ASSETS-CONTENT'
            });
            // Create components
            this.prefabs = new asset_component_1.default(editor);
            // Add components tabs
            this.addDefaultComponents();
            // Finalize
            this.refresh();
        }
        /**
         * Clears the assets components
         */
        EditorAssets.prototype.clear = function () {
            var _this = this;
            this.components.forEach(function (c) {
                $('#' + c.id).remove();
                _this.tabs.remove(c.id);
            });
            this.components = [];
            this.assetPreviewDatas = [];
            this.currentComponent = null;
            if (this.emptyTextNode) {
                this.emptyTextNode.remove();
                this.emptyTextNode = null;
            }
            this.addDefaultComponents();
        };
        /**
         * Adds the default components
         */
        EditorAssets.prototype.addDefaultComponents = function () {
            this.addTab(this.prefabs);
        };
        /**
         * Refreshes the tabs
         */
        EditorAssets.prototype.refresh = function (id) {
            return __awaiter(this, void 0, void 0, function () {
                var file, _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!!EditorAssets._DefaultImageSource) return [3 /*break*/, 3];
                            return [4 /*yield*/, tools_1.default.CreateFileFromURL('assets/textures/waitlogo.png')];
                        case 1:
                            file = _b.sent();
                            _a = EditorAssets;
                            return [4 /*yield*/, tools_1.default.ReadFileAsBase64(file)];
                        case 2:
                            _a._DefaultImageSource = _b.sent();
                            _b.label = 3;
                        case 3:
                            // Empty?
                            if (this.components.length === 0) {
                                this.emptyTextNode = tools_1.default.CreateElement('h1', babylonjs_1.Tools.RandomId(), {
                                    'float': 'left',
                                    'left': '50%',
                                    'top': '50%',
                                    'transform': 'translate(-50%, -50%)',
                                    'overflow': 'hidden',
                                    'position': 'relative',
                                    'font-family': 'Roboto,sans-serif !important',
                                    'opacity': '0.5'
                                });
                                this.emptyTextNode.textContent = 'Empty';
                                $('#ASSETS-CONTENT').append(this.emptyTextNode);
                                return [2 /*return*/];
                            }
                            // Remove empty text
                            if (this.emptyTextNode) {
                                this.emptyTextNode.remove();
                                this.emptyTextNode = null;
                            }
                            // Refresh each component
                            this.components.forEach(function (c) {
                                return __awaiter(_this, void 0, void 0, function () {
                                    var assets, div, emptyTextNode, assetSize;
                                    var _this = this;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                if (id && c.id !== id) return [2 /*return*/];
                                                return [4 /*yield*/, c.onGetAssets()];
                                            case 1:
                                                assets = _a.sent();
                                                tools_1.default.SortAlphabetically(assets, 'name');
                                                div = $('#' + c.id);
                                                // Clear
                                                while (div[0].children.length > 0) div[0].children[0].remove();
                                                // Empty or not
                                                if (assets.length === 0) {
                                                    emptyTextNode = tools_1.default.CreateElement('h1', babylonjs_1.Tools.RandomId(), {
                                                        'float': 'left',
                                                        'left': '50%',
                                                        'top': '50%',
                                                        'transform': 'translate(-50%, -50%)',
                                                        'overflow': 'hidden',
                                                        'position': 'relative',
                                                        'font-family': 'Roboto,sans-serif !important',
                                                        'opacity': '0.5'
                                                    });
                                                    emptyTextNode.textContent = 'Empty';
                                                    $('#' + c.id).append(emptyTextNode);
                                                }
                                                assetSize = (c.size || 50) + 'px';
                                                assets.forEach(function (a) {
                                                    var parent = tools_1.default.CreateElement('div', c.id + a.name + 'div', {
                                                        'position': 'relative',
                                                        'width': assetSize,
                                                        'height': assetSize,
                                                        'float': 'left',
                                                        'margin': '10px'
                                                    });
                                                    var title = tools_1.default.CreateElement('small', a.name + 'text', {
                                                        'float': 'left',
                                                        'width': assetSize,
                                                        'left': '50%',
                                                        'top': '8px',
                                                        'transform': 'translate(-50%, -50%)',
                                                        'text-overflow': 'ellipsis',
                                                        'white-space': 'nowrap',
                                                        'overflow': 'hidden',
                                                        'position': 'relative'
                                                    });
                                                    var img = tools_1.default.CreateElement('img', a.name, {
                                                        'width': assetSize,
                                                        'height': assetSize
                                                    });
                                                    // Configure
                                                    title.innerText = a.name;
                                                    img.src = a.img || EditorAssets._DefaultImageSource;
                                                    // Events
                                                    img.addEventListener('click', function (ev) {
                                                        _this.assetPreviewDatas.forEach(function (apd) {
                                                            if (apd.img) {
                                                                apd.img.style.backgroundColor = '';
                                                                apd.img.style.borderRadius = '';
                                                            }
                                                        });
                                                        img.style.backgroundColor = 'rgba(0, 0, 0, 0.25)';
                                                        img.style.borderRadius = '10px';
                                                        _this.editor.core.onSelectAsset.notifyObservers(a.data);
                                                    });
                                                    img.addEventListener('contextmenu', function (ev) {
                                                        return _this.processContextMenu(ev, c, a);
                                                    });
                                                    img.addEventListener('dblclick', function (ev) {
                                                        return __awaiter(_this, void 0, void 0, function () {
                                                            var config;
                                                            return __generator(this, function (_a) {
                                                                switch (_a.label) {
                                                                    case 0:
                                                                        config = System.getConfig();
                                                                        if (!config.paths[c.id]) return [2 /*return*/];
                                                                        return [4 /*yield*/, this.editor.addEditPanelPlugin(c.id, false)];
                                                                    case 1:
                                                                        _a.sent();
                                                                        this.editor.core.onSelectAsset.notifyObservers(a.data);
                                                                        return [2 /*return*/];
                                                                }
                                                            });
                                                        });
                                                    });
                                                    // Drag'n'drop
                                                    if (c.onDragAndDropAsset) {
                                                        var dropListener_1 = _this.dragEnd(c, a);
                                                        img.addEventListener('dragstart', function () {
                                                            _this.editor.core.engine.getRenderingCanvas().addEventListener('drop', dropListener_1);
                                                        });
                                                        img.addEventListener('dragend', function () {
                                                            _this.editor.core.engine.getRenderingCanvas().removeEventListener('drop', dropListener_1);
                                                        });
                                                    }
                                                    // Add
                                                    parent.appendChild(img);
                                                    parent.appendChild(title);
                                                    div.append(parent);
                                                    // Register
                                                    _this.assetPreviewDatas.push({
                                                        asset: a,
                                                        img: img,
                                                        title: title,
                                                        parent: parent
                                                    });
                                                });
                                                return [2 /*return*/];
                                        }
                                    });
                                });
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Adds a new tab to draw components
         * @param component the component to add in assets panel
         */
        EditorAssets.prototype.addTab = function (component) {
            var _this = this;
            // Check if exists
            var exists = this.components.find(function (c) {
                return c === component;
            });
            if (exists) return;
            // Add tab's div
            $('#ASSETS-CONTENT').append('<div id="' + component.id + '" style="width: 100%; height: 100%; overflow: auto;"></div>');
            // Add tab
            this.tabs.add({
                id: component.id,
                caption: component.assetsCaption,
                closable: false,
                onClick: function (event) {
                    return _this.showTab(event.target);
                }
            });
            if (!this.currentComponent) this.currentComponent = component;else $('#' + component.id).hide();
            // Save component and refresh
            this.components.push(component);
            this.refresh(component.id);
        };
        /**
         * Shows the tab identified by the given id
         * @param id the id of the tab to show
         */
        EditorAssets.prototype.showTab = function (id) {
            if (this.currentComponent) $('#' + this.currentComponent.id).hide();
            this.currentComponent = this.components.find(function (c) {
                return c.id === id;
            });
            $('#' + this.currentComponent.id).show();
            this.tabs.select(id);
        };
        /**
         * Returns the asset preview data from the given asset element
         * @param asset the source asset
         */
        EditorAssets.prototype.getAssetPreviewData = function (asset) {
            return this.assetPreviewDatas.find(function (apd) {
                return apd.asset === asset;
            });
        };
        /**
         * Returns the drag end event function
         * @param component the source component
         * @param asset the dropped asset
         */
        EditorAssets.prototype.dragEnd = function (component, asset) {
            var _this = this;
            return function (ev) {
                var scene = _this.editor.core.scene;
                var pick = scene.pick(ev.offsetX, ev.offsetY);
                if (!pick.pickedMesh) return;
                component.onDragAndDropAsset(pick.pickedMesh, asset, pick);
                _this.editor.core.onSelectObject.notifyObservers(pick.pickedMesh);
            };
        };
        /**
         * On the user clicks on the toolbar
         * @param id the id of the clicked item
         */
        EditorAssets.prototype.toolbarClicked = function (id) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, name_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = id;
                            switch (_a) {
                                case 'add':
                                    return [3 /*break*/, 1];
                            }
                            return [3 /*break*/, 5];
                        case 1:
                            if (!this.currentComponent.onCreateAsset) return [3 /*break*/, 4];
                            return [4 /*yield*/, babylonjs_editor_1.Dialog.CreateWithTextInput('New asset name')];
                        case 2:
                            name_1 = _b.sent();
                            return [4 /*yield*/, this.currentComponent.onCreateAsset(name_1)];
                        case 3:
                            _b.sent();
                            this.refresh(this.currentComponent.id);
                            _b.label = 4;
                        case 4:
                            return [3 /*break*/, 6];
                        case 5:
                            return [3 /*break*/, 6];
                        case 6:
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Processes the context menu for the clicked item
         * @param ev the mouse event object
         * @param component the component being modified
         * @param asset the target asset
         */
        EditorAssets.prototype.processContextMenu = function (ev, component, asset) {
            var _this = this;
            if (!component.onRemoveAsset) return;
            // Configure
            this.contextMenu.options.height = 55;
            this.contextMenu.tree.clear();
            var items = component.onContextMenu && component.onContextMenu() || [];
            component.onRenameAsset && items.push({ id: 'rename', text: 'Rename...', img: 'icon-export' });
            items.push({ id: 'remove', text: 'Remove' });
            items.forEach(function (i) {
                _this.contextMenu.tree.add({ id: i.id, text: i.text, img: i.img });
                _this.contextMenu.options.height += 12.5;
            });
            // Events
            this.contextMenu.tree.onClick = function (id) {
                return __awaiter(_this, void 0, void 0, function () {
                    var customItem, _a, oldName_1, newName_1;
                    var _this = this;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                customItem = items.find(function (i) {
                                    return i.callback && i.id === id;
                                });
                                if (customItem) {
                                    customItem.callback(asset);
                                    return [2 /*return*/, this.contextMenu.hide()];
                                }
                                _a = id;
                                switch (_a) {
                                    case 'rename':
                                        return [3 /*break*/, 1];
                                    case 'remove':
                                        return [3 /*break*/, 3];
                                }
                                return [3 /*break*/, 4];
                            case 1:
                                if (!component.onRenameAsset) return [2 /*return*/];
                                oldName_1 = asset.name;
                                return [4 /*yield*/, babylonjs_editor_1.Dialog.CreateWithTextInput('New asset name')];
                            case 2:
                                newName_1 = _b.sent();
                                asset.name = newName_1;
                                component.onRenameAsset(asset, newName_1);
                                undo_redo_1.default.Push({
                                    fn: function (type) {
                                        if (type === 'from') component.onRenameAsset(asset, oldName_1);else component.onRenameAsset(asset, newName_1);
                                        _this.refresh();
                                        _this.showTab(component.id);
                                    }
                                });
                                return [3 /*break*/, 4];
                            case 3:
                                if (component.onAddAsset) {
                                    undo_redo_1.default.Push({
                                        fn: function (type) {
                                            if (type === 'from') {
                                                component.onAddAsset(asset);
                                                _this.editor.core.onAddObject.notifyObservers(asset.data);
                                            } else {
                                                component.onRemoveAsset(asset);
                                                _this.editor.core.onSelectAsset.notifyObservers(null);
                                                _this.editor.core.onRemoveObject.notifyObservers(asset.data);
                                            }
                                            _this.refresh();
                                            _this.showTab(component.id);
                                        }
                                    });
                                }
                                // Remove asset
                                component.onRemoveAsset(asset);
                                this.editor.core.onSelectAsset.notifyObservers(null);
                                this.editor.core.onRemoveObject.notifyObservers(asset.data);
                                return [3 /*break*/, 4];
                            case 4:
                                // Refresh assets
                                this.refresh();
                                // Remove context menu
                                this.contextMenu.hide();
                                return [2 /*return*/];
                        }
                    });
                });
            };
            // Show
            this.contextMenu.show(ev);
        };
        // Static members
        EditorAssets._DefaultImageSource = null;
        return EditorAssets;
    }();
    exports.default = EditorAssets;

});
$__System.registerDynamic("22", ["c", "18"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var undo_redo_1 = $__require("18");
    var GizmoType;
    (function (GizmoType) {
        GizmoType[GizmoType["NONE"] = 0] = "NONE";
        GizmoType[GizmoType["BOUNDING_BOX"] = 1] = "BOUNDING_BOX";
        GizmoType[GizmoType["POSITION"] = 2] = "POSITION";
        GizmoType[GizmoType["ROTATION"] = 3] = "ROTATION";
        GizmoType[GizmoType["SCALING"] = 4] = "SCALING";
    })(GizmoType = exports.GizmoType || (exports.GizmoType = {}));
    var ScenePicker = /** @class */function () {
        /**
         * Constructor
         * @param editor: the editor reference
         * @param canvas: the canvas to track
         */
        function ScenePicker(editor, scene, canvas) {
            // Protected members
            this.lastMesh = null;
            this.lastClickedMesh = null;
            this.lastX = 0;
            this.lastY = 0;
            this.onCanvasPointer = null;
            this.onCanvasBlur = null;
            this.onCanvasFocus = null;
            this.currentGizmo = null;
            // Private members
            this._enabled = true;
            this._gizmoType = GizmoType.NONE;
            this._gizmoDelta = 0;
            this._gizmoScaleDelta = null;
            this._gizmoPositionDelta = null;
            this._gizmoRotationDelta = null;
            this.canvas = canvas;
            this.scene = scene;
            this.editor = editor;
            scene.cameras.forEach(function (c) {
                c.detachControl(canvas);
                c.attachControl(canvas, true);
            });
            scene.meshes.forEach(function (m) {
                return m.isPickable = true;
            });
            // Gizmos
            this.gizmosLayer = new babylonjs_1.UtilityLayerRenderer(scene);
            this.gizmosLayer.utilityLayerScene.postProcessesEnabled = false;
            this.gizmosLayer.shouldRender = false;
            // Add events
            this.addEvents();
        }
        Object.defineProperty(ScenePicker.prototype, "enabled", {
            /**
             * Returns if the scene picker is enabled
             */
            get: function () {
                return this._enabled;
            },
            /**
             * Sets if the scene picker is enabled
             */
            set: function (value) {
                this._enabled = value;
                if (!value) {
                    this.gizmoType = GizmoType.NONE;
                    if (this.lastMesh) this.lastMesh.showBoundingBox = false;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ScenePicker.prototype, "gizmoType", {
            /**
             * Sets the gizmo type
             */
            set: function (value) {
                var _this = this;
                this._gizmoType = value;
                // Dispose and clear
                this.boundingBoxGizmo && this.boundingBoxGizmo.dispose();
                this.positionGizmo && this.positionGizmo.dispose();
                this.rotationGizmo && this.rotationGizmo.dispose();
                this.scalingGizmo && this.scalingGizmo.dispose();
                this.boundingBoxGizmo = this.positionGizmo = this.rotationGizmo = this.scalingGizmo = null;
                // Create gizmo
                switch (value) {
                    case GizmoType.BOUNDING_BOX:
                        this.currentGizmo = this.boundingBoxGizmo = new babylonjs_1.BoundingBoxGizmo(new babylonjs_1.Color3(1, 1, 1), this.gizmosLayer);
                        this.boundingBoxGizmo.rotationSphereSize = 0.25;
                        this.boundingBoxGizmo.scaleBoxSize = 0.4;
                        break;
                    case GizmoType.POSITION:
                        this.currentGizmo = this.positionGizmo = new babylonjs_1.PositionGizmo(this.gizmosLayer);
                        break;
                    case GizmoType.ROTATION:
                        this.currentGizmo = this.rotationGizmo = new babylonjs_1.RotationGizmo(this.gizmosLayer);
                        break;
                    case GizmoType.SCALING:
                        this.currentGizmo = this.scalingGizmo = new babylonjs_1.ScaleGizmo(this.gizmosLayer);
                        break;
                    default:
                        break; // GizmoType.NONE
                }
                // Attach mesh
                this.setGizmoAttachedMesh(this.editor.core.currentSelectedObject);
                // Events
                if (!(this.currentGizmo instanceof babylonjs_1.BoundingBoxGizmo)) {
                    this.currentGizmo.xGizmo.dragBehavior.onDragObservable.add(function () {
                        return _this.onUpdateMesh && _this.onUpdateMesh(_this.currentGizmo.attachedMesh);
                    });
                    this.currentGizmo.yGizmo.dragBehavior.onDragObservable.add(function () {
                        return _this.onUpdateMesh && _this.onUpdateMesh(_this.currentGizmo.attachedMesh);
                    });
                    this.currentGizmo.zGizmo.dragBehavior.onDragObservable.add(function () {
                        return _this.onUpdateMesh && _this.onUpdateMesh(_this.currentGizmo.attachedMesh);
                    });
                    // Undo redo
                    this.currentGizmo.xGizmo.dragBehavior.onDragObservable.add(function (g) {
                        return _this._gizmoDelta += g.delta.x;
                    });
                    this.currentGizmo.yGizmo.dragBehavior.onDragObservable.add(function (g) {
                        return _this._gizmoDelta += g.delta.y;
                    });
                    this.currentGizmo.zGizmo.dragBehavior.onDragObservable.add(function (g) {
                        return _this._gizmoDelta += g.delta.z;
                    });
                    this.currentGizmo.xGizmo.dragBehavior.onDragEndObservable.add(function (_) {
                        return _this.undoRedo('x');
                    });
                    this.currentGizmo.yGizmo.dragBehavior.onDragEndObservable.add(function (_) {
                        return _this.undoRedo('y');
                    });
                    this.currentGizmo.zGizmo.dragBehavior.onDragEndObservable.add(function (_) {
                        return _this.undoRedo('z');
                    });
                } else {
                    this.currentGizmo.onScaleBoxDragObservable.add(function (_) {
                        if (_this._gizmoScaleDelta === null) {
                            _this._gizmoScaleDelta = babylonjs_1.Vector3.Zero().copyFrom(_this.boundingBoxGizmo.attachedMesh.scaling);
                            _this._gizmoPositionDelta = babylonjs_1.Vector3.Zero().copyFrom(_this.boundingBoxGizmo.attachedMesh.position);
                        }
                    });
                    this.currentGizmo.onRotationSphereDragObservable.add(function (_) {
                        if (_this._gizmoRotationDelta === null) _this._gizmoRotationDelta = new babylonjs_1.Quaternion().copyFrom(_this.boundingBoxGizmo.attachedMesh.rotationQuaternion);
                    });
                    this.currentGizmo.onScaleBoxDragEndObservable.add(function (_) {
                        return _this.undoRedo('boundingbox');
                    });
                    this.currentGizmo.onRotationSphereDragEndObservable.add(function (_) {
                        return _this.undoRedo('boundingbox');
                    });
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Sets the attached mesh for position, rotaiton and scaling gizmos
         * @param mesh the mesh to attach
         */
        ScenePicker.prototype.setGizmoAttachedMesh = function (mesh) {
            if (!(mesh instanceof babylonjs_1.AbstractMesh)) return;
            this.boundingBoxGizmo && (this.boundingBoxGizmo.attachedMesh = mesh);
            this.positionGizmo && (this.positionGizmo.attachedMesh = mesh);
            this.rotationGizmo && (this.rotationGizmo.attachedMesh = mesh);
            this.scalingGizmo && (this.scalingGizmo.attachedMesh = mesh);
        };
        /**
         * Adds the events to the canvas
         */
        ScenePicker.prototype.addEvents = function () {
            var _this = this;
            this.onCanvasPointer = this.scene.onPointerObservable.add(function (ev) {
                switch (ev.type) {
                    case babylonjs_1.PointerEventTypes.POINTERDOWN:
                        _this.canvasDown(ev.event);
                        break;
                    case babylonjs_1.PointerEventTypes.POINTERTAP:
                        _this.canvasClick(ev.event);
                        break;
                    case babylonjs_1.PointerEventTypes.POINTERMOVE:
                        _this.canvasMove(ev.event);
                        break;
                    case babylonjs_1.PointerEventTypes.POINTERDOUBLETAP:
                        _this.canvasDblClick(ev.event);
                        break;
                }
            });
            this.onCanvasBlur = this.scene.getEngine().onCanvasPointerOutObservable.add(function (ev) {
                if (_this.lastMesh) _this.lastMesh.showBoundingBox = false;
                if (_this.lastClickedMesh) _this.lastClickedMesh.showBoundingBox = true;
            });
            this.onCanvasFocus = this.scene.getEngine().onCanvasBlurObservable.add(function (ev) {
                if (_this.lastClickedMesh) _this.lastClickedMesh.showBoundingBox = false;
                if (_this.lastMesh) _this.lastMesh.showBoundingBox = true;
            });
        };
        /**
         * Removes the scene picker events from the canvas
         */
        ScenePicker.prototype.removeEvents = function () {
            this.scene.onPointerObservable.remove(this.onCanvasPointer);
            this.scene.getEngine().onCanvasPointerOutObservable.remove(this.onCanvasBlur);
            this.scene.getEngine().onCanvasFocusObservable.remove(this.onCanvasFocus);
        };
        /**
         * Adds undo redo
         * @param delta the delta value (from / to)
         * @param axis the moved axis
         */
        ScenePicker.prototype.undoRedo = function (axis) {
            var _this = this;
            var vector = null;
            switch (this._gizmoType) {
                case GizmoType.POSITION:
                    vector = this.positionGizmo.xGizmo.attachedMesh.position;
                    break;
                case GizmoType.ROTATION:
                    vector = this.rotationGizmo.xGizmo.attachedMesh.rotation;
                    break;
                case GizmoType.SCALING:
                    vector = this.scalingGizmo.xGizmo.attachedMesh.scaling;
                    break;
                default:
                    break;
            }
            switch (axis) {
                case 'x':
                    undo_redo_1.default.Push({ object: vector, property: 'x', from: vector.x - this._gizmoDelta, to: vector.x });
                    break;
                case 'y':
                    undo_redo_1.default.Push({ object: vector, property: 'y', from: vector.y - this._gizmoDelta, to: vector.y });
                    break;
                case 'z':
                    undo_redo_1.default.Push({ object: vector, property: 'z', from: vector.z - this._gizmoDelta, to: vector.z });
                    break;
                case 'boundingbox':
                    if (this._gizmoScaleDelta) {
                        var lastScale_1 = this._gizmoScaleDelta.clone();
                        var lastPosition_1 = this._gizmoPositionDelta.clone();
                        var newScale_1 = this.boundingBoxGizmo.attachedMesh.scaling.clone();
                        var newPosition_1 = this.boundingBoxGizmo.attachedMesh.position.clone();
                        undo_redo_1.default.Push({
                            fn: function (type) {
                                if (type === 'from') {
                                    _this.boundingBoxGizmo.attachedMesh.scaling = lastScale_1;
                                    _this.boundingBoxGizmo.attachedMesh.position = lastPosition_1;
                                } else {
                                    _this.boundingBoxGizmo.attachedMesh.scaling = newScale_1;
                                    _this.boundingBoxGizmo.attachedMesh.position = newPosition_1;
                                }
                            }
                        });
                    } else {
                        var lastRotation = this._gizmoRotationDelta.clone();
                        var newRotation = this.boundingBoxGizmo.attachedMesh.rotationQuaternion.clone();
                        undo_redo_1.default.Push({ object: this.boundingBoxGizmo.attachedMesh, property: 'rotationQuaternion', from: lastRotation, to: newRotation });
                    }
                    break;
            }
            this._gizmoDelta = 0;
            this._gizmoScaleDelta = null;
            this._gizmoPositionDelta = null;
            this._gizmoRotationDelta = null;
        };
        /**
         * Called when canvas mouse is down
         * @param ev the mouse event
         */
        ScenePicker.prototype.canvasDown = function (ev) {
            this.lastX = ev.offsetX;
            this.lastY = ev.offsetY;
        };
        /**
         * Called when canvas mouse is up
         * @param ev the mouse event
         */
        ScenePicker.prototype.canvasClick = function (ev) {
            if (!this._enabled) return;
            if (Math.abs(this.lastX - ev.offsetX) > 5 || Math.abs(this.lastY - ev.offsetY) > 5) return;
            var pick = this.editor.sceneIcons.pickIcon(ev.offsetX, ev.offsetY) || this.scene.pick(ev.offsetX, ev.offsetY);
            if (pick.pickedMesh) {
                if (this.onPickedMesh) this.onPickedMesh(pick.pickedMesh);
                // Attach mesh
                this.setGizmoAttachedMesh(pick.pickedMesh);
                // Save last clicked mesh
                this.lastClickedMesh = pick.pickedMesh;
            }
        };
        /**
         * Called when mouse moves on canvas
         * @param ev the mouse event
         */
        ScenePicker.prototype.canvasMove = function (ev) {
            if (!this._enabled) return;
            if (this.lastMesh) this.lastMesh.showBoundingBox = false;
            if (this.lastClickedMesh) this.lastClickedMesh.showBoundingBox = false;
            var pick = this.editor.sceneIcons.pickIcon(ev.offsetX, ev.offsetY, false) || this.scene.pick(ev.offsetX, ev.offsetY);
            if (pick.pickedMesh) {
                this.lastMesh = pick.pickedMesh;
                pick.pickedMesh.showBoundingBox = true;
            }
        };
        /**
         * Called when double click on the canvas
         * @param ev: the mouse event
         */
        ScenePicker.prototype.canvasDblClick = function (ev) {
            if (!this._enabled) return;
            var camera = this.scene.activeCamera;
            if (!(camera instanceof babylonjs_1.TargetCamera)) return;
            var pick = this.editor.sceneIcons.pickIcon(ev.offsetX, ev.offsetY) || this.scene.pick(ev.offsetX, ev.offsetY);
            if (pick.pickedMesh) {
                ScenePicker.CreateAndPlayFocusAnimation(camera.getTarget(), pick.pickedMesh.getAbsolutePosition(), camera);
                // Save last clicked mesh
                this.lastClickedMesh = pick.pickedMesh;
            }
        };
        /**
         * Creates an starts an animation that targets the given "end" position
         * @param start the start target position
         * @param end the end target position
         * @param camera the camera to animate
         */
        ScenePicker.CreateAndPlayFocusAnimation = function (start, end, camera) {
            var anim = new babylonjs_1.Animation('LockedTargetAnimation', 'target', 60, babylonjs_1.Animation.ANIMATIONTYPE_VECTOR3);
            anim.setKeys([{ frame: 0, value: start }, { frame: 24, value: end }]);
            var scene = camera.getScene();
            scene.stopAnimation(camera);
            scene.beginDirectAnimation(camera, [anim], 0, 24, false, 1.0);
        };
        return ScenePicker;
    }();
    exports.default = ScenePicker;

});
$__System.registerDynamic("57", ["58", "c", "e", "1a"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var SocketIO = $__require("58");
    var babylonjs_1 = $__require("c");
    var tools_1 = $__require("e");
    var scene_exporter_1 = $__require("1a");
    var ScenePreview = /** @class */function () {
        function ScenePreview() {}
        /**
         * Creates a scene preview listener
         */
        ScenePreview.Create = function (editor) {
            var _this = this;
            this.socket = SocketIO('http://localhost:1337/');
            this.socket.on('request-scene', function () {
                return _this.CreateFiles(editor);
            });
        };
        /**
         * Creates the files
         */
        ScenePreview.CreateFiles = function (editor) {
            return __awaiter(this, void 0, void 0, function () {
                var datas, _a, _b, _i, name_1, file, data, _c, _d, _e, _f;
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            datas = {};
                            _a = [];
                            for (_b in babylonjs_1.FilesInput.FilesToLoad) _a.push(_b);
                            _i = 0;
                            _g.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [3 /*break*/, 4];
                            name_1 = _a[_i];
                            if (tools_1.default.GetFileExtension(name_1) === 'babylon') return [3 /*break*/, 3];
                            file = babylonjs_1.FilesInput.FilesToLoad[name_1];
                            return [4 /*yield*/, tools_1.default.ReadFileAsArrayBuffer(file)];
                        case 2:
                            data = _g.sent();
                            datas[name_1] = data;
                            _g.label = 3;
                        case 3:
                            _i++;
                            return [3 /*break*/, 1];
                        case 4:
                            // Project files
                            scene_exporter_1.default.CreateFiles(editor);
                            _c = datas;
                            _d = editor.sceneFile.name;
                            return [4 /*yield*/, tools_1.default.ReadFileAsArrayBuffer(editor.sceneFile)];
                        case 5:
                            _c[_d] = _g.sent();
                            _e = datas;
                            _f = editor.projectFile.name;
                            return [4 /*yield*/, tools_1.default.ReadFileAsArrayBuffer(editor.projectFile)];
                        case 6:
                            _e[_f] = _g.sent();
                            this.socket.emit('receive-scene', datas);
                            return [2 /*return*/];
                    }
                });
            });
        };
        ScenePreview.socket = null;
        return ScenePreview;
    }();
    exports.default = ScenePreview;

});
$__System.registerDynamic("59", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var SceneIcons = /** @class */function () {
        /**
         * Constructor
         * @param editor: the editor instance
         */
        function SceneIcons(editor) {
            this.camerasPlanes = [];
            this.lightsPlanes = [];
            this.particleSystemsPlanes = [];
            // Private members
            this._lastCamerasCount = -1;
            this._lastLightsCount = -1;
            this._lastParticleSystemsCount = -1;
            this.editor = editor;
            this.editor.core.updates.push(this);
            // Create scene
            this.scene = new babylonjs_1.Scene(editor.core.engine);
            this.scene.autoClear = false;
            this.scene.postProcessesEnabled = false;
            this.scene.preventDefaultOnPointerDown = false;
            // Create textures
            this.cameraTexture = this.createTexture('css/images/camera.png');
            this.lightTexture = this.createTexture('css/images/light.png');
            this.particleTexture = this.createTexture('css/images/particles.png');
            // Create materials
            this.camerasMaterial = new babylonjs_1.StandardMaterial('CamerasMaterial', this.scene);
            this.camerasMaterial.diffuseTexture = this.cameraTexture;
            this.camerasMaterial.emissiveColor = babylonjs_1.Color3.White();
            this.camerasMaterial.disableDepthWrite = false;
            this.camerasMaterial.disableLighting = true;
            this.lightsMaterial = this.camerasMaterial.clone('LightsMaterial');
            this.lightsMaterial.diffuseTexture = this.lightTexture;
            this.particleSystemsMaterial = this.camerasMaterial.clone('ParticleSystemsMaterial');
            this.particleSystemsMaterial.diffuseTexture = this.particleTexture;
        }
        /**
         * On before render the scene
         */
        SceneIcons.prototype.onPreUpdate = function () {
            var scene = this.editor.core.scene;
            // Cameras
            if (scene.cameras.length !== this._lastCamerasCount) {
                this._lastCamerasCount = scene.cameras.length;
                this.createPlanes(this.camerasPlanes, this.camerasMaterial, this._lastCamerasCount);
            }
            // Lights
            if (scene.lights.length !== this._lastLightsCount) {
                this._lastLightsCount = scene.lights.length;
                this.createPlanes(this.lightsPlanes, this.lightsMaterial, this._lastLightsCount);
            }
            // Particle systems
            if (scene.particleSystems.length !== this._lastParticleSystemsCount) {
                this._lastParticleSystemsCount = scene.particleSystems.length;
                this.createPlanes(this.particleSystemsPlanes, this.particleSystemsMaterial, this._lastParticleSystemsCount);
            }
        };
        /**
         * On post update the scenes
         */
        SceneIcons.prototype.onPostUpdate = function () {
            var _this = this;
            var scene = this.editor.core.scene;
            // Render helpers scene
            this.scene.activeCamera = this.editor.core.scene.activeCamera;
            this.scene.render();
            // Cameras
            scene.cameras.forEach(function (c, index) {
                var plane = _this.camerasPlanes[index];
                plane.metadata.object = c;
                if (c === scene.activeCamera || !c.position) return plane.setEnabled(false);
                plane.setEnabled(true);
                _this.configurePlane(plane, c.position);
            });
            // Lights
            scene.lights.forEach(function (l, index) {
                var plane = _this.lightsPlanes[index];
                plane.metadata.object = l;
                _this.configurePlane(plane, l.getAbsolutePosition());
            });
            // Particle Systems
            scene.particleSystems.forEach(function (ps, index) {
                var plane = _this.particleSystemsPlanes[index];
                plane.metadata.object = ps;
                if (ps.emitter instanceof babylonjs_1.Vector3) _this.configurePlane(plane, ps.emitter);else if (ps.emitter) _this.configurePlane(plane, ps.emitter.getAbsolutePosition());
            });
        };
        /**
         * Launch a ray to try to pick a mesh in the icons scene
         * @param offsetX the x position of the mouse
         * @param offsetY the y position of the mouse
         * @param getSourceObject if the pick result should set the picked mesh as the source plane mesh
         */
        SceneIcons.prototype.pickIcon = function (offsetX, offsetY, getSourceObject) {
            if (getSourceObject === void 0) {
                getSourceObject = true;
            }
            var pick = this.scene.pick(offsetX, offsetY);
            if (!pick.hit) return null;
            if (getSourceObject) pick.pickedMesh = pick.pickedMesh.metadata.object;
            return pick;
        };
        /**
         * Creates all the (count) planes and applies the given material
         * @param planes the array containing the existing planes
         * @param material the material to apply to the new planes
         * @param count number of planes to create
         */
        SceneIcons.prototype.createPlanes = function (planes, material, count) {
            planes.forEach(function (p) {
                return p.dispose();
            });
            planes.splice(0, planes.length);
            for (var i = 0; i < count; i++) {
                var plane = babylonjs_1.Mesh.CreatePlane('SceneIconsPlane', 1, this.scene, false);
                plane.billboardMode = babylonjs_1.Mesh.BILLBOARDMODE_ALL;
                plane.material = material;
                plane.isPickable = true;
                plane.metadata = {
                    object: null
                };
                planes.push(plane);
            }
        };
        /**
         * Configures the given plane according to the given source object position
         * @param plane: the plane to configure to draw in the helper's scene
         * @param sourcePosition: the position of the object to draw the helper in the scene
         */
        SceneIcons.prototype.configurePlane = function (plane, sourcePosition) {
            var distance = babylonjs_1.Vector3.Distance(this.editor.core.scene.activeCamera.position, sourcePosition) * 0.04;
            plane.scaling = new babylonjs_1.Vector3(distance, distance, distance);
            plane.position.copyFrom(sourcePosition);
            plane.computeWorldMatrix(true);
        };
        /**
         * Creates a new texture
         * @param url: the url of the texture
         */
        SceneIcons.prototype.createTexture = function (url) {
            var texture = new babylonjs_1.Texture(url, this.scene);
            texture.hasAlpha = true;
            this.scene.textures.pop();
            return texture;
        };
        return SceneIcons;
    }();
    exports.default = SceneIcons;

});
$__System.registerDynamic("1c", ["c", "e", "28", "1b"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var tools_1 = $__require("e");
    var extensions_1 = $__require("28");
    var scene_manager_1 = $__require("1b");
    var ProjectImporter = /** @class */function () {
        function ProjectImporter() {}
        /**
         * Imports the project
         * @param editor: the editor reference
         * @param project: the editor project
         */
        ProjectImporter.Import = function (editor, project) {
            return __awaiter(this, void 0, void 0, function () {
                var scene, _loop_1, a, m, extension, ppExtension;
                return __generator(this, function (_a) {
                    scene = editor.core.scene;
                    // Clean project (compatibility)
                    this.CleanProject(project);
                    // Global Configuration
                    if (project.globalConfiguration.serializedCamera) editor.createEditorCamera(project.globalConfiguration.serializedCamera);
                    // Physics
                    if (!scene.isPhysicsEnabled()) scene.enablePhysics(scene.gravity, new babylonjs_1.CannonJSPlugin());
                    // Nodes
                    project.nodes.forEach(function (n) {
                        var node = null;
                        if (n.name === 'Scene') {
                            node = scene;
                        } else if (n.serializationObject) {
                            switch (n.type) {
                                case 'Light':
                                    node = babylonjs_1.Light.Parse(n.serializationObject, scene);
                                    break;
                                case 'Mesh':
                                    // Geometries
                                    if (n.serializationObject.geometries) {
                                        n.serializationObject.geometries.vertexData.forEach(function (v) {
                                            babylonjs_1.Geometry.Parse(v, scene, 'file:');
                                        });
                                    }
                                    // Mesh
                                    n.serializationObject.meshes.forEach(function (m) {
                                        node = babylonjs_1.Mesh.Parse(m, scene, 'file:');
                                    });
                                    break;
                                case 'Camera':
                                    node = babylonjs_1.Camera.Parse(n.serializationObject, scene);
                                    break;
                                default:
                                    throw new Error('Cannot parse node named: ' + n.name);
                            }
                            // Node was added
                            babylonjs_1.Tags.AddTagsTo(node, 'added');
                        } else {
                            node = scene.getNodeByName(n.name);
                        }
                        // Check particle systems
                        project.particleSystems.forEach(function (ps) {
                            if (!ps.hasEmitter && n.id && ps.serializationObject && ps.serializationObject.emitterId === n.id) {
                                var emitter = new babylonjs_1.Mesh(n.name, scene, null, null, true);
                                emitter.id = ps.serializationObject.emitterId;
                                // Add tags to emitter
                                babylonjs_1.Tags.AddTagsTo(emitter, 'added_particlesystem');
                            }
                        });
                        // Node not found
                        if (!node) return;
                        // Node animations
                        if (n.animations) {
                            n.animations.forEach(function (a) {
                                var anim = babylonjs_1.Animation.Parse(a.serializationObject);
                                babylonjs_1.Tags.AddTagsTo(anim, 'added');
                                node.animations.push(anim);
                            });
                        }
                        // Node is a Mesh?
                        if (node instanceof babylonjs_1.AbstractMesh) {
                            // Actions
                            if (n.actions) {
                                babylonjs_1.ActionManager.Parse(n.actions, node, scene);
                                babylonjs_1.Tags.AddTagsTo(node.actionManager, 'added');
                            }
                            // Physics
                            if (n.physics) {
                                node.physicsImpostor = new babylonjs_1.PhysicsImpostor(node, n.physics.physicsImpostor, {
                                    mass: n.physics.physicsMass,
                                    friction: n.physics.physicsFriction,
                                    restitution: n.physics.physicsRestitution
                                }, scene);
                            }
                        }
                    });
                    // Particle systems
                    project.particleSystems.forEach(function (ps) {
                        var system = babylonjs_1.ParticleSystem.Parse(ps.serializationObject, scene, 'file:');
                        if (ps.hasEmitter) system.emitter = scene.getNodeByID(ps.serializationObject.emitterId);
                        if (!ps.hasEmitter && system.emitter && ps.emitterPosition) system.emitter.position = babylonjs_1.Vector3.FromArray(ps.emitterPosition);
                        // Legacy
                        if (ps.serializationObject.base64Texture) {
                            system.particleTexture = babylonjs_1.Texture.CreateFromBase64String(ps.serializationObject.base64Texture, ps.serializationObject.base64TextureName, scene);
                            system.particleTexture.name = system.particleTexture.name.replace('data:', '');
                        }
                        // Add tags to particles system
                        babylonjs_1.Tags.AddTagsTo(system, 'added');
                    });
                    // Materials
                    project.materials.forEach(function (m) {
                        var material = babylonjs_1.Material.Parse(m.serializedValues, scene, 'file:');
                        m.meshesNames.forEach(function (mn) {
                            var mesh = scene.getMeshByName(mn);
                            if (mesh && !(mesh instanceof babylonjs_1.InstancedMesh)) mesh.material = material;
                        });
                        // Material has been added
                        babylonjs_1.Tags.AddTagsTo(material, 'added');
                    });
                    // Shadow Generators
                    project.shadowGenerators.forEach(function (sg) {
                        var generator = babylonjs_1.ShadowGenerator.Parse(sg, scene);
                        babylonjs_1.Tags.EnableFor(generator);
                        babylonjs_1.Tags.AddTagsTo(generator, 'added');
                    });
                    // Sounds
                    project.sounds.forEach(function (s) {
                        var sound = babylonjs_1.Sound.Parse(s.serializationObject, scene, 'file:');
                        babylonjs_1.Tags.AddTagsTo(sound, 'added');
                    });
                    // Actions (scene)
                    if (project.actions) {
                        babylonjs_1.ActionManager.Parse(project.actions, null, scene);
                        babylonjs_1.Tags.AddTagsTo(scene.actionManager, 'added');
                    }
                    // Effect Layers
                    project.effectLayers.forEach(function (el) {
                        return scene_manager_1.default[el.name] = babylonjs_1.EffectLayer.Parse(el.serializationObject, scene, 'file:');
                    });
                    // Render targets
                    project.renderTargets.forEach(function (rt) {
                        if (rt.isProbe) {
                            var probe = babylonjs_1.ReflectionProbe.Parse(rt.serializationObject, scene, 'file:');
                            babylonjs_1.Tags.AddTagsTo(probe, 'added');
                        } else {
                            var texture = babylonjs_1.Texture.Parse(rt.serializationObject, scene, 'file:');
                            scene.customRenderTargets.push(texture);
                        }
                    });
                    // Environment
                    if (project.environmentHelper) {
                        scene_manager_1.default.EnvironmentHelper = editor.core.scene.createDefaultEnvironment({
                            groundColor: new babylonjs_1.Color3().copyFrom(project.environmentHelper.groundColor),
                            skyboxColor: new babylonjs_1.Color3().copyFrom(project.environmentHelper.skyboxColor),
                            enableGroundMirror: project.environmentHelper.enableGroundMirror
                        });
                    }
                    // Assets
                    editor.assets.clear();
                    _loop_1 = function (a) {
                        var component = editor.assets.components.find(function (c) {
                            return c.id === a;
                        });
                        if (!component) return "continue";
                        component.onParseAssets && component.onParseAssets(project.assets[a]);
                    };
                    for (a in project.assets) {
                        _loop_1(a);
                    }
                    // Metadatas
                    extensions_1.default.ClearExtensions();
                    for (m in project.customMetadatas) {
                        extension = extensions_1.default.RequestExtension(scene, m);
                        if (extension) {
                            extension.onLoad(project.customMetadatas[m]);
                            if (extension.onGetAssets) editor.assets.addTab(extension);
                        }
                    }
                    // Notes
                    if (project.customMetadatas.notes) {
                        editor.core.scene.metadata = editor.core.scene.metadata || {};
                        editor.core.scene.metadata.notes = project.customMetadatas.notes;
                        editor.addEditPanelPlugin('notes', true);
                    }
                    ppExtension = extensions_1.default.Instances['PostProcess'];
                    if (ppExtension) {
                        scene_manager_1.default.StandardRenderingPipeline = ppExtension.standard;
                        scene_manager_1.default.SSAO2RenderingPipeline = ppExtension.ssao2;
                    }
                    // Refresh assets
                    editor.assets.refresh();
                    // Waiting parent ids
                    editor.core.scene.meshes.forEach(function (m) {
                        if (m._waitingParentId) {
                            m.parent = editor.core.scene.getNodeByID(m._waitingParentId);
                            m._waitingParentId = undefined;
                        }
                    });
                    editor.core.scene.lights.forEach(function (l) {
                        if (l._waitingParentId) {
                            l.parent = editor.core.scene.getNodeByID(l._waitingParentId);
                            l._waitingParentId = undefined;
                        }
                    });
                    editor.core.scene.cameras.forEach(function (c) {
                        if (c._waitingParentId) {
                            c.parent = editor.core.scene.getNodeByID(c._waitingParentId);
                            c._waitingParentId = undefined;
                        }
                    });
                    // Finish
                    scene.materials.forEach(function (m) {
                        return m['maxSimultaneousLights'] = scene.lights.length * 2;
                    });
                    return [2 /*return*/];
                });
            });
        };
        /**
        * Cleans an editor project
        */
        ProjectImporter.CleanProject = function (project) {
            project.renderTargets = project.renderTargets || [];
            project.sounds = project.sounds || [];
            project.customMetadatas = project.customMetadatas || {};
            project.physicsEnabled = project.physicsEnabled || false;
            project.effectLayers = project.effectLayers || [];
            project.globalConfiguration = project.globalConfiguration || {};
            project.assets = project.assets || {};
        };
        /**
         * Imports files + project
         * @param editor the editor reference
         */
        ProjectImporter.ImportProject = function (editor) {
            tools_1.default.OpenFileDialog(function (files) {
                editor.filesInput.loadFiles({
                    target: {
                        files: files
                    }
                });
            });
        };
        return ProjectImporter;
    }();
    exports.default = ProjectImporter;

});
$__System.registerDynamic("5a", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    // Abstract class extension
    var Extension = /** @class */function () {
        /**
         * Constructor
         * @param scene: the scene
         */
        function Extension(scene) {
            this.alwaysApply = false;
            this.scene = scene;
        }
        /**
         * Adds a script tag element to the dom including source URL
         * @param code: the code's text
         * @param url: the URL of the script to show in devtools
         */
        Extension.AddScript = function (code, url) {
            var script = document.createElement('script');
            script.type = 'text/javascript';
            script.text = code + '\n' + '//# sourceURL=' + url + '\n';
            document.head.appendChild(script);
            return script;
        };
        return Extension;
    }();
    exports.default = Extension;

});
$__System.registerDynamic("1d", ["c", "13", "1b", "1a", "f", "14", "e", "5a", "28"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var babylonjs_serializers_1 = $__require("13");
    var scene_manager_1 = $__require("1b");
    var scene_exporter_1 = $__require("1a");
    var window_1 = $__require("f");
    var form_1 = $__require("14");
    var tools_1 = $__require("e");
    var extension_1 = $__require("5a");
    var extensions_1 = $__require("28");
    var ProjectExporter = /** @class */function () {
        function ProjectExporter() {}
        /**
         * Uploads all scene templates
         * @param editor the editor reference
         */
        ProjectExporter.ExportTemplate = function (editor) {
            return __awaiter(this, void 0, void 0, function () {
                var window, form;
                var _this = this;
                return __generator(this, function (_a) {
                    window = new window_1.default('ExportTemplate');
                    window.buttons = ['Ok'];
                    window.width = 400;
                    window.height = 125;
                    window.body = "<div id=\"EXPORT-TEMPLATE-FORMAT\" style=\"width: 100%; height: 100%;\"></div>";
                    window.open();
                    form = new form_1.default('SceneFormatForm');
                    form.fields = [{ name: 'format', type: 'list', required: true, options: { items: ['babylon', 'glb', 'gltf'] } }];
                    form.build('EXPORT-TEMPLATE-FORMAT');
                    form.element.record['format'] = this.ProjectExportFormat;
                    form.element.refresh();
                    // Events
                    window.onButtonClick = function () {
                        return __awaiter(_this, void 0, void 0, function () {
                            var sceneFiles, _a, _b, _c, data, _d, e_1, _e, _f, _i, f, file, _g, _h, _j, srcFiles, _k, storage, _l, _m, _o, _p, _q, _r, _s, _t;
                            var _this = this;
                            return __generator(this, function (_u) {
                                switch (_u.label) {
                                    case 0:
                                        // Update scene format
                                        this.ProjectExportFormat = form.element.record['format'].id;
                                        // Clear
                                        form.element.destroy();
                                        window.close();
                                        // Create scene files
                                        scene_exporter_1.default.CreateFiles(editor, this.ProjectExportFormat);
                                        sceneFiles = [{ name: 'project.editorproject', data: JSON.stringify(this.Export(editor).customMetadatas) }];
                                        if (!(this.ProjectExportFormat === 'babylon')) return [3 /*break*/, 2];
                                        _b = (_a = sceneFiles).push;
                                        _c = { name: 'scene.babylon' };
                                        return [4 /*yield*/, tools_1.default.ReadFileAsArrayBuffer(editor.sceneFile)];
                                    case 1:
                                        _b.apply(_a, [(_c.data = _u.sent(), _c)]);
                                        return [3 /*break*/, 15];
                                    case 2:
                                        data = null;
                                        _u.label = 3;
                                    case 3:
                                        _u.trys.push([3, 10,, 11]);
                                        _d = this.ProjectExportFormat;
                                        switch (_d) {
                                            case 'glb':
                                                return [3 /*break*/, 4];
                                            case 'gltf':
                                                return [3 /*break*/, 6];
                                        }
                                        return [3 /*break*/, 8];
                                    case 4:
                                        return [4 /*yield*/, babylonjs_serializers_1.GLTF2Export.GLBAsync(editor.core.scene, 'scene', {})];
                                    case 5:
                                        data = _u.sent();
                                        return [3 /*break*/, 9];
                                    case 6:
                                        return [4 /*yield*/, babylonjs_serializers_1.GLTF2Export.GLTFAsync(editor.core.scene, 'scene', {})];
                                    case 7:
                                        data = _u.sent();
                                        return [3 /*break*/, 9];
                                    case 8:
                                        return [3 /*break*/, 9];
                                    case 9:
                                        return [3 /*break*/, 11];
                                    case 10:
                                        e_1 = _u.sent();
                                        window_1.default.CreateAlert(e_1.message, 'Error when exporting the scene');
                                        return [2 /*return*/];
                                    case 11:
                                        _e = [];
                                        for (_f in data.glTFFiles) _e.push(_f);
                                        _i = 0;
                                        _u.label = 12;
                                    case 12:
                                        if (!(_i < _e.length)) return [3 /*break*/, 15];
                                        f = _e[_i];
                                        file = data.glTFFiles[f];
                                        _h = (_g = sceneFiles).push;
                                        _j = { name: f };
                                        return [4 /*yield*/, tools_1.default.ReadFileAsArrayBuffer(file)];
                                    case 13:
                                        _h.apply(_g, [(_j.data = _u.sent(), _j)]);
                                        _u.label = 14;
                                    case 14:
                                        _i++;
                                        return [3 /*break*/, 12];
                                    case 15:
                                        Object.keys(babylonjs_1.FilesInput.FilesToLoad).forEach(function (k) {
                                            return __awaiter(_this, void 0, void 0, function () {
                                                var _a, _b, _c;return __generator(this, function (_d) {
                                                    switch (_d.label) {
                                                        case 0:
                                                            _b = (_a = sceneFiles).push;
                                                            _c = { name: k };
                                                            return [4 /*yield*/, tools_1.default.ReadFileAsArrayBuffer(babylonjs_1.FilesInput.FilesToLoad[k])];
                                                        case 1:
                                                            return [2 /*return*/, _b.apply(_a, [(_c.data = _d.sent(), _c)])];
                                                    }
                                                });
                                            });
                                        });
                                        _k = { name: 'game.ts', doNotOverride: true };
                                        return [4 /*yield*/, tools_1.default.LoadFile('assets/templates/template/src/game.ts')];
                                    case 16:
                                        srcFiles = [(_k.data = _u.sent().replace('{{scene_format}}', this.ProjectExportFormat), _k)];
                                        return [4 /*yield*/, this.GetStorage(editor)];
                                    case 17:
                                        storage = _u.sent();
                                        _m = (_l = storage).openPicker;
                                        _o = ['Create Template...'];
                                        _p = [{ name: 'scene', folder: sceneFiles }, { name: 'src', folder: srcFiles }];
                                        _q = { name: 'README.md' };
                                        return [4 /*yield*/, tools_1.default.LoadFile('assets/templates/template/README.md')];
                                    case 18:
                                        _p = _p.concat([(_q.data = _u.sent(), _q)]);
                                        _r = { name: 'index.html' };
                                        return [4 /*yield*/, tools_1.default.LoadFile('assets/templates/template/index.html')];
                                    case 19:
                                        _p = _p.concat([(_r.data = _u.sent(), _r)]);
                                        _s = { name: 'package.json' };
                                        return [4 /*yield*/, tools_1.default.LoadFile('assets/templates/template/package.json')];
                                    case 20:
                                        _p = _p.concat([(_s.data = _u.sent(), _s)]);
                                        _t = { name: 'tsconfig.json' };
                                        return [4 /*yield*/, tools_1.default.LoadFile('assets/templates/template/tsconfig.json')];
                                    case 21:
                                        _m.apply(_l, _o.concat([_p.concat([(_t.data = _u.sent(), _t)])]));
                                        return [2 /*return*/];
                                }
                            });
                        });
                    };
                    return [2 /*return*/];
                });
            });
        };
        /**
         * Exports the editor project into the storage
         * @param editor the editor reference
         */
        ProjectExporter.ExportProject = function (editor) {
            return __awaiter(this, void 0, void 0, function () {
                var content, storage, files;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            content = JSON.stringify(this.Export(editor));
                            return [4 /*yield*/, this.GetStorage(editor)];
                        case 1:
                            storage = _a.sent();
                            files = [{ name: editor.projectFileName, data: content }];
                            storage.onCreateFiles = function (folder) {
                                return _this.ProjectPath = folder;
                            };
                            return [4 /*yield*/, storage.openPicker('Export Editor Project...', files, this.ProjectPath)];
                        case 2:
                            _a.sent();
                            // Notify
                            tools_1.default.SetWindowTitle(editor.projectFileName);
                            editor.toolbar.notifyRightMessage('Saved Project');
                            setTimeout(function () {
                                return editor.toolbar.notifyRightMessage('');
                            }, 1000);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Downloads the project's file
         * @param editor the editor reference
         */
        ProjectExporter.DownloadProjectFile = function (editor) {
            return __awaiter(this, void 0, void 0, function () {
                var content, files, storage, result, file;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            content = JSON.stringify(this.Export(editor));
                            files = [{ name: editor.projectFileName, data: content }];
                            if (!tools_1.default.IsElectron()) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.GetStorage(editor)];
                        case 1:
                            storage = _a.sent();
                            storage.onCreateFiles = function (folder) {
                                return _this.ProjectPath = folder;
                            };
                            return [4 /*yield*/, storage.openPicker('Export Editor Project...', files, null, true)];
                        case 2:
                            result = _a.sent();
                            // Update project's informations
                            if (result) {
                                this.ProjectPath = result.path;
                                editor.projectFileName = result.filename;
                                tools_1.default.SetWindowTitle(result.filename);
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            file = tools_1.default.CreateFile(tools_1.default.ConvertStringToUInt8Array(content), 'scene.editorproject');
                            babylonjs_1.Tools.Download(file, editor.projectFileName);
                            _a.label = 4;
                        case 4:
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Returns the appropriate storage (OneDrive, Electron, etc.)
         * @param editor the editor reference
         */
        ProjectExporter.GetStorage = function (editor) {
            return __awaiter(this, void 0, void 0, function () {
                var storage, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!tools_1.default.IsElectron()) return [3 /*break*/, 2];
                            return [4 /*yield*/, tools_1.default.ImportScript('build/src/editor/storage/electron-storage.js')];
                        case 1:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 2:
                            return [4 /*yield*/, tools_1.default.ImportScript('build/src/editor/storage/one-drive-storage.js')];
                        case 3:
                            _a = _b.sent();
                            _b.label = 4;
                        case 4:
                            storage = _a;
                            return [2 /*return*/, new storage.default(editor)];
                    }
                });
            });
        };
        /**
         * Exports the current editor project
         */
        ProjectExporter.Export = function (editor) {
            // Toggle scene manager
            scene_manager_1.default.Toggle(editor.core.scene);
            var project = {
                actions: null,
                customMetadatas: this._SerializeCustomMetadatas(editor),
                globalConfiguration: this._SerializeGlobalConfiguration(editor),
                lensFlares: null,
                materials: this._SerializeMaterials(editor),
                nodes: this._SerializeNodes(editor),
                particleSystems: this._SerializeParticleSystems(editor),
                physicsEnabled: editor.core.scene.isPhysicsEnabled(),
                renderTargets: this._SerializeRenderTargets(editor),
                requestedMaterials: null,
                shadowGenerators: this._SerializeShadowGenerators(editor),
                sounds: this._SerializeSounds(editor),
                gui: editor.core.uiTextures.map(function (ut) {
                    return ut.serialize();
                }),
                effectLayers: this._SerializeEffectLayers(editor),
                environmentHelper: scene_manager_1.default.EnvironmentHelper ? scene_manager_1.default.EnvironmentHelper['_options'] : null,
                assets: this._SerializeAssets(editor)
            };
            // Finish
            scene_manager_1.default.Toggle(editor.core.scene);
            return project;
        };
        /**
         * Serializes the global configuration of the project
         */
        ProjectExporter._SerializeGlobalConfiguration = function (editor) {
            return {
                serializedCamera: editor.camera.serialize()
            };
        };
        /**
         * Serializes the custom sounds
         */
        ProjectExporter._SerializeSounds = function (editor) {
            var result = [];
            var scene = editor.core.scene;
            scene.soundTracks.forEach(function (st) {
                st.soundCollection.forEach(function (s) {
                    if (!babylonjs_1.Tags.HasTags(s) || !babylonjs_1.Tags.MatchesQuery(s, 'added')) return;
                    result.push({
                        name: s.name,
                        serializationObject: s.serialize()
                    });
                });
            });
            return result;
        };
        /**
         * Serializes the custom metadatas
         */
        ProjectExporter._SerializeCustomMetadatas = function (editor) {
            var result = {};
            // Notes
            if (editor.core.scene.metadata && editor.core.scene.metadata.notes) result.notes = editor.core.scene.metadata.notes;
            // Instances have been
            for (var e in extensions_1.default.Instances) result[e] = extensions_1.default.Instances[e].onSerialize();
            return result;
        };
        /**
         * Serializes the assets of the project being exported
         */
        ProjectExporter._SerializeAssets = function (editor) {
            var result = {};
            editor.assets.components.forEach(function (c) {
                // Extensions have their own import and export methods
                if (c instanceof extension_1.default) return;
                if (c.onSerializeAssets) result[c.id] = c.onSerializeAssets();
            });
            return result;
        };
        /**
         * Serializes the shadow generators
         */
        ProjectExporter._SerializeShadowGenerators = function (editor) {
            var result = [];
            editor.core.scene.lights.forEach(function (l) {
                var sg = l.getShadowGenerator();
                if (!sg || !babylonjs_1.Tags.HasTags(sg) || !babylonjs_1.Tags.MatchesQuery(sg, 'added')) return;
                result.push(sg.serialize());
            });
            return result;
        };
        /**
         * Serializes all the render targets
         */
        ProjectExporter._SerializeRenderTargets = function (editor) {
            var renderTargets = [];
            // Render targets
            editor.core.scene.customRenderTargets.forEach(function (rt) {
                if (!babylonjs_1.Tags.HasTags(rt) || !babylonjs_1.Tags.MatchesQuery(rt, 'added')) return;
                renderTargets.push({
                    isProbe: false,
                    serializationObject: rt.serialize()
                });
            });
            // Reflection probes
            editor.core.scene.reflectionProbes && editor.core.scene.reflectionProbes.forEach(function (rp) {
                if (!babylonjs_1.Tags.HasTags(rp) || !babylonjs_1.Tags.MatchesQuery(rp, 'added')) return;
                renderTargets.push({
                    isProbe: true,
                    serializationObject: rp.serialize()
                });
            });
            return renderTargets;
        };
        /**
         * Serializes the Materials
         */
        ProjectExporter._SerializeMaterials = function (editor) {
            var scene = editor.core.scene;
            var result = [];
            scene.materials.forEach(function (m) {
                if (!babylonjs_1.Tags.HasTags(m) || !babylonjs_1.Tags.MatchesQuery(m, 'added')) return;
                // Already serialized?
                var material = result.find(function (mat) {
                    return mat.serializedValues.name === m.name;
                });
                if (material) return;
                // Add new material
                var names = [];
                scene.meshes.map(function (mesh) {
                    if (mesh.material === m) names.push(mesh.name);
                });
                result.push({
                    meshesNames: names,
                    newInstance: true,
                    serializedValues: m.serialize()
                });
            });
            return result;
        };
        /**
         * Serializes the Particle Systems
         */
        ProjectExporter._SerializeParticleSystems = function (editor) {
            var scene = editor.core.scene;
            var result = [];
            scene.particleSystems.forEach(function (ps) {
                if (!babylonjs_1.Tags.HasTags(ps) || !babylonjs_1.Tags.MatchesQuery(ps, 'added')) return;
                var psObj = {
                    emitterPosition: ps.emitter && ps.emitter instanceof babylonjs_1.Vector3 ? ps.emitter.asArray() : ps.emitter && ps.emitter instanceof babylonjs_1.Node ? ps.emitter.position.asArray() : null,
                    hasEmitter: ps.emitter && ps.emitter instanceof babylonjs_1.AbstractMesh && !babylonjs_1.Tags.MatchesQuery(ps.emitter, 'added_particlesystem'),
                    serializationObject: ps.serialize()
                };
                // Check base64 string
                if (ps instanceof babylonjs_1.ParticleSystem && ps.particleTexture['_buffer']) {
                    // Add base64 string
                    psObj.serializationObject.base64TextureName = ps.particleTexture.name;
                    psObj.serializationObject.base64Texture = ps.particleTexture._buffer;
                    delete psObj.serializationObject.textureName;
                }
                result.push(psObj);
            });
            return result;
        };
        /**
         * Serializes the Effect Layers
         */
        ProjectExporter._SerializeEffectLayers = function (editor) {
            var result = [];
            if (scene_manager_1.default.GlowLayer) result.push({ name: 'GlowLayer', serializationObject: scene_manager_1.default.GlowLayer.serialize() });
            if (scene_manager_1.default.HighLightLayer) result.push({ name: 'HighLightLayer', serializationObject: scene_manager_1.default.HighLightLayer.serialize() });
            return result;
        };
        /**
         * Serializes the nodes
         */
        ProjectExporter._SerializeNodes = function (editor) {
            var scene = editor.core.scene;
            var nodes = [].concat(scene.meshes).concat(scene.lights).concat(scene.cameras).filter(function (n) {
                return n !== editor.camera;
            });
            var result = [];
            nodes.forEach(function (n) {
                var addNodeToProject = false;
                var node = {
                    actions: null,
                    animations: [],
                    id: n.id,
                    name: n.name,
                    serializationObject: null,
                    physics: null,
                    type: n instanceof babylonjs_1.AbstractMesh ? 'Mesh' : n instanceof babylonjs_1.Light ? 'Light' : n instanceof babylonjs_1.Camera ? 'Camera' : 'Unknown!'
                };
                if (babylonjs_1.Tags.MatchesQuery(n, 'added_particlesystem')) addNodeToProject = true;
                if (babylonjs_1.Tags.HasTags(n) && babylonjs_1.Tags.MatchesQuery(n, 'added')) {
                    addNodeToProject = true;
                    if (n instanceof babylonjs_1.AbstractMesh) node.serializationObject = babylonjs_1.SceneSerializer.SerializeMesh(n, false, false);else node.serializationObject = n.serialize();
                }
                // Animations
                n.animations.forEach(function (a) {
                    if (!babylonjs_1.Tags.HasTags(a) || !babylonjs_1.Tags.MatchesQuery(a, 'added')) return;
                    addNodeToProject = true;
                    node.animations.push({
                        events: [],
                        serializationObject: a.serialize(),
                        targetName: name,
                        targetType: 'Node'
                    });
                });
                // Physics
                if (n instanceof babylonjs_1.AbstractMesh) {
                    var impostor = n.getPhysicsImpostor();
                    if (impostor && babylonjs_1.Tags.HasTags(impostor) && babylonjs_1.Tags.MatchesQuery(impostor, 'added')) {
                        addNodeToProject = true;
                        node.physics = {
                            physicsMass: impostor.getParam("mass"),
                            physicsFriction: impostor.getParam("friction"),
                            physicsRestitution: impostor.getParam("restitution"),
                            physicsImpostor: impostor.type
                        };
                    }
                }
                // Actions
                var actionManager = n['actionManager'];
                if (actionManager && babylonjs_1.Tags.HasTags(actionManager) && babylonjs_1.Tags.MatchesQuery(actionManager, 'added')) {
                    addNodeToProject = true;
                    node.actions = actionManager.serialize(name);
                }
                // Add to nodes project?
                if (addNodeToProject) result.push(node);
            });
            return result;
        };
        // Public members
        ProjectExporter.ProjectPath = null;
        ProjectExporter.ProjectExportFormat = 'babylon';
        return ProjectExporter;
    }();
    exports.default = ProjectExporter;

});
$__System.registerDynamic("1a", ["c", "1d", "e"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var project_exporter_1 = $__require("1d");
    var tools_1 = $__require("e");
    var randomId = babylonjs_1.Tools.RandomId();
    var SceneExporter = /** @class */function () {
        function SceneExporter() {}
        /**
         * Creates a new file
         * @param editor: the editor instance
         */
        SceneExporter.CreateFiles = function (editor, format) {
            if (format === void 0) {
                format = 'babylon';
            }
            // Scene
            editor.assets.prefabs.setSerializable(true);
            var serializedScene = babylonjs_1.SceneSerializer.Serialize(editor.core.scene);
            editor.assets.prefabs.setSerializable(false);
            if (editor.playCamera) serializedScene.activeCameraID = editor.playCamera.id;
            if (format === 'babylon') {
                editor.sceneFile = tools_1.default.CreateFile(tools_1.default.ConvertStringToUInt8Array(JSON.stringify(serializedScene)), 'scene' + randomId + '.babylon');
                babylonjs_1.FilesInput.FilesToLoad[editor.sceneFile.name] = editor.sceneFile;
            }
            // Gui
            editor.guiFiles = [];
            editor.core.uiTextures.forEach(function (ut) {
                var serializedGui = ut.serialize();
                editor.guiFiles.push(tools_1.default.CreateFile(tools_1.default.ConvertStringToUInt8Array(JSON.stringify(serializedGui)), ut.name + '.gui'));
            });
            // Project
            var name = 'scene' + randomId + '.editorproject';
            var project = project_exporter_1.default.Export(editor);
            editor.projectFile = tools_1.default.CreateFile(tools_1.default.ConvertStringToUInt8Array(JSON.stringify(project)), name);
            babylonjs_1.FilesInput.FilesToLoad[editor.projectFile.name] = editor.projectFile;
        };
        /**
         * Creates the babylon scene and a download link for the babylon file
         * @param editor the editor reference
         */
        SceneExporter.DownloadBabylonFile = function (editor) {
            this.CreateFiles(editor);
            babylonjs_1.Tools.Download(editor.sceneFile, editor.sceneFile.name);
        };
        // Public members
        SceneExporter.ProjectPath = null;
        SceneExporter.ProjectExportFormat = 'babylon';
        return SceneExporter;
    }();
    exports.default = SceneExporter;

});
$__System.registerDynamic("5b", ["c", "20", "11", "1a", "e"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var babylonjs_gui_1 = $__require("20");
    var scene_factory_1 = $__require("11");
    var scene_exporter_1 = $__require("1a");
    var tools_1 = $__require("e");
    var DefaultScene = /** @class */function () {
        function DefaultScene() {}
        /**
         * Creates a texture file and returns the given texture
         * @param url: the url of the texture
         * @param scene: the scene where to add the texture
         */
        DefaultScene.LoadTexture = function (url, scene) {
            return __awaiter(this, void 0, void 0, function () {
                var name, texture;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            return [4 /*yield*/, tools_1.default.CreateFileFromURL(url)];
                        case 1:
                            _a.sent();
                            name = tools_1.default.GetFilename(url);
                            texture = new babylonjs_1.Texture('file:' + name, scene);
                            texture.name = texture['url'] = name;
                            return [2 /*return*/, texture];
                    }
                });
            });
        };
        /**
         * Creates a new label
         * @param gui: the gui texture
         * @param mesh: the mesh to attach
         * @param str: the string to draw
         * @param lines: if draw lines
         */
        DefaultScene.CreateLabel = function (gui, mesh, str, lines, width, height) {
            // PBR GUI
            var label = new babylonjs_gui_1.Rectangle(str);
            label.background = 'black';
            label.height = height;
            label.alpha = 0.5;
            label.width = width;
            label.cornerRadius = 20;
            label.thickness = 1;
            label.linkOffsetY = 30;
            label.top = '0%';
            label.zIndex = 5;
            label.verticalAlignment = babylonjs_gui_1.Control.VERTICAL_ALIGNMENT_TOP;
            label.horizontalAlignment = babylonjs_gui_1.Control.HORIZONTAL_ALIGNMENT_RIGHT;
            gui.addControl(label);
            var text = new babylonjs_gui_1.TextBlock();
            text.text = str;
            text.color = 'white';
            label.addControl(text);
            if (!lines) {
                label.linkWithMesh(mesh);
                return label;
            }
            var line = new babylonjs_gui_1.Line();
            line.alpha = 0.5;
            line.lineWidth = 5;
            line.dash = [5, 10];
            gui.addControl(line);
            line.linkWithMesh(mesh);
            line.connectedControl = label;
            return label;
        };
        /**
         * Creates the default scene
         * @param scene: the scene reference where to create objects
         */
        DefaultScene.Create = function (editor) {
            return __awaiter(this, void 0, void 0, function () {
                var scene, hdrTexture, skyboxMaterial, skybox, floor, floorBump, floorAmbient, groundMaterial, ground, metal, metalBump, metalReflectivity, metalMetallic, sphereMaterialPBR, spherePBR, wood, woodReflectivity, sphereMaterialStd, sphereStd, amiga, sphereMaterialAnim, sphereAnimated, anim, documentation, planeMaterial, plane, rainEmitter, rain, _a, dropEmitter, drop, _b, spot, shadows, gui, serializedScene, serializedSceneFile;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            scene = editor.core.scene;
                            scene.clearColor = new babylonjs_1.Color4(0, 0, 0, 1);
                            // Image processing
                            scene.imageProcessingConfiguration.contrast = 1;
                            scene.imageProcessingConfiguration.exposure = 1;
                            scene.imageProcessingConfiguration.toneMappingEnabled = true;
                            hdrTexture = null;
                            skyboxMaterial = new babylonjs_1.PBRMaterial('SkyboxMaterial', scene);
                            skyboxMaterial.backFaceCulling = false;
                            skyboxMaterial.microSurface = 0.85;
                            skyboxMaterial.cameraExposure = 0.6;
                            skyboxMaterial.cameraContrast = 1.6;
                            skyboxMaterial.disableLighting = true;
                            return [4 /*yield*/, tools_1.default.CreateFileFromURL("assets/textures/environment.dds").then(function () {
                                hdrTexture = babylonjs_1.CubeTexture.CreateFromPrefilteredData("file:environment.dds", scene);
                                hdrTexture.gammaSpace = false;
                                skyboxMaterial.reflectionTexture = hdrTexture.clone();
                                skyboxMaterial.reflectionTexture.coordinatesMode = babylonjs_1.Texture.SKYBOX_MODE;
                                hdrTexture.name = hdrTexture.url = "environment.dds";
                                skyboxMaterial.reflectionTexture.name = skyboxMaterial.reflectionTexture['url'] = "environment.dds";
                            })];
                        case 1:
                            _c.sent();
                            skybox = babylonjs_1.Mesh.CreateBox("hdrSkyBox", 1000, scene);
                            skybox.material = skyboxMaterial;
                            skybox.infiniteDistance = true;
                            floor = null;
                            floorBump = null;
                            floorAmbient = null;
                            return [4 /*yield*/, Promise.all([this.LoadTexture('assets/textures/mahogfloor_basecolor.png', scene).then(function (t) {
                                t.uScale = t.vScale = 45;floor = t;
                            }), this.LoadTexture('assets/textures/mahogfloor_normal.jpg', scene).then(function (t) {
                                t.uScale = t.vScale = 45;floorBump = t;
                            }), this.LoadTexture('assets/textures/mahogfloor_AO.jpg', scene).then(function (t) {
                                t.uScale = t.vScale = 45;floorAmbient = t;
                            })])];
                        case 2:
                            _c.sent();
                            groundMaterial = new babylonjs_1.PBRMaterial('GroundMaterial', scene);
                            groundMaterial.usePhysicalLightFalloff = false;
                            groundMaterial.microSurface = 0.93;
                            groundMaterial.albedoTexture = floor;
                            groundMaterial.bumpTexture = floorBump;
                            groundMaterial.ambientTexture = floorAmbient;
                            groundMaterial.useParallax = true;
                            groundMaterial.useParallaxOcclusion = true;
                            groundMaterial.parallaxScaleBias = 0.02;
                            groundMaterial.reflectivityColor.set(0.1, 0.1, 0.1);
                            groundMaterial.reflectionTexture = hdrTexture;
                            ground = babylonjs_1.Mesh.CreateGround('Ground', 512, 512, 32, scene);
                            ground.receiveShadows = true;
                            ground.material = groundMaterial;
                            metal = null;
                            metalBump = null;
                            metalReflectivity = null;
                            metalMetallic = null;
                            return [4 /*yield*/, Promise.all([this.LoadTexture('assets/textures/rustediron2_basecolor.png', scene).then(function (t) {
                                return metal = t;
                            }), this.LoadTexture('assets/textures/rustediron2_normal.png', scene).then(function (t) {
                                return metalBump = t;
                            }), this.LoadTexture('assets/textures/rustediron2_roughness.png', scene).then(function (t) {
                                return metalReflectivity = t;
                            }), this.LoadTexture('assets/textures/rustediron2_metallic.png', scene).then(function (t) {
                                return metalMetallic = t;
                            })])];
                        case 3:
                            _c.sent();
                            sphereMaterialPBR = new babylonjs_1.PBRMaterial('SpherePBR', scene);
                            sphereMaterialPBR.albedoTexture = metal;
                            sphereMaterialPBR.bumpTexture = metalBump;
                            sphereMaterialPBR.reflectivityTexture = metalReflectivity;
                            sphereMaterialPBR.ambientTexture = metalMetallic;
                            sphereMaterialPBR.reflectionTexture = hdrTexture;
                            spherePBR = babylonjs_1.Mesh.CreateSphere('Sphere PBR', 32, 5, scene);
                            spherePBR.position.set(-5, 3, 0);
                            spherePBR.material = sphereMaterialPBR;
                            wood = null;
                            woodReflectivity = null;
                            return [4 /*yield*/, Promise.all([this.LoadTexture('assets/textures/albedo.png', scene).then(function (t) {
                                return wood = t;
                            }), this.LoadTexture('assets/textures/reflectivity.png', scene).then(function (t) {
                                return woodReflectivity = t;
                            })])];
                        case 4:
                            _c.sent();
                            sphereMaterialStd = new babylonjs_1.StandardMaterial('SphereStandard', scene);
                            sphereMaterialStd.diffuseTexture = wood;
                            sphereMaterialStd.specularTexture = woodReflectivity;
                            sphereStd = babylonjs_1.Mesh.CreateSphere('Sphere Standard', 32, 5, scene);
                            sphereStd.position.set(5, 3, 0);
                            sphereStd.material = sphereMaterialStd;
                            return [4 /*yield*/, this.LoadTexture('assets/textures/amiga.jpg', scene)];
                        case 5:
                            amiga = _c.sent();
                            sphereMaterialAnim = new babylonjs_1.StandardMaterial('SphereAnimated', scene);
                            sphereMaterialAnim.emissiveTexture = amiga;
                            sphereAnimated = babylonjs_1.Mesh.CreateSphere('Sphere Animated', 32, 5, scene);
                            sphereAnimated.position.set(15, 3, 0);
                            sphereAnimated.material = sphereMaterialAnim;
                            anim = new babylonjs_1.Animation('Rotation', 'rotation.y', 60, babylonjs_1.Animation.ANIMATIONTYPE_FLOAT, babylonjs_1.Animation.ANIMATIONLOOPMODE_CYCLE, true);
                            anim.setKeys([{ frame: 0, value: 0 }, { frame: 60, value: Math.PI }, { frame: 120, value: 0 }, { frame: 180, value: -Math.PI }, { frame: 240, value: 0 }]);
                            sphereAnimated.animations.push(anim);
                            anim = new babylonjs_1.Animation('Position', 'position', 60, babylonjs_1.Animation.ANIMATIONTYPE_VECTOR3, babylonjs_1.Animation.ANIMATIONLOOPMODE_CYCLE, true);
                            anim.setKeys([{ frame: 0, value: new babylonjs_1.Vector3(0, 0, 0) }, { frame: 60, value: new babylonjs_1.Vector3(0, 5, 0) }, { frame: 120, value: new babylonjs_1.Vector3(5, 5, 0) }, { frame: 180, value: new babylonjs_1.Vector3(0, 5, 5) }, { frame: 240, value: new babylonjs_1.Vector3(0, 0, 0) }]);
                            sphereAnimated.animations.push(anim);
                            return [4 /*yield*/, this.LoadTexture('assets/textures/documentation.png', scene)];
                        case 6:
                            documentation = _c.sent();
                            planeMaterial = new babylonjs_1.StandardMaterial('PlaneMaterial', scene);
                            planeMaterial.emissiveTexture = documentation;
                            plane = babylonjs_1.Mesh.CreatePlane('Documentation Plane', 100, scene);
                            plane.rotation.y = Math.PI;
                            plane.position.set(0, 55, -135);
                            plane.scaling.set(1280 / 800, 1, 1);
                            plane.material = planeMaterial;
                            plane.actionManager = new babylonjs_1.ActionManager(scene);
                            plane.actionManager.registerAction(new babylonjs_1.ExecuteCodeAction(babylonjs_1.ActionManager.OnDoublePickTrigger, function (evt) {
                                window.open('http://doc.babylonjs.com/resources');
                            }));
                            rainEmitter = new babylonjs_1.Mesh('Rain Particle System Emitter', scene);
                            rainEmitter.position.y = 25;
                            babylonjs_1.Tags.AddTagsTo(rainEmitter, 'added_particlesystem');
                            rain = scene_factory_1.default.CreateDefaultParticleSystem(editor, false, rainEmitter);
                            rain.name = 'Rain Particle System';
                            rain.minEmitBox.set(-50, 0, -50);
                            rain.maxEmitBox.set(50, 0, 50);
                            rain.direction1.set(0, -1, 0);
                            rain.direction2.set(0, -1, 0);
                            rain.gravity.set(0, -20, 0);
                            rain.minSize = rain.maxSize = 5;
                            rain.minLifeTime = rain.maxLifeTime = 2;
                            rain.minEmitPower = rain.maxEmitPower = 2;
                            rain.minAngularSpeed = rain.maxAngularSpeed = 0;
                            rain.color1.set(0.2, 0.2, 0.2, 0.2);
                            rain.color2.set(0.2, 0.2, 0.2, 0.2);
                            rain.colorDead.set(0.2, 0.2, 0.2, 0.2);
                            rain.emitRate = 1000;
                            rain.updateSpeed = 0.06;
                            _a = rain;
                            return [4 /*yield*/, this.LoadTexture('assets/textures/rain.jpg', scene)];
                        case 7:
                            _a.particleTexture = _c.sent();
                            dropEmitter = new babylonjs_1.Mesh('Drop Particle System Emitter', scene);
                            dropEmitter.position.y = 1;
                            babylonjs_1.Tags.AddTagsTo(dropEmitter, 'added_particlesystem');
                            drop = scene_factory_1.default.CreateDefaultParticleSystem(editor, true, dropEmitter);
                            drop.name = 'Rain Particle System';
                            drop.minEmitBox.set(-50, 0, -50);
                            drop.maxEmitBox.set(50, 0, 50);
                            drop.direction1.set(0, 0, 0);
                            drop.direction2.set(0, 0, 0);
                            drop.gravity.set(0, 0, 0);
                            drop.minSize = drop.maxSize = 0.25;
                            drop.minLifeTime = drop.maxLifeTime = 0.03;
                            drop.minEmitPower = drop.maxEmitPower = 1;
                            drop.minAngularSpeed = drop.maxAngularSpeed = 0;
                            drop.color1.set(0.1, 0.1, 0.1, 0.1);
                            drop.color2.set(0.1, 0.1, 0.1, 0.1);
                            drop.colorDead.set(0.1, 0.1, 0.1, 0.1);
                            drop.emitRate = 5000;
                            drop.updateSpeed = 0.01;
                            drop.endSpriteCellID = 4;
                            drop.spriteCellWidth = drop.spriteCellHeight = 64;
                            drop.spriteCellChangeSpeed = 1;
                            _b = drop;
                            return [4 /*yield*/, this.LoadTexture('assets/textures/flake.bmp', scene)];
                        case 8:
                            _b.particleTexture = _c.sent();
                            spot = new babylonjs_1.SpotLight('Spot Light', new babylonjs_1.Vector3(20, 20, 20), new babylonjs_1.Vector3(-1, -2, 0), 2.4, 2.4, scene);
                            shadows = new babylonjs_1.ShadowGenerator(2048, spot, true);
                            shadows.usePoissonSampling = true;
                            shadows.getShadowMap().renderList = [spherePBR, sphereStd];
                            gui = babylonjs_gui_1.AdvancedDynamicTexture.CreateFullscreenUI('ui');
                            gui.layer.layerMask = 2;
                            editor.core.uiTextures.push(gui);
                            // Labels
                            this.CreateLabel(gui, sphereAnimated, 'Animated\nView => Animations...', false, '200px', '60px');
                            this.CreateLabel(gui, sphereStd, 'Standard Material', false, '200px', '30px');
                            this.CreateLabel(gui, spherePBR, 'PBR Material', false, '150px', '30px');
                            this.CreateLabel(gui, plane, 'Documentation (Double Click)', false, '300px', '30px');
                            this.CreateLabel(gui, rainEmitter, 'Rain Particle System', false, '300px', '30px');
                            this.CreateLabel(gui, dropEmitter, 'Drop Particle System', false, '300px', '30px');
                            serializedScene = babylonjs_1.SceneSerializer.Serialize(scene);
                            serializedSceneFile = tools_1.default.CreateFile(tools_1.default.ConvertStringToUInt8Array(JSON.stringify(serializedScene)), 'scene.babylon');
                            babylonjs_1.FilesInput.FilesToLoad['scene.babylon'] = serializedSceneFile;
                            scene_exporter_1.default.CreateFiles(editor);
                            // Pickable
                            scene.meshes.forEach(function (m) {
                                return m.isPickable = true;
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        return DefaultScene;
    }();
    exports.default = DefaultScene;

});
$__System.registerDynamic("5c", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var Request = /** @class */function () {
        function Request() {}
        /**
         * Sends a GET request
         * @param url: url of the request
         * @param headers: the request headers
         */
        Request.Get = function (url, headers) {
            return new Promise(function (resolve, reject) {
                $.ajax({
                    url: url,
                    type: 'GET',
                    headers: headers,
                    success: function (response) {
                        return resolve(response);
                    },
                    error: function (err) {
                        return reject(err);
                    }
                });
            });
        };
        /**
         * Sends a PUT request
         * @param url the url of the request
         * @param content the content to put
         * @param headers the request headers
         */
        Request.Put = function (url, content, headers) {
            return new Promise(function (resolve, reject) {
                $.ajax({
                    url: url,
                    processData: false,
                    data: content,
                    type: 'PUT',
                    headers: headers,
                    success: function () {
                        return resolve();
                    },
                    error: function (err) {
                        return reject(err);
                    }
                });
            });
        };
        /**
         * Sends a POST request
         * @param url the url of the request
         * @param content the content to post
         * @param headers the request headers
         */
        Request.Post = function (url, content, headers) {
            return new Promise(function (resolve, reject) {
                $.ajax({
                    url: url,
                    type: 'POST',
                    contentType: 'application/json',
                    data: content,
                    headers: headers,
                    success: function () {
                        return resolve();
                    },
                    error: function (err) {
                        return reject(err);
                    }
                });
            });
        };
        return Request;
    }();
    exports.default = Request;

});
$__System.registerDynamic("5d", ["c", "28", "b", "24", "17", "5e", "f", "5f", "15", "1f", "23", "50", "51", "52", "55", "22", "1b", "57", "59", "1a", "1c", "1d", "1e", "e", "5b", "18", "5c", "19"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var extensions_1 = $__require("28");
    var core_1 = $__require("b");
    var layout_1 = $__require("24");
    var dialog_1 = $__require("17");
    var resizable_layout_1 = $__require("5e");
    var window_1 = $__require("f");
    var code_1 = $__require("5f");
    var toolbar_1 = $__require("15");
    var graph_1 = $__require("1f");
    var preview_1 = $__require("23");
    var inspector_1 = $__require("50");
    var edit_panel_1 = $__require("51");
    var stats_1 = $__require("52");
    var assets_1 = $__require("55");
    var scene_picker_1 = $__require("22");
    var scene_manager_1 = $__require("1b");
    var scene_preview_1 = $__require("57");
    var scene_icons_1 = $__require("59");
    var scene_exporter_1 = $__require("1a");
    var project_importer_1 = $__require("1c");
    var project_exporter_1 = $__require("1d");
    var project_code_editor_1 = $__require("1e");
    var tools_1 = $__require("e");
    var default_scene_1 = $__require("5b");
    var undo_redo_1 = $__require("18");
    var request_1 = $__require("5c");
    var theme_1 = $__require("19");
    var Editor = /** @class */function () {
        /**
         * Constructor
         * @param scene: a scene to edit. If undefined, a default scene will be created
         */
        function Editor(scene) {
            var _this = this;
            this.playCamera = null;
            this.plugins = {};
            this.sceneFile = null;
            this.guiFiles = [];
            this.projectFile = null;
            this.projectFileName = 'scene.editorproject';
            this._showReloadDialog = true;
            // Private members
            this._lastWaitingItems = 0;
            this._canvasFocused = true;
            // Misc.
            tools_1.default.IsStandalone = !scene;
            // Create editor div
            var mainDiv = tools_1.default.CreateElement('div', 'BABYLON-EDITOR-MAIN', {
                overflow: 'hidden',
                width: '100%',
                height: '100%',
                margin: '0',
                padding: '0',
                touchAction: 'none',
                position: 'fixed'
            });
            document.body.appendChild(mainDiv);
            // Create layout
            this.layout = new layout_1.default('BABYLON-EDITOR-MAIN');
            this.layout.panels = [{
                type: 'top',
                size: 55,
                content: '<a class="babylonjs-logo" href="http://babylonjs.com" target="_blank"></a> <div id="MAIN-TOOLBAR" style="width: 100%; height: 50%;"></div><div id="TOOLS-TOOLBAR" style="width: 100%; height: 50%;"></div>',
                resizable: false
            }, { type: 'main', content: '<div id="MAIN-LAYOUT" style="width: 100%; height: 100%; overflow: hidden;"></div>', resizable: true, tabs: [] }, { type: 'bottom', size: 0, content: '', resizable: false }];
            this.layout.build('BABYLON-EDITOR-MAIN');
            // Create resizable layout
            var layoutVersion = localStorage.getItem('babylonjs-editor-layout-version');
            var layoutStateItem = layoutVersion === Editor.LayoutVersion ? localStorage.getItem('babylonjs-editor-layout-state') || '{ }' : '{ }';
            var layoutState = JSON.parse(layoutStateItem);
            this.resizableLayout = new resizable_layout_1.default('MAIN-LAYOUT');
            this.resizableLayout.panels = layoutState.content || [{
                type: 'row',
                content: [{
                    type: 'row', content: [{ type: 'component', componentName: 'Inspector', width: 20, isClosable: false, html: '<div id="EDITION" style="width: 100%; height: 100%; overflow: auto;"></div>' }, { type: 'column', content: [{ type: 'component', componentName: 'Preview', isClosable: false, html: '<div id="PREVIEW" style="width: 100%; height: 100%;"></div>' }, { type: 'stack', id: 'edit-panel', componentName: 'Tools', isClosable: false, height: 20, content: [{ type: 'component', componentName: 'Stats', width: 20, isClosable: false, html: "\n                                <div id=\"STATS\" style=\"width: 100%; height: 100%\"></div>"
                            }] }] }, { type: 'component', componentName: 'Assets', width: 20, isClosable: false, html: "\n                        <div id=\"ASSETS\" style=\"width: 100%; height: 100%;\"></div>"
                    }, { type: 'component', componentName: 'Graph', width: 20, isClosable: false, html: "\n                        <input id=\"SCENE-GRAPH-SEARCH\" type=\"text\" placeHolder=\"Search\" style=\"width: 100%; height: 40px;\" />\n                        <div id=\"SCENE-GRAPH\" style=\"width: 100%; height: calc(100% - 40px); overflow: auto;\"></div>"
                    }]
                }]
            }];
            this.resizableLayout.build('MAIN-LAYOUT');
            // Events
            this.layout.element.on({ execute: 'after', type: 'resize' }, function () {
                return _this.resize();
            });
            this.resizableLayout.onPanelResize = function () {
                return _this.resize();
            };
            window.addEventListener('resize', function () {
                _this.layout.element.resize();
                _this.resizableLayout.element.updateSize();
                _this.resize();
            });
            // Initialize core
            this.core = new core_1.default();
            this.core.updates.push(this);
            // Initialize preview
            this.preview = new preview_1.default(this);
            // Initialize Babylon.js
            if (!scene) {
                var canvas = document.getElementById('renderCanvasEditor');
                canvas.addEventListener('contextmenu', function (ev) {
                    return ev.preventDefault();
                });
                this.core.engine = new babylonjs_1.Engine(canvas, true, {
                    antialias: true,
                    premultipliedAlpha: false
                });
                this.core.scene = new babylonjs_1.Scene(this.core.engine);
                this.core.scenes.push(this.core.scene);
            } else {
                // On next frame, add canvas etc.
                scene.onAfterRenderObservable.addOnce(function () {
                    // Add canvas
                    var currentCanvas = document.getElementById('renderCanvasEditor');
                    var newCanvas = scene.getEngine().getRenderingCanvas();
                    var parent = currentCanvas.parentElement;
                    currentCanvas.remove();
                    newCanvas.id = currentCanvas.id;
                    parent.appendChild(scene.getEngine().getRenderingCanvas());
                    // Reset
                    _this.graph.clear();
                    _this.graph.fill();
                    _this._createScenePicker();
                    _this.stats.updateStats();
                    _this.assets.refresh();
                });
                // Configure core
                this.core.engine = scene.getEngine();
                this.core.scenes.push(scene);
                this.core.scene = scene;
                // Configure editor
                this.camera = scene.activeCamera;
            }
            // Create toolbar
            this.toolbar = new toolbar_1.default(this);
            // Create edition tools
            this.edition = new inspector_1.default(this);
            // Create graph
            this.graph = new graph_1.default(this);
            this.graph.currentObject = this.core.scene;
            // Edit panel
            this.editPanel = new edit_panel_1.default(this);
            // Stats
            this.stats = new stats_1.default(this);
            this.stats.updateStats();
            // Assets
            this.assets = new assets_1.default(this);
            if (tools_1.default.IsStandalone) {
                // Create editor camera
                this.createEditorCamera();
                // Create files input
                this._createFilesInput();
            }
            // Create scene icons
            this.sceneIcons = new scene_icons_1.default(this);
            // Create scene picker
            this._createScenePicker();
            // Handle events
            this._handleEvents();
            // Electron
            if (tools_1.default.IsElectron()) {
                // Scene Preview
                scene_preview_1.default.Create(this);
                // Check for updates
                this._checkUpdates();
            }
            // Apply theme
            if (tools_1.default.IsStandalone) {
                var theme = localStorage.getItem('babylonjs-editor-theme-name');
                theme_1.default.ThemeName = theme || 'Light';
            }
        }
        /**
         * Runs the editor and Babylon.js engine
         */
        Editor.prototype.run = function () {
            var _this = this;
            this.core.engine.runRenderLoop(function () {
                _this.core.update();
            });
        };
        /**
        * Resizes elements
        */
        Editor.prototype.resize = function () {
            // Edition size
            var editionSize = this.resizableLayout.getPanelSize('Inspector');
            this.edition.resize(editionSize.width);
            // Stats size
            this.stats.layout.element.resize();
            // Resize preview
            this.preview.resize();
            // Edit panel
            var tabsCount = this.resizableLayout.getTabsCount('edit-panel');
            if (tabsCount === 0) this.resizableLayout.setPanelSize('edit-panel', 0);
            // Assets
            this.assets.layout.element.resize();
            // Notify
            this.core.onResize.notifyObservers(null);
        };
        /**
         * On after render the scene
         */
        Editor.prototype.onPostUpdate = function () {
            // Waiting files
            var waiting = this.core.scene.getWaitingItemsCount() + tools_1.default.PendingFilesToLoad;
            if (this._lastWaitingItems !== waiting) {
                this._lastWaitingItems = waiting;
                if (waiting === 0) this.layout.unlockPanel('bottom');else this.layout.lockPanel('bottom', "Waiting for " + waiting + " item(s)", true);
            }
        };
        /**
         * Returns the extension instance identified by the given name
         * @param name the name of the extension
         */
        Editor.prototype.getExtension = function (name) {
            return extensions_1.default.Instances[name];
        };
        /**
         * Adds an "edit panel" plugin
         * @param url the URL of the plugin
         * @param restart: if to restart the plugin
         * @param name: the name of the plugin to show
         * @param params: the params to give to the plugin's constructor
         */
        Editor.prototype.addEditPanelPlugin = function (url, restart, name) {
            if (restart === void 0) {
                restart = false;
            }
            var params = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                params[_i - 3] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var plugin;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!tools_1.default.IsStandalone) {
                                window_1.default.CreateAlert('Cannot run plugins when using the Editor as scene inspector', 'Error');
                                return [2 /*return*/, null];
                            }
                            if (!this.plugins[url]) return [3 /*break*/, 6];
                            if (!restart) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.removePlugin(this.plugins[url])];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 6];
                        case 2:
                            if (!this.plugins[url].onReload) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.plugins[url].onReload()];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4:
                            return [4 /*yield*/, this.editPanel.showPlugin.apply(this.editPanel, [this.plugins[url]].concat(params))];
                        case 5:
                            _a.sent();
                            return [2 /*return*/, this.plugins[url]];
                        case 6:
                            // Lock panel and load plugin
                            this.layout.lockPanel('main', "Loading " + (name || url) + " ...", true);
                            return [4 /*yield*/, this._runPlugin.apply(this, [url].concat(params))];
                        case 7:
                            plugin = _a.sent();
                            this.plugins[url] = plugin;
                            // Add tab in edit panel and unlock panel
                            this.editPanel.addPlugin(url);
                            this.layout.unlockPanel('main');
                            // Create plugin
                            return [4 /*yield*/, plugin.create()];
                        case 8:
                            // Create plugin
                            _a.sent();
                            // Resize and unlock panel
                            this.resize();
                            return [2 /*return*/, plugin];
                    }
                });
            });
        };
        /**
         * Removes the given plugin
         * @param plugin: the plugin to remove
         */
        Editor.prototype.removePlugin = function (plugin, removePanel) {
            if (removePanel === void 0) {
                removePanel = true;
            }
            return __awaiter(this, void 0, void 0, function () {
                var p;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            return [4 /*yield*/, plugin.close()];
                        case 1:
                            _a.sent();
                            if (removePanel) plugin.divElement.remove();
                            for (p in this.plugins) {
                                if (this.plugins[p] === plugin) {
                                    delete this.plugins[p];
                                    break;
                                }
                            }
                            // Remove panel
                            if (removePanel) this.resizableLayout.removePanel(plugin.name);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Restarts the plugins already loaded
         */
        Editor.prototype.restartPlugins = function (removePanels) {
            if (removePanels === void 0) {
                removePanels = false;
            }
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b, _i, p, plugin;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _a = [];
                            for (_b in this.plugins) _a.push(_b);
                            _i = 0;
                            _c.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [3 /*break*/, 5];
                            p = _a[_i];
                            plugin = this.plugins[p];
                            return [4 /*yield*/, this.removePlugin(plugin, removePanels)];
                        case 2:
                            _c.sent();
                            return [4 /*yield*/, this.addEditPanelPlugin(p, false, plugin.name)];
                        case 3:
                            _c.sent();
                            _c.label = 4;
                        case 4:
                            _i++;
                            return [3 /*break*/, 1];
                        case 5:
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Creates the default scene
         * @param showNewSceneDialog: if to show a dialog to confirm creating default scene
         */
        Editor.prototype.createDefaultScene = function (showNewSceneDialog) {
            if (showNewSceneDialog === void 0) {
                showNewSceneDialog = false;
            }
            return __awaiter(this, void 0, void 0, function () {
                var callback;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            callback = function () {
                                return __awaiter(_this, void 0, void 0, function () {
                                    var _this = this;
                                    return __generator(this, function (_a) {
                                        // Create default scene
                                        this.layout.lockPanel('main', 'Loading Preview Scene...', true);
                                        default_scene_1.default.Create(this).then(function () {
                                            _this.graph.clear();
                                            _this.graph.fill();
                                            _this.layout.unlockPanel('main');
                                            // Restart plugins
                                            _this.core.scene.executeWhenReady(function () {
                                                return __awaiter(_this, void 0, void 0, function () {
                                                    var pluginsToLoad;
                                                    var _this = this;
                                                    return __generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0:
                                                                return [4 /*yield*/, this.restartPlugins()];
                                                            case 1:
                                                                _a.sent();
                                                                if (!!showNewSceneDialog) return [3 /*break*/, 3];
                                                                pluginsToLoad = JSON.parse(localStorage.getItem('babylonjs-editor-plugins') || '[]');
                                                                return [4 /*yield*/, Promise.all(pluginsToLoad.map(function (p) {
                                                                    return _this.addEditPanelPlugin(p, false);
                                                                }))];
                                                            case 2:
                                                                _a.sent();
                                                                return [3 /*break*/, 4];
                                                            case 3:
                                                                // Create scene picker
                                                                this._createScenePicker();
                                                                // Update stats
                                                                this.stats.updateStats();
                                                                // Assets
                                                                this.assets.refresh();
                                                                _a.label = 4;
                                                            case 4:
                                                                // Resize
                                                                this.resize();
                                                                return [2 /*return*/];
                                                        }
                                                    });
                                                });
                                            });
                                        });
                                        // Fill graph
                                        this.graph.clear();
                                        this.graph.fill();
                                        return [2 /*return*/];
                                    });
                                });
                            };
                            if (!!showNewSceneDialog) return [3 /*break*/, 2];
                            return [4 /*yield*/, callback()];
                        case 1:
                            return [2 /*return*/, _a.sent()];
                        case 2:
                            dialog_1.default.Create('Create a new scene?', 'Remove current scene and create a new one?', function (result) {
                                return __awaiter(_this, void 0, void 0, function () {
                                    var scene;
                                    return __generator(this, function (_a) {
                                        if (result === 'Yes') {
                                            undo_redo_1.default.Clear();
                                            project_code_editor_1.default.CloseAll();
                                            this.core.scene.dispose();
                                            this.core.removeScene(this.core.scene);
                                            this.core.uiTextures.forEach(function (ui) {
                                                return ui.dispose();
                                            });
                                            scene = new babylonjs_1.Scene(this.core.engine);
                                            this.core.scene = scene;
                                            this.core.scenes.push(scene);
                                            this.createEditorCamera();
                                            // Stats
                                            this.stats.updateStats();
                                            // Assets
                                            this.assets.clear();
                                            // Create default scene?
                                            if (!showNewSceneDialog) callback();else {
                                                this.graph.clear();
                                                this.graph.fill();
                                                this.assets.refresh();
                                                this._createScenePicker();
                                            }
                                            this.core.onSelectObject.notifyObservers(this.core.scene);
                                        }
                                        return [2 /*return*/];
                                    });
                                });
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Creates the editor camera
         */
        Editor.prototype.createEditorCamera = function (type) {
            var _this = this;
            if (type === void 0) {
                type = 'free';
            }
            // Graph node
            var graphNode = null;
            if (this.camera) graphNode = this.graph.getByData(this.camera);
            // Values
            var position = this.core.scene.activeCamera ? this.core.scene.activeCamera.position : new babylonjs_1.Vector3(0, 5, 25);
            var target = this.core.scene.activeCamera ? this.core.scene.activeCamera['_currentTarget'] || new babylonjs_1.Vector3(0, 5, 24) : new babylonjs_1.Vector3(0, 5, 24);
            // Dispose existing camera
            if (this.camera) this.camera.dispose();
            // Editor camera
            if (type === 'free') {
                this.camera = new babylonjs_1.FreeCamera('Editor Camera', position, this.core.scene);
                this.camera.speed = 0.5;
                this.camera.angularSensibility = 3000;
                this.camera.setTarget(target);
                this.camera.attachControl(this.core.engine.getRenderingCanvas(), true);
                // Define target property on FreeCamera
                Object.defineProperty(this.camera, 'target', {
                    get: function () {
                        return _this.camera.getTarget();
                    },
                    set: function (v) {
                        return _this.camera.setTarget(v);
                    }
                });
                // Traditional WASD controls
                this.camera.keysUp.push(87); // "W"
                this.camera.keysUp.push(90); // "Z"
                this.camera.keysLeft.push(65); //"A"
                this.camera.keysLeft.push(81); // "Q"
                this.camera.keysDown.push(83); //"S"
                this.camera.keysRight.push(68); //"D"
            } else if (type === 'arc') {
                this.camera = new babylonjs_1.ArcRotateCamera('Editor Camera', Math.PI / 2, Math.PI / 2, 15, target, this.core.scene);
                this.camera.panningSensibility = 500;
                this.camera.attachControl(this.core.engine.getRenderingCanvas(), true, false);
            } else {
                this.camera = babylonjs_1.Camera.Parse(type, this.core.scene);
            }
            // Configure
            this.camera.maxZ = 10000;
            if (this.core.scene.cameras.length > 1) this.camera.doNotSerialize = true;
            // Update graph node
            if (graphNode) graphNode.data = this.camera;
            // Set as active camera
            this.core.scene.activeCamera = this.camera;
            return this.camera;
        };
        // Handles the events of the editor
        Editor.prototype._handleEvents = function () {
            var _this = this;
            // Undo
            undo_redo_1.default.onUndo = function (e) {
                _this.core.onGlobalPropertyChange.notifyObservers({ baseObject: e.baseObject, object: e.object, property: e.property, value: e.to, initialValue: e.from });
                tools_1.default.SetWindowTitle(_this.projectFileName + ' *');
            };
            document.addEventListener('keyup', function (ev) {
                if (!code_1.default.HasOneFocused() && ev.ctrlKey && ev.key === 'z') {
                    undo_redo_1.default.Undo();
                    _this.edition.updateDisplay();
                }
            });
            // Redo
            undo_redo_1.default.onRedo = function (e) {
                _this.core.onGlobalPropertyChange.notifyObservers({ baseObject: e.baseObject, object: e.object, property: e.property, value: e.to, initialValue: e.from });
                tools_1.default.SetWindowTitle(_this.projectFileName + ' *');
            };
            document.addEventListener('keyup', function (ev) {
                if (!code_1.default.HasOneFocused() && ev.ctrlKey && ev.key === 'y') {
                    undo_redo_1.default.Redo();
                    _this.edition.updateDisplay();
                }
            });
            // Focus / Blur
            window.addEventListener('blur', function () {
                return _this.core.renderScenes = false;
            });
            window.addEventListener('focus', function () {
                return _this.core.renderScenes = true;
            });
            this.core.engine.getRenderingCanvas().addEventListener('focus', function () {
                return _this._canvasFocused = true;
            });
            this.core.engine.getRenderingCanvas().addEventListener('blur', function () {
                return _this._canvasFocused = false;
            });
            // Shift key
            var shiftDown = false;
            document.addEventListener('keydown', function (ev) {
                return !shiftDown && (shiftDown = ev.key === 'Shift');
            });
            document.addEventListener('keyup', function (ev) {
                return ev.key === 'Shift' && (shiftDown = false);
            });
            // Shotcuts
            document.addEventListener('keyup', function (ev) {
                return !code_1.default.HasOneFocused() && ev.key === 'b' && _this.preview.setToolClicked('bounding-box');
            });
            document.addEventListener('keyup', function (ev) {
                return !code_1.default.HasOneFocused() && ev.key === 't' && _this.preview.setToolClicked('position');
            });
            document.addEventListener('keyup', function (ev) {
                return !code_1.default.HasOneFocused() && ev.key === 'r' && _this.preview.setToolClicked('rotation');
            });
            document.addEventListener('keyup', function (ev) {
                if (_this._canvasFocused && ev.key === 'f') {
                    var node = _this.core.currentSelectedObject;
                    if (!node) return;
                    scene_picker_1.default.CreateAndPlayFocusAnimation(_this.camera.getTarget(), node.globalPosition || node.getAbsolutePosition(), _this.camera);
                }
            });
            document.addEventListener('keydown', function (ev) {
                return (ev.ctrlKey || ev.metaKey) && ev.key === 's' && ev.preventDefault();
            });
            document.addEventListener('keyup', function (ev) {
                return (ev.ctrlKey || ev.metaKey) && !shiftDown && ev.key === 's' && project_exporter_1.default.ExportProject(_this);
            });
            document.addEventListener('keyup', function (ev) {
                return (ev.ctrlKey || ev.metaKey) && shiftDown && ev.key === 'S' && project_exporter_1.default.DownloadProjectFile(_this);
            });
            // Save state
            window.addEventListener('beforeunload', function () {
                project_code_editor_1.default.CloseAll();
                if (tools_1.default.IsStandalone) {
                    var state = JSON.stringify(_this.resizableLayout.element.toConfig());
                    localStorage.setItem('babylonjs-editor-layout-state', state);
                    localStorage.setItem('babylonjs-editor-plugins', JSON.stringify(Object.keys(_this.plugins)));
                    localStorage.setItem('babylonjs-editor-theme-name', theme_1.default.ThemeName);
                    localStorage.setItem('babylonjs-editor-layout-version', Editor.LayoutVersion);
                }
            });
        };
        // Runs the given plugin URL
        Editor.prototype._runPlugin = function (url) {
            var params = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                params[_i - 1] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var plugin, args, instance, id;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            return [4 /*yield*/, tools_1.default.ImportScript(url)];
                        case 1:
                            plugin = _a.sent();
                            args = [plugin.default, this].concat(params);
                            // Check first load
                            if (!plugin.default['_Loaded']) {
                                plugin.default['OnLoaded'](this);
                                plugin.default['_Loaded'] = true;
                            }
                            instance = new (Function.prototype.bind.apply(plugin.default, args))();
                            id = instance.name.replace(/ /g, '');
                            instance.divElement = document.getElementById(id) || tools_1.default.CreateElement('div', id, {
                                width: '100%',
                                height: '100%'
                            });
                            return [2 /*return*/, instance];
                    }
                });
            });
        };
        // Creates the files input class and handlers
        Editor.prototype._createFilesInput = function () {
            var _this = this;
            // Add files input
            this.filesInput = new babylonjs_1.FilesInput(this.core.engine, null, null, function () {}, null, function (remaining) {
                // Loading textures
            }, function (files) {
                // Check if a scene has been dropped
                var foundScene = false;
                for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
                    var f = files_1[_i];
                    var ext = tools_1.default.GetFileExtension(f.name).toLowerCase();
                    foundScene = ext === 'babylon' || ext === 'gltf' || ext === 'glb' || ext === 'obj' || ext === 'stl';
                    if (foundScene) break;
                }
                if (!foundScene) return;
                // Starting process
                _this.projectFile = null;
                _this.sceneFile = null;
                babylonjs_1.FilesInput.FilesToLoad = {};
            }, function (file) {
                // Callback
                var callback = function (scene, disposePreviousScene) {
                    return __awaiter(_this, void 0, void 0, function () {
                        var existingCamera, _a, _b, _i, f, file_1, content;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    // Configure editor
                                    this.core.removeScene(this.core.scene, disposePreviousScene);
                                    this.core.uiTextures.forEach(function (ui) {
                                        return ui.dispose();
                                    });
                                    this.core.uiTextures = [];
                                    this.core.scene = scene;
                                    this.core.scenes.push(scene);
                                    this.playCamera = scene.activeCamera;
                                    existingCamera = scene.getCameraByName('Editor Camera');
                                    if (existingCamera) existingCamera.dispose();
                                    this.createEditorCamera();
                                    // Clear scene manager
                                    scene_manager_1.default.Clear();
                                    // Editor project
                                    if (disposePreviousScene) {
                                        extensions_1.default.ClearExtensions();
                                        project_code_editor_1.default.CloseAll();
                                    }
                                    _a = [];
                                    for (_b in babylonjs_1.FilesInput.FilesToLoad) _a.push(_b);
                                    _i = 0;
                                    _c.label = 1;
                                case 1:
                                    if (!(_i < _a.length)) return [3 /*break*/, 5];
                                    f = _a[_i];
                                    file_1 = babylonjs_1.FilesInput.FilesToLoad[f];
                                    if (!(tools_1.default.GetFileExtension(file_1.name) === 'editorproject')) return [3 /*break*/, 4];
                                    this.projectFileName = file_1.name;
                                    tools_1.default.SetWindowTitle(file_1.name);
                                    return [4 /*yield*/, tools_1.default.ReadFileAsText(file_1)];
                                case 2:
                                    content = _c.sent();
                                    return [4 /*yield*/, project_importer_1.default.Import(this, JSON.parse(content))];
                                case 3:
                                    _c.sent();
                                    return [3 /*break*/, 5];
                                case 4:
                                    _i++;
                                    return [3 /*break*/, 1];
                                case 5:
                                    // Default light
                                    if (scene.lights.length === 0) scene.createDefaultCameraOrLight(false, false, false);
                                    // Graph
                                    this.graph.clear();
                                    this.graph.fill();
                                    // Restart plugins
                                    this.restartPlugins();
                                    // Create scene picker
                                    this._createScenePicker();
                                    // Update stats
                                    this.stats.updateStats();
                                    // Toggle interactions (action manager, etc.)
                                    scene_manager_1.default.Toggle(this.core.scene);
                                    // Run scene
                                    this.run();
                                    // Unlock main panel
                                    this.layout.unlockPanel('main');
                                    // Select scene
                                    this.core.onSelectObject.notifyObservers(this.core.scene);
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                var dialogCallback = function (doNotAppend) {
                    return __awaiter(_this, void 0, void 0, function () {
                        var extension;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    // Clear undo / redo
                                    undo_redo_1.default.Clear();
                                    extension = tools_1.default.GetFileExtension(file.name);
                                    if (!(extension !== 'babylon')) return [3 /*break*/, 2];
                                    this.layout.lockPanel('main', 'Importing Loaders...', true);
                                    return [4 /*yield*/, tools_1.default.ImportScript('babylonjs-loaders')];
                                case 1:
                                    _a.sent();
                                    _a.label = 2;
                                case 2:
                                    this.layout.lockPanel('main', 'Importing Physics...', true);
                                    return [4 /*yield*/, tools_1.default.ImportScript('cannon')];
                                case 3:
                                    _a.sent();
                                    this.layout.lockPanel('main', 'Importing Materials...', true);
                                    return [4 /*yield*/, tools_1.default.ImportScript('babylonjs-materials')];
                                case 4:
                                    _a.sent();
                                    this.layout.lockPanel('main', 'Importing Procedural Textures...', true);
                                    return [4 /*yield*/, tools_1.default.ImportScript('babylonjs-procedural-textures')];
                                case 5:
                                    _a.sent();
                                    // Import extensions
                                    this.layout.lockPanel('main', 'Importing Extensions...', true);
                                    return [4 /*yield*/, Promise.all([tools_1.default.ImportScript('behavior-editor'), tools_1.default.ImportScript('graph-editor'), tools_1.default.ImportScript('material-editor'), tools_1.default.ImportScript('post-process-editor'), tools_1.default.ImportScript('post-processes'), tools_1.default.ImportScript('path-finder')])];
                                case 6:
                                    _a.sent();
                                    this.layout.unlockPanel('main');
                                    // Stop render loop
                                    this.core.engine.stopRenderLoop();
                                    // Clear last path
                                    scene_exporter_1.default.ProjectPath = null;
                                    // Load scene
                                    if (doNotAppend) babylonjs_1.SceneLoader.Load('file:', file.name, this.core.engine, function (scene) {
                                        return callback(scene, true);
                                    });else babylonjs_1.SceneLoader.Append('file:', file.name, this.core.scene, function (scene) {
                                        return callback(scene, false);
                                    });
                                    // Lock panel and hide loading UI
                                    this.core.engine.hideLoadingUI();
                                    this.layout.lockPanel('main', 'Loading Scene...', true);
                                    // Delete start scene (when starting the editor) and add new scene
                                    delete babylonjs_1.FilesInput.FilesToLoad['scene.babylon'];
                                    babylonjs_1.FilesInput.FilesToLoad[file.name] = file;
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                if (_this._showReloadDialog) dialog_1.default.Create('Load scene', 'Append to existing one?', function (result) {
                    return dialogCallback(result === 'No');
                });else dialogCallback(true);
                _this._showReloadDialog = true;
            }, function (file, scene, message) {
                // Error callback
                dialog_1.default.Create('Error when loading scene', message, null);
            });
            this.filesInput.monitorElementForDragNDrop(document.getElementById('renderCanvasEditor'));
        };
        // Creates the scene picker
        Editor.prototype._createScenePicker = function () {
            var _this = this;
            if (this.scenePicker) this.scenePicker.removeEvents();
            this.scenePicker = new scene_picker_1.default(this, this.core.scene, this.core.engine.getRenderingCanvas());
            this.scenePicker.onUpdateMesh = function (m) {
                return _this.edition.updateDisplay();
            };
            this.scenePicker.onPickedMesh = function (m) {
                if (!_this.core.disableObjectSelection && m !== _this.core.currentSelectedObject) _this.core.onSelectObject.notifyObservers(m);
            };
        };
        // Checks for updates if electron
        Editor.prototype._checkUpdates = function () {
            return __awaiter(this, void 0, void 0, function () {
                var currentVersion, packageJson, newVersion, answer, saveDirectory, path, lastProgress_1, data;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            return [4 /*yield*/, request_1.default.Get('http://localhost:1337/version')];
                        case 1:
                            currentVersion = _a.sent();
                            return [4 /*yield*/, tools_1.default.LoadFile('http://editor.babylonjs.com/package.json?' + Date.now())];
                        case 2:
                            packageJson = _a.sent();
                            newVersion = JSON.parse(packageJson).version;
                            if (!(currentVersion < newVersion)) return [3 /*break*/, 8];
                            return [4 /*yield*/, dialog_1.default.Create('Update available!', "An update is available! (v" + newVersion + "). Would you like to download it?")];
                        case 3:
                            answer = _a.sent();
                            if (answer === 'No') return [2 /*return*/];
                            return [4 /*yield*/, request_1.default.Get("http://localhost:1337/files:/paths?type=openDirectory")];
                        case 4:
                            saveDirectory = _a.sent();
                            return [4 /*yield*/, request_1.default.Get('http://localhost:1337/installerPath')];
                        case 5:
                            path = _a.sent();
                            lastProgress_1 = '';
                            return [4 /*yield*/, tools_1.default.LoadFile('http://editor.babylonjs.com/' + path, true, function (data) {
                                var progress = (data.loaded * 100 / data.total).toFixed(1);
                                if (progress !== lastProgress_1) {
                                    _this.toolbar.notifyRightMessage("Downloading update... " + progress + "%");
                                    lastProgress_1 = progress;
                                }
                            })];
                        case 6:
                            data = _a.sent();
                            // Reset toolbar message
                            this.toolbar.notifyRightMessage('');
                            // Save!
                            return [4 /*yield*/, request_1.default.Put('http://localhost:1337/files:/write?name=' + path + '&folder=' + saveDirectory[0], tools_1.default.CreateFile(new Uint8Array(data), path), {
                                'Content-Type': 'application/octet-stream'
                            })];
                        case 7:
                            // Save!
                            _a.sent();
                            // Notify
                            window_1.default.CreateAlert("Update has been downloaded and available at: <h3>" + saveDirectory[0] + "</h3>", 'Update downloaded!');
                            _a.label = 8;
                        case 8:
                            return [2 /*return*/];
                    }
                });
            });
        };
        // Static members
        Editor.LayoutVersion = '2.1.1';
        return Editor;
    }();
    exports.default = Editor;

});
$__System.registerDynamic("16", ["e"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools_1 = $__require("e");
    var Toolbar = /** @class */function () {
        /**
         * Constructor
         * @param name the graph name
         */
        function Toolbar(name) {
            this.items = [];
            this.right = undefined;
            this.helpUrl = undefined;
            this.name = name;
        }
        /**
         * Returns if the given item is checked
         * @param id the id of the element (menu, item, etc.)
         */
        Toolbar.prototype.isChecked = function (id, justClicked) {
            if (justClicked === void 0) {
                justClicked = false;
            }
            var result = this.element.get(id);
            return justClicked ? !result.checked : result.checked;
        };
        /**
         * Sets an item checked or unchecked
         * @param id the id of the item
         * @param checked if the item is checked or not
         */
        Toolbar.prototype.setChecked = function (id, checked) {
            if (checked) this.element.check(id);else this.element.uncheck(id);
        };
        /**
         * Updates the given item
         * @param id the id of the item to update
         * @param data the new item
         */
        Toolbar.prototype.updateItem = function (id, data) {
            var item = this.element.get(id);
            Object.assign(item, data);
            this.element.refresh(id);
        };
        /**
         * Notifies the given message on the right
         * @param message the message to notify
         */
        Toolbar.prototype.notifyMessage = function (message) {
            this.element.right = message;
            this.element.render();
        };
        /**
         * Builds the graph
         * @param parentId the parent id
         */
        Toolbar.prototype.build = function (parentId) {
            var _this = this;
            if (this.helpUrl) {
                this.items.push({ type: 'break' });
                this.items.push({ type: 'button', id: 'generated-help-button', img: 'icon-help', caption: 'Help...', text: 'Help...' });
            }
            this.element = $('#' + parentId).w2toolbar({
                name: this.name,
                items: this.items,
                onClick: function (event) {
                    if (event.target === 'generated-help-button') tools_1.default.OpenPopup(_this.helpUrl, 'Documentation', 1280, 800);
                    if (_this.onClick) _this.onClick(event.target);
                },
                right: this.right
            });
        };
        return Toolbar;
    }();
    exports.default = Toolbar;

});
$__System.registerDynamic("60", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var List = /** @class */function () {
        /**
         * Constructor
         * @param name the name of the list
         */
        function List(name) {
            this.element = null;
            this.input = null;
            this.items = [];
            this.name = name;
        }
        /**
         * Sets the new items
         * @param items the new items
         */
        List.prototype.setItems = function (items) {
            this.items = items;
            var field = this.element.data('w2field');
            field.options.items = items.map(function (v) {
                return { id: v, text: v };
            });
            field.refresh();
        };
        /**
         * Sets the selected item
         * @param text: the item's text
         */
        List.prototype.setSelected = function (text) {
            var field = this.element.data('w2field');
            var item = field.options.items.find(function (i) {
                return i.text === text;
            });
            if (item) {
                field.options.selected = item;
                field.refresh();
            }
        };
        /**
         * Returns the selected value of the list
         */
        List.prototype.getSelected = function () {
            return this.element.val();
        };
        /**
         * Builds the element
         * The parent HTML element
         */
        List.prototype.build = function (parent, style) {
            var _this = this;
            if (style === void 0) {
                style = '';
            }
            this.input = $("<input type=\"list\" style=\"" + style + "\" />");
            $(parent).append(this.input);
            this.element = this.input.w2field('list', {
                items: this.items.map(function (v) {
                    return { id: v, text: v };
                }),
                selected: { id: this.items[0], text: this.items[0] },
                renderItem: function (item) {
                    return item.text;
                },
                renderDrop: function (item) {
                    return item.text;
                },
                compare: function (item, search) {
                    return item.text.indexOf(search) !== -1;
                }
            });
            this.element.change(function (ev) {
                return _this.onChange && _this.onChange(_this.element.val());
            });
        };
        return List;
    }();
    exports.default = List;

});
$__System.registerDynamic("61", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var Graph = /** @class */function () {
        /**
         * Constructor
         * @param name the graph name
         */
        function Graph(name) {
            this.name = name;
        }
        /**
         * Clear the graph
         */
        Graph.prototype.clear = function () {
            var toRemove = [];
            this.element.nodes.forEach(function (n) {
                return toRemove.push(n.id);
            });
            this.element.remove.apply(this.element, toRemove);
            this.element.nodes = [];
            this.element.refresh();
        };
        /**
         * Adds the given node to the graph
         * @param node: the node to add into the graph
         * @param parent: the optional parent of the node
         */
        Graph.prototype.add = function (node, parent) {
            this.element.add(parent || this.element, node);
        };
        /**
         * Adds a context menu item to the graph when the user
         * right clicks on the node
         * @param menu the menu to add
         */
        Graph.prototype.addMenu = function (menu) {
            this.element.menu.push(menu);
        };
        /**
         * Builds the graph
         * @param parentId the parent id
         */
        Graph.prototype.build = function (parentId) {
            var _this = this;
            this.element = $('#' + parentId).w2sidebar({
                name: this.name,
                img: 'icon-container',
                keyboard: false,
                nodes: [],
                topHTML: this.topContent,
                bottomHTML: this.bottomContent,
                // On the user clicks on a node
                onClick: function (event) {
                    if (_this.onClick && event.node) _this.onClick(event.node.id, event.node.data);
                },
                // On the user clicks on a context menu item
                onMenuClick: function (event) {
                    if (_this.onMenuClick) {
                        var node = _this.element.get(event.target);
                        _this.onMenuClick(event.menuItem.id, node);
                    }
                }
            });
        };
        return Graph;
    }();
    exports.default = Graph;

});
$__System.registerDynamic("19", ["e"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools_1 = $__require("e");
    var ThemeSwitcher = /** @class */function () {
        function ThemeSwitcher() {}
        Object.defineProperty(ThemeSwitcher, "ThemeName", {
            /**
             * Returns the theme's name
             */
            get: function () {
                return this._ThemeName;
            },
            set: function (name) {
                this._ThemeName = name;
                switch (name) {
                    case 'Light':
                        this.Apply(this.LightThemeUrls);
                        break;
                    case 'Dark':
                        this.Apply(this.DarkThemeUrls);
                        break;
                    default:
                        break;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Applies the theme dynamically
         * @param url the url of the theme
         */
        ThemeSwitcher.Apply = function (urls) {
            return __awaiter(this, void 0, void 0, function () {
                var _i, urls_1, url, i, s, href;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!tools_1.default.IsStandalone) return [2 /*return*/];
                            _i = 0, urls_1 = urls;
                            _a.label = 1;
                        case 1:
                            if (!(_i < urls_1.length)) return [3 /*break*/, 4];
                            url = urls_1[_i];
                            return [4 /*yield*/, tools_1.default.ImportScript('./' + url)];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3:
                            _i++;
                            return [3 /*break*/, 1];
                        case 4:
                            for (i = 0; i < document.styleSheets.length; i++) {
                                s = document.styleSheets[i];
                                href = s.href;
                                if (!href) continue;
                                if (this._IsInPath(href, this.LightThemeUrls)) s.disabled = this._ThemeName !== 'Light';
                                if (this._IsInPath(href, this.DarkThemeUrls)) s.disabled = this._ThemeName !== 'Dark';
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        // Returns if the 
        ThemeSwitcher._IsInPath = function (url, urls) {
            if (urls.indexOf(url) !== -1) return true;
            for (var _i = 0, urls_2 = urls; _i < urls_2.length; _i++) {
                var u = urls_2[_i];
                if (url.indexOf(u) !== -1) return true;
            }
            return false;
        };
        // Public members
        ThemeSwitcher.LightThemeUrls = ['node_modules/w2ui/w2ui.css', 'node_modules/golden-layout/src/css/goldenlayout-light-theme.css'];
        ThemeSwitcher.DarkThemeUrls = ['node_modules/golden-layout/src/css/goldenlayout-dark-theme.css', 'css/dark.css'];
        // Private members
        ThemeSwitcher._ThemeName = 'Light';
        return ThemeSwitcher;
    }();
    exports.default = ThemeSwitcher;

});
$__System.registerDynamic("5f", ["e", "19"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools_1 = $__require("e");
    var theme_1 = $__require("19");
    var CodeEditor = /** @class */function () {
        /**
         * Constructor
         */
        function CodeEditor(language, value) {
            if (language === void 0) {
                language = 'javascript';
            }
            if (value === void 0) {
                value = '// Some Code';
            }
            // Public members
            this.editor = null;
            this._language = language;
            this._defaultValue = value;
        }
        /**
         * Remove extra lib from the registered callers
         * @param caller the caller reference (Window)
         */
        CodeEditor.RemoveExtraLib = function (caller) {
            var lib = this.ExtraLibs.find(function (el) {
                return el.caller === caller;
            });
            var index = this.ExtraLibs.indexOf(lib);
            if (index !== -1) this.ExtraLibs.splice(index, 1);
        };
        /**
         * Returns if at least one code editor is focused
         */
        CodeEditor.HasOneFocused = function () {
            for (var _i = 0, _a = this.Instances; _i < _a.length; _i++) {
                var i = _a[_i];
                if (i.isFocused()) return true;
            }
            return false;
        };
        /**
         * Returns the editor's value
         */
        CodeEditor.prototype.getValue = function () {
            return this.editor.getValue();
        };
        /**
         * Sets the value of the editor
         * @param value the value to set
         */
        CodeEditor.prototype.setValue = function (value) {
            this.editor.setValue(value);
        };
        /**
         * Focus the editor
         */
        CodeEditor.prototype.focus = function () {
            this.editor.focus();
        };
        /**
         * Builds the code editor
         * @param parentId the parent id of the editor
         */
        CodeEditor.prototype.build = function (parentId, caller) {
            if (caller === void 0) {
                caller = window;
            }
            return __awaiter(this, void 0, void 0, function () {
                var libs, promises, results, content_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (typeof parentId === 'string') parentId = '#' + parentId;
                            if (!!CodeEditor.ExternalLibraries) return [3 /*break*/, 2];
                            libs = ['assets/typings/babylon.d.ts', 'assets/typings/babylon.gui.module.d.ts', 'assets/typings/babylonjs.materials.module.d.ts', 'assets/typings/babylonjs.proceduralTextures.module.d.ts', 'assets/templates/material-creator/custom-material.d.ts', 'assets/templates/post-process-creator/custom-post-process.d.ts', 'assets/templates/code/path-finder.d.ts', 'assets/templates/code/tools.d.ts', 'assets/templates/code/mobile.d.ts'];
                            promises = libs.map(function (l) {
                                return tools_1.default.LoadFile(l, false);
                            });
                            return [4 /*yield*/, Promise.all(promises)];
                        case 1:
                            results = _a.sent();
                            content_1 = '';
                            results.forEach(function (r) {
                                return content_1 += r + '\n';
                            });
                            content_1 += "\n                declare var scene: BABYLON.Scene;\n                declare var mesh: BABYLON.Mesh;\n                declare var pointlight: BABYLON.PointLight;\n                declare var camera: BABYLON.Camera;\n                declare var universalcamera: BABYLON.UniversalCamera;\n                declare var spotlight: BABYLON.SpotLight;\n                declare var dirlight: BABYLON.DirectionalLight;\n                declare var hemlight: BABYLON.HemisphericLight;\n                declare var groundmesh: BABYLON.GroundMesh;\n                declare var particleSystem: BABYLON.ParticleSystem;\n                declare var gpuParticleSystem: BABYLON.GPUParticleSystem;\n\n                declare var tools: BehaviorCodeTools;\n                declare var mobile: Mobile;\n            ";
                            CodeEditor.ExternalLibraries = content_1;
                            _a.label = 2;
                        case 2:
                            // Import typescript
                            return [4 /*yield*/, tools_1.default.ImportScript('typescript')];
                        case 3:
                            // Import typescript
                            _a.sent();
                            // Create editor
                            this.editor = caller['monaco'].editor.create($(parentId)[0], {
                                value: this._defaultValue,
                                language: this._language,
                                automaticLayout: true,
                                selectionHighlight: true,
                                theme: caller !== window || theme_1.default.ThemeName === 'Dark' ? 'vs-dark' : undefined
                            });
                            if (!CodeEditor.ExtraLibs.find(function (el) {
                                return el.caller === caller;
                            })) {
                                caller['monaco'].languages.typescript.typescriptDefaults.setCompilerOptions({ experimentalDecorators: true, target: 5, allowNonTsExtensions: true });
                                CodeEditor.ExtraLibs.push({
                                    lib: caller['monaco'].languages.typescript.typescriptDefaults.addExtraLib(CodeEditor.ExternalLibraries, 'CodeEditor'),
                                    caller: caller
                                });
                            }
                            this.editor.onDidChangeModelContent(function () {
                                if (_this.onChange) _this.onChange(_this.editor.getValue());
                            });
                            // Register
                            CodeEditor.Instances.push(this.editor);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Transpiles the given TS source to JS source
         * @param source the source to transpile
         */
        CodeEditor.prototype.transpileTypeScript = function (source, moduleName, config) {
            return ts.transpile(source, config || {
                module: 'none',
                target: 'es5',
                experimentalDecorators: true
            }, moduleName + '.ts', undefined, moduleName + '.ts');
        };
        /**
         * Creates a windowed editor
         * @param options: the editor's configuration
         */
        CodeEditor.CreateWindowedEditor = function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var popup;
                var _this = this;
                return __generator(this, function (_a) {
                    popup = tools_1.default.OpenPopup('./code-editor.html#' + name, name, 1280, 800);
                    popup.document.title = name;
                    // Editor page loaded, create editor
                    popup.addEventListener('editorloaded', function () {
                        return __awaiter(_this, void 0, void 0, function () {
                            var code;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        code = new CodeEditor('javascript');
                                        return [4 /*yield*/, code.build(popup.document.getElementById('EDITOR-DIV'), popup)];
                                    case 1:
                                        _a.sent();
                                        code.onChange = function (value) {
                                            if (options.data) {
                                                options.data[options.property] = code.getValue();
                                                if (options.data === options.baseData) options.baseEditor.setValue(options.data[options.property]);
                                            } else if (options.baseData) {
                                                options.baseData[options.property] = options.baseEditor.getValue();
                                            }
                                        };
                                        code.setValue(options.baseData[options.property]);
                                        return [2 /*return*/];
                                }
                            });
                        });
                    });
                    // On close the window, remove extra libs (typings)
                    popup.addEventListener('beforeunload', function () {
                        CodeEditor.RemoveExtraLib(popup);
                    });
                    return [2 /*return*/];
                });
            });
        };
        // Static members
        CodeEditor.ExternalLibraries = null;
        CodeEditor.ExtraLibs = [];
        CodeEditor.CustomLibs = {};
        CodeEditor.Instances = [];
        return CodeEditor;
    }();
    exports.default = CodeEditor;

});
$__System.registerDynamic("14", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var Form = /** @class */function () {
        /**
         * Constructor
         * @param name the name of the form
         */
        function Form(name) {
            // Public members
            this.element = null;
            this.fields = [];
            this.name = name;
        }
        /**
         * Returns if the form is valid
         */
        Form.prototype.isValid = function () {
            return this.element.validate().length === 0;
        };
        /**
         * Builds the form
         * @param parentId the parent id of the form
         */
        Form.prototype.build = function (parentId) {
            var _this = this;
            this.element = $('#' + parentId).w2form({
                name: this.name,
                fields: this.fields,
                onChange: function (event) {
                    event.onComplete = function () {
                        return _this.onChange && _this.onChange();
                    };
                }
            });
        };
        return Form;
    }();
    exports.default = Form;

});
$__System.registerDynamic("17", ["f", "14"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var window_1 = $__require("f");
    var form_1 = $__require("14");
    var Dialog = /** @class */function () {
        function Dialog() {}
        /**
         * Creates a GUI dialog window
         * @param title the title of the window
         * @param body the body of the window
         * @param callback the dialog's callback
         * @param yes callback when user clicks "yes"
         * @param no callback when the user clicks "no"
         */
        Dialog.Create = function (title, body, callback, yes, no) {
            return new Promise(function (resolve) {
                w2confirm(body, title, function (result) {
                    resolve(result);
                    callback && callback(result);
                }).yes(function () {
                    return yes && yes();
                }).no(function () {
                    return no && no();
                });
            });
        };
        /**
         * Creates a GUI dialog with a text input
         * @param title the title of the dialog
         */
        Dialog.CreateWithTextInput = function (title) {
            return new Promise(function (resolve, reject) {
                // Window
                var popin = new window_1.default('AskName');
                popin.title = title;
                popin.body = "<div id=\"ASK-NAME-CREATE-DIALOG\" style=\"width: 100%; height: 100%\"></div>";
                popin.buttons = ['Ok'];
                popin.showClose = false;
                popin.showMax = false;
                popin.width = 500;
                popin.height = 160;
                popin.open();
                // Form
                var form = new form_1.default('ASK-NAME-CREATE-DIALOG');
                form.fields.push({ name: 'Name', required: true, type: 'text', options: {} });
                form.onChange = function () {
                    return popin.onButtonClick('Ok');
                };
                form.build('ASK-NAME-CREATE-DIALOG');
                // Events
                popin.onClose = function () {
                    form.element.destroy();
                    reject('User decided to not give an input');
                };
                popin.onButtonClick = function (id) {
                    if (!form.isValid()) return;
                    resolve(form.element.record['Name']);
                    // Close
                    popin.close();
                };
            });
        };
        return Dialog;
    }();
    exports.default = Dialog;

});
$__System.registerDynamic("24", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var Layout = /** @class */function () {
        /**
         * Constructor
         * @param name the layout name
         */
        function Layout(name) {
            // Public members
            this.element = null;
            this.panels = [];
            this.name = name;
        }
        /**
         * Returns the size of the given panel
         * @param type the panel type (left, top, etc.)
         */
        Layout.prototype.getPanelSize = function (type) {
            var panel = this.getPanelFromType(type);
            return {
                width: panel['width'],
                height: panel['height']
            };
        };
        /**
         * Sets the panel size
         * @param type the panel type (left, top, etc.)
         * @param size the new panel size
         */
        Layout.prototype.setPanelSize = function (type, size) {
            this.element.sizeTo(type, size);
        };
        /**
         * Hides the given panel
         * @param type the panel type (left, top, etc.)
         */
        Layout.prototype.hidePanel = function (type) {
            var panel = this.getPanelFromType(type);
            if (panel.hidden) return;
            this.element.hide(type);
        };
        /**
         * Shows the given panel
         * @param type the panel type (left, top, etc.)
         */
        Layout.prototype.showPanel = function (type) {
            var panel = this.getPanelFromType(type);
            if (!panel.hidden) return;
            this.element.show(type);
        };
        /**
         * Locks the given panel type
         * @param type the panel type
         * @param message the message to show
         * @param showSpinner if to show a spinner
         */
        Layout.prototype.lockPanel = function (type, message, showSpinner) {
            this.element.lock(type, message, showSpinner);
        };
        /**
         * Unlocks the given panel
         * @param type the panel type
         */
        Layout.prototype.unlockPanel = function (type) {
            this.element.unlock(type);
        };
        /**
         * Returns the panel from the given type
         * @param type the panel type
         */
        Layout.prototype.getPanelFromType = function (type) {
            return this.element.get(type);
        };
        /**
         * Builds the layout
         * @param parentId the parent id
         */
        Layout.prototype.build = function (parentId) {
            this.element = $("#" + parentId).w2layout({
                name: this.name,
                panels: this.panels
            });
        };
        return Layout;
    }();
    exports.default = Layout;

});
$__System.registerDynamic("21", ["62"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    $__require("62");
    var Tree = /** @class */function () {
        /**
         * Constructor
         * @param name the tree name
         */
        function Tree(name) {
            this.wholerow = false;
            this.keyboard = false;
            this.multipleSelection = false;
            this.element = null;
            // Protected members
            this.currentSelectedNode = '';
            this.moving = false;
            this.name = name;
        }
        /**
         * Clear the tree
         * @param root: the root node from where to remove children. If undefined, root is taken
         */
        Tree.prototype.clear = function (root) {
            this.element.jstree().delete_node(this.element.jstree().get_node(root || '#').children);
        };
        /**
         * Adds the given node to the tree
         * @param node: the node to add into the tree
         * @param parent: the optional parent of the node
         */
        Tree.prototype.add = function (node, parent) {
            var id = this.element.jstree().create_node(parent || '#', {
                id: node.id,
                text: node.text,
                data: node.data,
                icon: node.img ? 'w2ui-icon ' + node.img : 'w2ui-icon icon-error'
            });
            return this.element.jstree().get_node(id);
        };
        /**
         * Deletes the given node
         * @param id the id of the node
         */
        Tree.prototype.remove = function (id) {
            this.element.jstree().delete_node(id);
        };
        /**
         * Selects the given node
         * @param id the id of the node to select
         */
        Tree.prototype.select = function (id) {
            if (id !== this.currentSelectedNode) {
                this.currentSelectedNode = id;
                this.element.jstree().deselect_all(true);
                this.element.jstree().select_node(id, true);
            }
        };
        /**
         * Returns the selected node
         */
        Tree.prototype.getSelected = function () {
            var id = this.element.jstree().get_selected()[0];
            if (!id) return null;
            return this.element.jstree().get_node(id);
        };
        /**
         * Get the given node
         * @param id the id of the node to get
         */
        Tree.prototype.get = function (id) {
            return this.element.jstree().get_node(id);
        };
        /**
         * Renames the given node
         * @param id the node's id
         * @param name the new name of the node
         */
        Tree.prototype.rename = function (id, name) {
            this.element.jstree('rename_node', id, name);
        };
        /**
         * Expands the given node
         * @param id the id of the node to expand
         */
        Tree.prototype.expand = function (id) {
            this.element.jstree('open_node', id);
        };
        /**
         * Set parent of the given node (id)
         * @param id the id of the node
         * @param parentId the parent id
         */
        Tree.prototype.setParent = function (id, parentId) {
            var node = this.get(id);
            if (!node) return;
            var parent = this.get(parentId);
            if (!parent) return;
            this.moving = true;
            this.element.jstree().move_node(node, parent);
            this.moving = false;
            this.expand(parentId);
        };
        /**
         * Search nodes fitting the given value
         * @param value the value to search
         */
        Tree.prototype.search = function (value) {
            this.element.jstree().search(value);
        };
        /**
         * Destroys the tree
         */
        Tree.prototype.destroy = function () {
            this.element.destroy(false);
            this.onClick = null;
            this.onDblClick = null;
            this.onContextMenu = null;
            this.onMenuClick = null;
            this.onCanDrag = null;
            this.onDrag = null;
        };
        /**
         * Builds the tree
         * @param parentId the parent id
         */
        Tree.prototype.build = function (parentId) {
            var _this = this;
            var plugins = ['contextmenu', 'dnd', 'search', 'state', 'types'];
            if (this.wholerow) plugins.push('wholerow');
            if (this.keyboard) plugins.push('hotkeys');
            this.element = $('#' + parentId).jstree({
                core: {
                    check_callback: true,
                    multiple: this.multipleSelection
                },
                dnd: {
                    use_html5: true,
                    is_draggable: function (nodes) {
                        var node = nodes[0];
                        return _this.onCanDrag && _this.onCanDrag(node.id, node.data);
                    }
                },
                plugins: plugins,
                search: {
                    show_only_matches: true,
                    show_only_matches_children: true
                },
                contextmenu: {
                    items: function () {
                        if (!_this.onContextMenu) return null;
                        var id = _this.element.jstree().get_selected()[0];
                        var node = _this.element.jstree().get_node(id);
                        if (!node) return null;
                        var items = _this.onContextMenu(node.id, node.data);
                        var result = {};
                        items.forEach(function (i) {
                            result[i.id] = {
                                label: i.text,
                                icon: i.img ? 'w2ui-icon ' + i.img : undefined,
                                action: function () {
                                    return i.callback();
                                },
                                separator_before: i.separatorBefore,
                                separator_after: i.separatorAfter
                            };
                        });
                        return result;
                    }
                }
            });
            // Events
            this.element.on('changed.jstree', function (e, data) {
                if (data.action === 'select_node' && _this.onClick) _this.onClick(data.node.id, data.node.data);
            }).on('move_node.jstree', function (e, data) {
                if (!_this.onDrag || _this.moving) return;
                var node = data.node;
                var parent = _this.get(data.parent);
                if (!node || !parent) return;
                var success = _this.onDrag(node.data, parent.data);
                // Revert ?
                if (!success) _this.setParent(node.id, data.old_parent);
            });
            this.element.dblclick(function () {
                if (_this.onDblClick) {
                    var node = _this.getSelected();
                    _this.onDblClick(node.id, node.data);
                }
            });
        };
        return Tree;
    }();
    exports.default = Tree;

});
$__System.registerDynamic("56", ["24", "21", "e"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var layout_1 = $__require("24");
    var tree_1 = $__require("21");
    var tools_1 = $__require("e");
    var ContextMenu = /** @class */function () {
        /**
         * Constructor
         * @param name the name of the context menu
         * @param options the context menu options (width, height, etc.)
         */
        function ContextMenu(name, options) {
            var _this = this;
            this.options = null;
            // Protected members
            this.mouseUpCallback = function (ev) {
                var parent = ev.target;
                while (parent) {
                    if (parent.id === _this.mainDiv.id) break;
                    parent = parent.parentNode;
                }
                if (!parent) {
                    window.removeEventListener('mousedown', _this.mouseUpCallback);
                    _this.hide();
                }
            };
            // Misc.
            this.name = name;
            this.options = options;
            // Build
            this.build(name, options);
        }
        /**
         * Shows the context menu where the user right clicks
         * @param event the mouse event
         */
        ContextMenu.prototype.show = function (event) {
            // Position
            var zoom = parseFloat(this.mainDiv.style.zoom);
            this.mainDiv.style.left = (event.pageX + 10) / zoom + 'px';
            this.mainDiv.style.top = event.pageY + 300 > window.innerHeight ? (window.innerHeight - 300) / zoom + 'px' : event.pageY / zoom + 'px';
            this.mainDiv.style.visibility = '';
            // Size
            this.mainDiv.style.height = this.options.height + 'px';
            this.mainDiv.style.width = this.options.width + 'px';
            // Layout
            this.layout.element.resize();
            // Mouse up (close or not the context menu)
            window.addEventListener('mousedown', this.mouseUpCallback);
            // Prevent default
            event.preventDefault();
        };
        /**
         * Hides the context menu
         */
        ContextMenu.prototype.hide = function () {
            window.removeEventListener('mousedown', this.mouseUpCallback);
            this.mainDiv.style.visibility = 'hidden';
        };
        /**
         * Removes the context menu elements
         */
        ContextMenu.prototype.remove = function () {
            window.removeEventListener('mousedown', this.mouseUpCallback);
            if (this.search) this.search.remove();
            this.tree.element.destroy();
            this.mainDiv.remove();
            this.layout.element.destroy();
        };
        /**
         * Builds the context menu
         * @param name the name of the context menu
         * @param options the context menu options (width, height, etc.)
         */
        ContextMenu.prototype.build = function (name, options) {
            var _this = this;
            // Main div
            var mainDivId = name + "_mainDiv";
            var borderRadius = (options.borderRadius || 8) + 'px';
            this.mainDiv = tools_1.default.CreateElement('div', mainDivId, {
                'width': options.width + 'px',
                'height': options.height + 'px',
                'position': 'absolute',
                'overflow': 'hidden',
                'zoom': '0.8',
                'visibility': 'hidden',
                'opacity': (options.opacity || 1).toString(),
                'box-shadow': '1px 2px 4px rgba(0, 0, 0, .5)',
                'border-radius': borderRadius
            });
            document.body.appendChild(this.mainDiv);
            // Layout
            this.layout = new layout_1.default(mainDivId);
            this.layout.panels = [{
                title: 'Options',
                type: 'main',
                overflow: 'hidden',
                content: "\n                " + (options.search ? "<input id=\"" + name + "_search\" type=\"text\" placeHolder=\"Search\" style=\"width: 100%; height: 40px;\" />" : '') + "\n                <div id=\"" + name + "\" style=\"width: 100%; height: 100%; overflow: auto;\"></div>"
            }];
            this.layout.build(mainDivId);
            // Tree
            this.tree = new tree_1.default(name);
            this.tree.wholerow = true;
            this.tree.keyboard = true;
            this.tree.build(name);
            // Search
            if (options.search) {
                var search_1 = $("#" + name + "_search}");
                search_1.keyup(function () {
                    _this.tree.search(search_1.val());
                    // Select first match
                    var nodes = _this.tree.element.jstree().get_json();
                    for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
                        var n = nodes_1[_i];
                        if (n.state.hidden) continue;
                        for (var _a = 0, _b = n.children; _a < _b.length; _a++) {
                            var c = _b[_a];
                            if (c.state.hidden) continue;
                            var selected = _this.tree.getSelected();
                            if (!selected || selected.id !== c.id) _this.tree.select(c.id);
                            break;
                        }
                        break;
                    }
                });
                this.search = search_1[0];
            }
        };
        return ContextMenu;
    }();
    exports.default = ContextMenu;

});
$__System.registerDynamic("5e", ["63", "e"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var GoldenLayout = $__require("63");
    var tools_1 = $__require("e");
    var ResizableLayout = /** @class */function () {
        /**
         * Constructor
         * @param name the resizable layout name
         */
        function ResizableLayout(name) {
            // Public element
            this.element = null;
            this.panels = [];
            this.showCloseIcon = false;
            // Protected members
            this.containers = {};
            this.configs = {};
            this.name = name;
        }
        /**
         * Returns the size of the given panel
         * @param type: the component name
         */
        ResizableLayout.prototype.getPanelSize = function (name) {
            var panel = this.containers[name];
            return {
                width: panel.width,
                height: panel.height
            };
        };
        /**
         * Sets the given panel size
         * @param name the panel's name
         * @param value the new size of the panel
         */
        ResizableLayout.prototype.setPanelSize = function (name, value) {
            var item = this.element.root.getItemsById(name)[0];
            if (item) {
                item.config.height = value;
                this.element.updateSize();
            }
        };
        /**
         * Shows the given tab
         * @param name the tab to show
         */
        ResizableLayout.prototype.showPanelTab = function (name) {
            var container = this.containers[name];
            if (!container || !container.parent) return;
            var tab = container.parent;
            var stack = tab.parent;
            if (!stack) return;
            try {
                stack.setActiveContentItem(tab);
            } catch (e) {/* Catch silently */}
        };
        /**
         * Removes the given panel
         * @param name the name of the panel to remove
         */
        ResizableLayout.prototype.removePanel = function (name) {
            var container = this.containers[name];
            if (!container || !container.parent) return;
            container.off('show');
            container.off('resize');
            container.off('destroy');
            try {
                container.close();
            } catch (e) {/* Catch silently */}
            delete this.containers[name];
        };
        /**
         * Adds a panel to the layout
         * @param stackId: the stack to add component in
         * @param config: the panel's configuration
         */
        ResizableLayout.prototype.addPanelToStack = function (stackId, config) {
            // Update config
            this.configs[config.componentName] = config;
            // Add container
            try {
                var component = this.element.getComponent(config.componentName);
                var container = this.containers[config.componentName];
                if (container) return this._configureContainer(container, config);
            } catch (e) {
                // Does not exists, create it
                this._registerComponents([config]);
            }
            // Add child in the stack
            this.element.root.getItemsById(stackId)[0].addChild(config);
        };
        /**
         * Returns the tabs count in the given stack id
         * @param stackId the stack id containing tabs
         */
        ResizableLayout.prototype.getTabsCount = function (stackId) {
            var item = this.element.root.getItemsById(stackId)[0];
            if (!item) return -1;
            if (!item.config.content) return -1;
            return item.config.content.length;
        };
        /**
         * Builds the resizable layout
         * @param parentId the parent id
         */
        ResizableLayout.prototype.build = function (parentId) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.element = new GoldenLayout({
                                settings: {
                                    showPopoutIcon: false,
                                    showCloseIcon: this.showCloseIcon,
                                    showMaximiseIcon: true
                                },
                                dimensions: {
                                    minItemWidth: 240,
                                    minItemHeight: 180
                                },
                                labels: {
                                    close: 'Close',
                                    maximise: 'Maximize',
                                    minimise: 'Minimize'
                                },
                                content: this.panels
                            }, $('#' + parentId));
                            // Register components
                            this.panels.forEach(function (p) {
                                return _this._registerComponents(p.content);
                            });
                            // Initialize
                            this.element.init();
                            if (!tools_1.default.IsStandalone) return [3 /*break*/, 2];
                            return [4 /*yield*/, System.import('./node_modules/golden-layout/src/css/goldenlayout-base.css')];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            return [2 /*return*/];
                    }
                });
            });
        };
        // Registers all components
        ResizableLayout.prototype._registerComponents = function (content) {
            var _this = this;
            if (!content) return;
            content.forEach(function (c) {
                if (c.type === 'component') {
                    _this.element.registerComponent(c.componentName, function (container) {
                        // Register panel
                        _this.containers[c.componentName] = container;
                        // Configure
                        _this._configureContainer(container, c);
                    });
                }
                _this._registerComponents(c.content);
            });
        };
        // Configure the given container with the given config
        ResizableLayout.prototype._configureContainer = function (container, lastConfig) {
            var _this = this;
            var config = this.configs[lastConfig.componentName] || lastConfig;
            // Add html
            if (config.html) container.getElement().append(typeof config.html === 'function' ? config.html() : config.html);
            // Resize
            container.on('resize', function () {
                return _this.onPanelResize && _this.onPanelResize();
            });
            // Destroy
            container.on('destroy', function () {
                return config.onClose && config.onClose();
            });
            // Click
            var firstShow = true;
            container.on('show', function () {
                // If first show, that means the tab has just been created
                if (firstShow) return firstShow = false;
                config.onClick && config.onClick();
                // Hack hack hack, makes resize working better for canvas
                setTimeout(function () {
                    return window.dispatchEvent(new Event('resize'));
                }, 0);
            });
        };
        return ResizableLayout;
    }();
    exports.default = ResizableLayout;

});
$__System.registerDynamic("18", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var UndoRedo = /** @class */function () {
        function UndoRedo() {}
        /**
         * Pushes a new element in the stack
         * @param element the element to push in the stack
         */
        UndoRedo.Push = function (element) {
            var start = this.CurrentIndex === this.Stack.length - 1 ? this.CurrentIndex + 1 : this.CurrentIndex;
            if (start < 0) start = 0;
            for (var i = start; i < this.Stack.length; i++) {
                this.Stack.splice(i, 1);
                i--;
            }
            this.Stack.push(element);
            this.CurrentIndex = this.Stack.length - 1;
            if (this.Stack.length > this.StackSize) this.Stack.splice(0, 1);
            // Event
            this.onRedo && this.onRedo(element);
        };
        /**
         * Pops an element from the undo/redo stack
         */
        UndoRedo.Pop = function () {
            this.Stack.pop();
            if (this.CurrentIndex > 0) this.CurrentIndex--;
        };
        /**
         * Clears the given scope. For example when an extension has been closed
         * @param scope the scope name
         */
        UndoRedo.ClearScope = function (scope) {
            for (var i = 0; i < this.Stack.length; i++) {
                var element = this.Stack[i];
                if (element.scope === scope) {
                    this.Stack.splice(i, 1);
                    i--;
                    this.CurrentIndex--;
                }
            }
        };
        /**
         * Clears the undo / redo stack
         */
        UndoRedo.Clear = function () {
            this.Stack = [];
            this.CurrentIndex = 0;
        };
        /**
         * Undo an action
         */
        UndoRedo.Undo = function () {
            if (this.Stack.length === 0 || this.CurrentIndex < 0) return null;
            var element = this.Stack[this.CurrentIndex];
            this._SetEffectivePropertyValue(element.object, element.property, element.from);
            if (element.fn) element.fn('from');
            this.CurrentIndex--;
            // Event
            this.onUndo && this.onUndo(element);
            return element;
        };
        /**
         * Redo an action
         */
        UndoRedo.Redo = function () {
            if (this.Stack.length === 0 || this.CurrentIndex >= this.Stack.length - 1) return;
            if (this.CurrentIndex < this.Stack.length) this.CurrentIndex++;
            var element = this.Stack[this.CurrentIndex];
            this._SetEffectivePropertyValue(element.object, element.property, element.to);
            if (element.fn) element.fn('to');
            // Event
            this.onRedo && this.onRedo(element);
            return element;
        };
        // Sets the given value to the given effective property
        UndoRedo._SetEffectivePropertyValue = function (object, property, value) {
            if (!property || !object) return;
            var split = property.split('.');
            if (split.length > 1) {
                property = split[split.length - 1];
                for (var i = 0; i < split.length - 1; i++) object = object[split[i]];
            }
            object[property] = value;
        };
        // Public members
        UndoRedo.Stack = [];
        UndoRedo.CurrentIndex = 0;
        UndoRedo.StackSize = 2000;
        return UndoRedo;
    }();
    exports.default = UndoRedo;

});
$__System.registerDynamic("64", ["c", "65", "e", "18"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var dat = $__require("65");
    var tools_1 = $__require("e");
    var undo_redo_1 = $__require("18");
    var Edition = /** @class */function () {
        /**
         * Constructor
         */
        function Edition() {}
        /**
         * Adds a folder
         * @param name the folder name
         */
        Edition.prototype.addFolder = function (name) {
            return this.element.addFolder(name);
        };
        /**
         * Add a gui controller
         * @param target the target object
         * @param propName the property of the object
         */
        Edition.prototype.add = function (target, propName, other) {
            return this.element.add(target, propName, other);
        };
        /**
         * Removes the dat element
         */
        Edition.prototype.remove = function () {
            this.element.destroy();
            this.element.domElement.parentNode.removeChild(this.element.domElement);
            this.element = null;
        };
        /**
         * Updates the display of all elements
         * @param folder: the root folder
         */
        Edition.prototype.updateDisplay = function (folder) {
            if (!folder) folder = this.element;
            folder.__controllers.forEach(function (c) {
                return c.updateDisplay();
            });
            for (var f in folder.__folders) this.updateDisplay(folder.__folders[f]);
        };
        /**
         * Call the given callback on each recursive onFinishChange
         * @param folder the root folder
         * @param callback the callback when a property changed
         */
        Edition.prototype.onFinishChange = function (folder, callback) {
            if (!folder) folder = this.element;
            folder.__controllers.forEach(function (c) {
                var existingFn = c['__onFinishChange'];
                c.onFinishChange(function (result) {
                    callback(c['property'], result, c['object'], c['initialValue']);
                    if (existingFn) existingFn(result);
                });
            });
            for (var f in folder.__folders) this.onFinishChange(folder.__folders[f], callback);
        };
        /**
         * Call the given callback on each recursive onChange
         * @param folder the root folder
         * @param callback the callback when a property changed
         */
        Edition.prototype.onChange = function (folder, callback) {
            if (!folder) folder = this.element;
            folder.__controllers.forEach(function (c) {
                var existingFn = c['__onChange'];
                c.onChange(function (result) {
                    callback(c['property'], result, c['object'], c['initialValue']);
                    if (existingFn) existingFn(result);
                });
            });
            for (var f in folder.__folders) this.onChange(folder.__folders[f], callback);
        };
        /**
         * Returns a controller identified by its property name
         * @param property the property used by the controller
         * @param parent the parent folder
         */
        Edition.prototype.getController = function (property, parent) {
            if (parent === void 0) {
                parent = this.element;
            }
            var controller = parent.__controllers.find(function (c) {
                return c['property'] === property;
            });
            return controller;
        };
        /**
         * Build the edition tool
         * @param parentId the parent id (dom element)
         */
        Edition.prototype.build = function (parentId) {
            var parent = $('#' + parentId);
            this.element = new dat.GUI({
                autoPlace: false,
                scrollable: true
            });
            parent[0].appendChild(this.element.domElement);
            this.element.useLocalStorage = true;
            this.element.width = parent.width();
            if (tools_1.default.IsStandalone) tools_1.default.ImportScript('./css/dat.gui.css');
        };
        /**
         * Adds a color element
         * @param parent the parent folder
         * @param name the name of the folder
         * @param color the color reference
         */
        Edition.prototype.addColor = function (parent, name, color, callback) {
            var _this = this;
            var target = {
                color: [color.r, color.g, color.b]
            };
            var folder = parent.addFolder(name);
            var picker = {
                callback: function () {
                    var input = document.createElement('input');
                    input.type = 'color';
                    input.value = color.toHexString();
                    input.addEventListener('input', function (ev) {
                        var result = babylonjs_1.Color3.FromHexString(input.value);
                        color.r = result.r;
                        color.g = result.g;
                        color.b = result.b;
                        _this.updateDisplay();
                    });
                    input.addEventListener('change', function (ev) {
                        var result = babylonjs_1.Color3.FromHexString(input.value);
                        color.r = result.r;
                        color.g = result.g;
                        color.b = result.b;
                        _this.updateDisplay();
                    });
                    input.click();
                }
            };
            folder.add(picker, 'callback').name('Color Picker');
            folder.add(color, 'r').min(0).max(1).step(0.01).onChange(function () {
                return callback && callback();
            });
            folder.add(color, 'g').min(0).max(1).step(0.01).onChange(function () {
                return callback && callback();
            });
            folder.add(color, 'b').min(0).max(1).step(0.01).onChange(function () {
                return callback && callback();
            });
            if (color instanceof babylonjs_1.Color4) {
                // Sometimes, color.a is undefined
                color.a = color.a || 0;
                folder.add(color, 'a').min(0).max(1).step(0.01).onChange(function () {
                    return callback && callback();
                });
            }
            return folder;
        };
        /**
         * Adds a position element
         * @param parent the parent folder
         * @param name the name of the folder
         * @param vector the vector reference
         */
        Edition.prototype.addVector = function (parent, name, vector, callback) {
            var folder = parent.addFolder(name);
            folder.add(vector, 'x').step(0.01).onChange(function () {
                return callback && callback();
            });
            folder.add(vector, 'y').step(0.01).onChange(function () {
                return callback && callback();
            });
            if (vector instanceof babylonjs_1.Vector3 || vector instanceof babylonjs_1.Vector4) folder.add(vector, 'z').step(0.01).onChange(function () {
                return callback && callback();
            });
            if (vector instanceof babylonjs_1.Vector4) folder.add(vector, 'w').step(0.01).onChange(function () {
                return callback && callback();
            });
            return folder;
        };
        /**
         * Adds a texture controller
         * @param parent the parent folder
         * @param editor the editor reference
         * @param property the property of the object
         * @param object the object which has a texture
         * @param callback: called when changed texture
         */
        Edition.prototype.addTexture = function (parent, editor, property, object, allowCubes, onlyCubes, callback) {
            if (allowCubes === void 0) {
                allowCubes = false;
            }
            if (onlyCubes === void 0) {
                onlyCubes = false;
            }
            var scene = editor.core.scene;
            var textures = ['None'];
            scene.textures.forEach(function (t) {
                var isCube = t instanceof babylonjs_1.CubeTexture;
                if (isCube && !allowCubes) return;
                if (!isCube && onlyCubes) return;
                textures.push(t.name);
            });
            var target = {
                active: object[property] ? object[property].name : 'None',
                browse: function () {
                    return editor.addEditPanelPlugin('texture-viewer', false, 'Textures Viewer', object, property, allowCubes);
                }
            };
            var controller = parent.add(target, 'active', textures);
            controller.onFinishChange(function (r) {
                var currentTexture = object[property];
                var texture = scene.textures.find(function (t) {
                    return t.name === r;
                });
                object[property] = texture;
                callback && callback(texture);
                // Undo/redo
                undo_redo_1.default.Pop();
                undo_redo_1.default.Push({
                    object: object,
                    from: currentTexture,
                    to: texture,
                    property: property
                });
            });
            parent.add(target, 'browse').name('Browse Texture...');
            return controller;
        };
        return Edition;
    }();
    exports.default = Edition;

});
$__System.registerDynamic("26", ["64"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var edition_1 = $__require("64");
    var AbstractEditionTool = /** @class */function () {
        /**
         * Constructor
         */
        function AbstractEditionTool() {
            // Public members
            this.editor = null;
            this.object = null;
            this.tool = null;
        }
        /**
         * Updates the edition tool
         * @param object: the object to edit
         */
        AbstractEditionTool.prototype.update = function (object) {
            this.object = object;
            // Reset edition element
            if (this.tool) {
                this.tool.remove();
            }
            this.tool = new edition_1.default();
            this.tool.build(this.divId);
            this.tool.element['onResize']();
        };
        /**
         * Called once the user selects a new object in
         * the scene of the graph
         */
        AbstractEditionTool.prototype.clear = function () {};
        /**
         * Sets the name of the tool's tab
         * @param name the new name of the tab
         */
        AbstractEditionTool.prototype.setTabName = function (name) {
            var tab = this.editor.edition.tabs.get(this.divId);
            tab.caption = name;
            this.editor.edition.tabs.refresh();
        };
        return AbstractEditionTool;
    }();
    exports.default = AbstractEditionTool;

});
$__System.registerDynamic("66", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Abstract class representing an editor plugin
     */
    var EditorPlugin = /** @class */function () {
        /**
         * Constructor
         * @param name: the plugin's name
         */
        function EditorPlugin(name) {
            this.name = name;
        }
        /**
         * Closes the plugin
         */
        EditorPlugin.prototype.close = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    $(this.divElement).html('');
                    return [2 /*return*/];
                });
            });
        };
        /**
         * Resizes the current layout giving tabs to draw and hide
         * @param layout the layout to resize
         * @param keep the panels to keep
         * @param hide the panels to hide
         */
        EditorPlugin.prototype.resizeLayout = function (layout, keep, hide) {
            if (!this.editor) return;
            // Responsive-like landscape / portrait
            var panelSize = this.editor.resizableLayout.getPanelSize(this.name);
            if (panelSize.width > panelSize.height) {
                keep.forEach(function (k) {
                    return layout.element.sizeTo(k, panelSize.width / 2);
                });
                hide.forEach(function (h) {
                    return layout.element.show(h);
                });
            } else {
                keep.forEach(function (k) {
                    return layout.element.sizeTo(k, panelSize.width);
                });
                hide.forEach(function (h) {
                    return layout.element.hide(h);
                });
            }
        };
        /**
         * On load the extension for the first time
         */
        EditorPlugin.OnLoaded = function (editor) {};
        EditorPlugin._Loaded = false;
        return EditorPlugin;
    }();
    exports.EditorPlugin = EditorPlugin;

});
$__System.registerDynamic("1e", ["e"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools_1 = $__require("e");
    var CodeProjectEditorFactory = /** @class */function () {
        function CodeProjectEditorFactory() {}
        /**
         * Creates a new project code editor
         * @param editor the editor reference
         * @param options the options of the project code editor
         */
        CodeProjectEditorFactory.Create = function (editor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var url, popup;
                var _this = this;
                return __generator(this, function (_a) {
                    url = tools_1.default.IsElectron() ? './code-editor-debug.html' : './code-editor.html';
                    popup = tools_1.default.OpenPopup(url, name, 1280, 800);
                    popup.document.title = name;
                    // Once loaded, create instance
                    return [2 /*return*/, new Promise(function (resolve) {
                        popup.addEventListener('editorloaded', function () {
                            return __awaiter(_this, void 0, void 0, function () {
                                var codeProjectEditor;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            codeProjectEditor = new popup['CodeEditor'](editor);
                                            return [4 /*yield*/, codeProjectEditor.create()];
                                        case 1:
                                            _a.sent();
                                            // Set scripts
                                            codeProjectEditor.scripts = options.scripts;
                                            codeProjectEditor.refresh();
                                            // Open first script by default
                                            if (options.scripts[0]) codeProjectEditor.codeLayout.openCode(options.scripts[0]);
                                            // Opened
                                            if (options.onOpened) options.onOpened();
                                            // Save
                                            this.Instances.push({ instance: codeProjectEditor, popup: popup });
                                            // Done
                                            resolve(codeProjectEditor);
                                            return [2 /*return*/];
                                    }
                                });
                            });
                        });
                        // On the user closes the code project editor
                        popup.addEventListener('beforeunload', function () {
                            if (options.onClose) options.onClose();
                            // Remove
                            for (var i = 0; i < _this.Instances.length; i++) {
                                var instance = _this.Instances[i];
                                if (instance.popup === popup) {
                                    _this.Instances.splice(i, 1);
                                    break;
                                }
                            }
                        });
                    })];
                });
            });
        };
        /**
         * Closes all the code project editors
         */
        CodeProjectEditorFactory.CloseAll = function () {
            for (var _i = 0, _a = this.Instances; _i < _a.length; _i++) {
                var i = _a[_i];
                i.popup.close();
            }
            this.Instances = [];
        };
        // Public members
        CodeProjectEditorFactory.Instances = [];
        return CodeProjectEditorFactory;
    }();
    exports.default = CodeProjectEditorFactory;

});
$__System.registerDynamic("1b", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var SceneManager = /** @class */function () {
        function SceneManager() {}
        /**
         * Clears the scene manager
         */
        SceneManager.Clear = function () {
            this.ActionManagers = {};
            this.PostProcessExtension = null;
            this.GlowLayer = null;
            this.HighLightLayer = null;
            this.StandardRenderingPipeline = null;
            this.DefaultRenderingPipeline = null;
            this.SSAO2RenderingPipeline = null;
            this.SSAORenderingPipeline = null;
            this.EnvironmentHelper = null;
        };
        /**
         * Toggles all interaction events to disable but keep
         * references like Action Manager references etc.
         * @param scene the scene to toggle
         */
        SceneManager.Toggle = function (scene) {
            var _this = this;
            scene.meshes.forEach(function (m) {
                var savedActionManager = _this.ActionManagers[m.id] || null;
                var currentActionManager = m.actionManager;
                _this.ActionManagers[m.id] = currentActionManager;
                m.actionManager = savedActionManager;
            });
        };
        /**
         * Returns the animatable objects
         * @param scene the scene containing animatables
         */
        SceneManager.GetAnimatables = function (scene) {
            var animatables = [scene];
            if (this.StandardRenderingPipeline) animatables.push(this.StandardRenderingPipeline);
            scene.meshes.forEach(function (m) {
                return animatables.push(m);
            });
            scene.lights.forEach(function (l) {
                return animatables.push(l);
            });
            scene.cameras.forEach(function (c) {
                return animatables.push(c);
            });
            scene.particleSystems.forEach(function (ps) {
                return animatables.push(ps);
            });
            return animatables;
        };
        /**
         * Returns the animation frame bounds (min frame, max frame)
         * @param animatables the animtables to check
         */
        SceneManager.GetAnimationFrameBounds = function (animatables) {
            var bounds = {
                min: Number.MAX_VALUE,
                max: Number.MIN_VALUE
            };
            animatables.forEach(function (a) {
                a.animations.forEach(function (a) {
                    var keys = a.getKeys();
                    keys.forEach(function (k) {
                        if (k.frame < bounds.min) bounds.min = k.frame;
                        if (k.frame > bounds.max) bounds.max = k.frame;
                    });
                });
            });
            return bounds;
        };
        /**
         * Plays all the animtables
         * @param scene: the scene containing the animatables
         * @param animatables the animatables to play
         */
        SceneManager.PlayAllAnimatables = function (scene, animatables) {
            var bounds = SceneManager.GetAnimationFrameBounds(animatables);
            animatables.forEach(function (a) {
                return scene.beginAnimation(a, bounds.min, bounds.max, false, 1.0, null, null, true);
            });
        };
        /**
         * Stops all the animatables
         * @param scene the scene containing the animatables
         * @param animatables the animatable objects
         */
        SceneManager.StopAllAnimatables = function (scene, animatables) {
            var bounds = SceneManager.GetAnimationFrameBounds(animatables);
            animatables.forEach(function (a) {
                var animatable = scene.getAnimatableByTarget(a);
                if (!animatable) animatable = new babylonjs_1.Animatable(scene, a, bounds.min, bounds.max, false, 1.0);
                animatable.appendAnimations(a, a.animations);
                animatable.stop();
                animatable.goToFrame(bounds.min);
            });
        };
        /**
         * Clears all the unused materials from the scene
         * @param scene: the scene containing the materials
         */
        SceneManager.CleanUnusedMaterials = function (scene) {
            var count = 0;
            var used = [];
            scene.meshes.forEach(function (m) {
                return m.material && used.indexOf(m.material) === -1 && used.push(m.material);
            });
            for (var i = 0; i < scene.materials.length; i++) {
                var m = scene.materials[i];
                if (m.name === 'colorShader') continue;
                if (used.indexOf(m) === -1) {
                    m.dispose(true, false);
                    count++;
                    i--;
                }
            }
            return count;
        };
        /**
         * Clears all the unused textures from the scene
         * @param scene the scene containing the textures
         */
        SceneManager.CleanUnusedTextures = function (scene) {
            var count = 0;
            var used = [];
            scene.materials.concat(scene.particleSystems).concat(scene.postProcesses).forEach(function (m) {
                for (var thing in m) {
                    var value = m[thing];
                    if (value instanceof babylonjs_1.BaseTexture && used.indexOf(m[thing]) === -1) used.push(m[thing]);
                }
            });
            for (var i = 0; i < scene.textures.length; i++) {
                var t = scene.textures[i];
                if (!(t instanceof babylonjs_1.RenderTargetTexture) && used.indexOf(t) === -1) {
                    t.dispose();
                    count++;
                    i--;
                }
            }
            return count;
        };
        // Public members
        SceneManager.ActionManagers = {};
        SceneManager.StandardRenderingPipeline = null;
        SceneManager.DefaultRenderingPipeline = null;
        SceneManager.SSAORenderingPipeline = null;
        SceneManager.SSAO2RenderingPipeline = null;
        SceneManager.GlowLayer = null;
        SceneManager.HighLightLayer = null;
        SceneManager.EnvironmentHelper = null;
        SceneManager.PostProcessExtension = null;
        return SceneManager;
    }();
    exports.default = SceneManager;

});
$__System.registerDynamic("e", ["c"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var Tools = /** @class */function () {
        function Tools() {}
        /**
         * Creates a div element
         * @param style: the div's style
         */
        Tools.CreateElement = function (type, id, style) {
            var div = document.createElement(type);
            div.id = id;
            if (style) {
                for (var thing in style) div.style[thing] = style[thing];
            }
            return div;
        };
        /**
        * Returns the constructor name of the given object
        * @param obj the object
        */
        Tools.GetConstructorName = function (obj) {
            var ctrName = obj !== undefined && obj !== null && obj.constructor ? obj.constructor.name : '';
            if (ctrName === '') ctrName = typeof obj;
            return ctrName;
        };
        /**
         * Returns if the browser is running in Electron
         */
        Tools.IsElectron = function () {
            return navigator.userAgent.indexOf('Electron') !== -1;
        };
        /**
        * Returns the file type for the given extension
        */
        Tools.GetFileType = function (extension) {
            switch (extension) {
                case 'png':
                    return 'image/png';
                case 'jpg':
                case 'jpeg':
                    return 'image/jpeg';
                case 'bmp':
                    return 'image/bmp';
                case 'tga':
                    return 'image/targa';
                case 'dds':
                    return 'image/vnd.ms-dds';
                case 'wav':
                case 'wave':
                    return 'audio/wav';
                //case 'audio/x-wav';
                case 'mp3':
                    return 'audio/mpeg';
                case 'mpg':
                case 'mpeg':
                    return 'audio/mpeg';
                //case 'audio/mpeg3';
                //case 'audio/x-mpeg-3';
                case 'ogg':
                    return 'audio/ogg';
                default:
                    return '';
            }
        };
        /**
         * Creates a window popup
         * @param url the URL of the popup
         * @param name: the name of the popup
         * @param width the width of the popup
         * @param height the height of the popup
         */
        Tools.OpenPopup = function (url, name, width, height) {
            var features = ['width=' + width, 'height=' + height, 'top=' + window.screenY + Math.max(window.outerHeight - height, 0) / 2, 'left=' + window.screenX + Math.max(window.outerWidth - width, 0) / 2, 'status=no', 'resizable=yes', 'toolbar=no', 'menubar=no', 'menubar=no', 'scrollbars=yes', 'dependent=yes', 'nodeIntegration=no'];
            var popup = window.open(url, name, features.join(','));
            popup.focus();
            return popup;
        };
        /**
         * Set window's title
         * @param title the title of the window
         */
        Tools.SetWindowTitle = function (title) {
            document.title = "Babylon.js Editor - (" + title + ")";
        };
        /**
        * Returns the file extension
        * @param filename: the file's name
        */
        Tools.GetFileExtension = function (filename) {
            var index = filename.lastIndexOf('.');
            if (index < 0) return filename;
            return filename.substring(index + 1);
        };
        /**
        * Returns the filename without extension
        * @param filename: the filename (path)
        * @param withPath: if the return value should contain all path
        */
        Tools.GetFilenameWithoutExtension = function (filename, withPath) {
            var lastDot = filename.lastIndexOf('.');
            var lastSlash = filename.lastIndexOf('/');
            if (lastSlash === -1) lastSlash = filename.lastIndexOf('\\'); // Windows
            return filename.substring(withPath ? 0 : lastSlash + 1, lastDot);
        };
        /**
         * Returns the filename
         * @param filename: the complete filename with path
         */
        Tools.GetFilename = function (filename) {
            return this.GetFilenameWithoutExtension(filename, false) + '.' + this.GetFileExtension(filename);
        };
        /**
         * Creates an open file dialog
         * @param callback called once the user selects files
         */
        Tools.OpenFileDialog = function (callback) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                        var input = Tools.CreateElement('input', 'TextureViewerInput');
                        input.type = 'file';
                        input.multiple = true;
                        input.onchange = function (ev) {
                            callback && callback(ev.target['files']);
                            input.remove();
                            resolve(ev.target['files']);
                        };
                        input.click();
                    })];
                });
            });
        };
        /**
         * Returns the base url of the window
         */
        Tools.GetBaseURL = function () {
            var url = window.location.href;
            url = url.replace(babylonjs_1.Tools.GetFilename(url), '');
            return url;
        };
        /**
         * Sorts the given string array alphabetically
         * @param arr: the array to sort
         * @param property: the property to take
         */
        Tools.SortAlphabetically = function (arr, property) {
            arr.sort(function (a, b) {
                a = property ? a[property] : a;
                b = property ? b[property] : b;
                a = a.toUpperCase();
                b = b.toUpperCase();
                return a < b ? -1 : a > b ? 1 : 0;
            });
        };
        /**
         * Creates a new File (blob today to fix Edge compatibility)
         * @param buffer the file's buffer
         * @param filename the file's name
         */
        Tools.CreateFile = function (buffer, filename) {
            var blob = new Blob([buffer], { type: Tools.GetFileType(this.GetFileExtension(filename)) });
            blob['name'] = babylonjs_1.Tools.GetFilename(filename);
            return blob;
        };
        /**
         * Loads a file using HTTP request
         * @param url the url of the file
         * @param arrayBuffer if should load file as arraybuffer
         */
        Tools.LoadFile = function (url, arrayBuffer, onProgress) {
            if (arrayBuffer === void 0) {
                arrayBuffer = false;
            }
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.PendingFilesToLoad++;
                        babylonjs_1.Tools.LoadFile(url, function (data) {
                            _this.PendingFilesToLoad--;
                            resolve(data);
                        }, function (data) {
                            if (onProgress) onProgress(data);
                        }, null, arrayBuffer, function (r, e) {
                            _this.PendingFilesToLoad--;
                            reject(e);
                        });
                    })];
                });
            });
        };
        /**
         * Loads a file and creates a new File added to the FilesToLoad
         * @param url: the URLof the file
         */
        Tools.CreateFileFromURL = function (url) {
            return __awaiter(this, void 0, void 0, function () {
                var filename, data, file, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            filename = babylonjs_1.Tools.GetFilename(url).toLowerCase();
                            if (babylonjs_1.FilesInput.FilesToLoad[filename]) return [2 /*return*/, babylonjs_1.FilesInput.FilesToLoad[filename]];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3,, 4]);
                            return [4 /*yield*/, this.LoadFile(url, true)];
                        case 2:
                            data = _a.sent();
                            file = this.CreateFile(new Uint8Array(data), filename);
                            babylonjs_1.FilesInput.FilesToLoad[filename] = file;
                            return [2 /*return*/, file];
                        case 3:
                            e_1 = _a.sent();
                            return [2 /*return*/, Promise.reject(e_1)];
                        case 4:
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
        * Converts a string to an UInt8Array
        $ @param str: the string to convert
        */
        Tools.ConvertStringToUInt8Array = function (str) {
            var len = str.length;
            var array = new Uint8Array(len);
            for (var i = 0; i < len; i++) array[i] = str.charCodeAt(i);
            return array;
        };
        /**
         * Reads the given file
         * @param file the file to read
         * @param arrayBuffer if should read as array buffer
         */
        Tools.ReadFile = function (file, arrayBuffer) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                        babylonjs_1.Tools.ReadFile(file, function (data) {
                            resolve(data);
                        }, null, arrayBuffer);
                    })];
                });
            });
        };
        /**
         * Reads a file as base 64
         * @param file the file to read
         */
        Tools.ReadFileAsBase64 = function (file) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                        babylonjs_1.Tools.ReadFileAsDataURL(file, function (data) {
                            resolve(data);
                        }, null);
                    })];
                });
            });
        };
        /**
         * Reads a file as text
         * @param file the file to read
         */
        Tools.ReadFileAsText = function (file) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            return [4 /*yield*/, this.ReadFile(file, false)];
                        case 1:
                            return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        /**
         * Reads a file as array buffer
         * @param file the file to read
         */
        Tools.ReadFileAsArrayBuffer = function (file) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            return [4 /*yield*/, this.ReadFile(file, true)];
                        case 1:
                            return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        /**
         * Imports a new script returning its exported object
         * @param url the URL / NAME of the script
         */
        Tools.ImportScript = function (url) {
            return System.import(url);
        };
        /**
         * According to the navigator, returns if the file API
         * is supported
         */
        Tools.isFileApiSupported = function (showAlert) {
            try {
                var f = new File([''], 'test.txt', {
                    type: this.GetFileExtension('test.txt')
                });
                return true;
            } catch (e) {
                if (showAlert) alert('Your navigator doesn\'t support full File API. Cannot load the scene. Please try with another navigator.');
                return false;
            }
        };
        // Public members
        Tools.PendingFilesToLoad = 0;
        Tools.IsStandalone = true;
        return Tools;
    }();
    exports.default = Tools;

});
$__System.registerDynamic("f", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var Window = /** @class */function () {
        /**
         * Constructor
         * @param name: the name of the window
         */
        function Window(name) {
            this.element = null;
            this.title = '';
            this.body = '';
            this.buttons = [];
            this.width = 800;
            this.height = 600;
            this.showMax = true;
            this.showClose = true;
            this.name = name;
        }
        /**
         * Closes the window
         */
        Window.prototype.close = function () {
            this.element.close();
        };
        /**
         * Locks the window
         * @param message: the message to draw
         */
        Window.prototype.lock = function (message) {
            w2popup.lock(message, true);
        };
        /**
         * Unlocks the window
         */
        Window.prototype.unlock = function () {
            w2popup.unlock();
        };
        /**
         * Opens the window
         */
        Window.prototype.open = function () {
            var _this = this;
            var id = 'WindowButtons';
            var buttons = '';
            for (var i = 0; i < this.buttons.length; i++) {
                buttons += "<button class=\"w2ui-btn\" id=\"" + (id + '-' + this.buttons[i]) + "\">" + this.buttons[i] + "</button>\n";
            }
            this.element = w2popup.open({
                title: this.title,
                body: this.body,
                buttons: buttons,
                width: this.width,
                height: this.height,
                showClose: this.showClose,
                showMax: this.showMax,
                modal: true
            });
            // Bind events
            this.buttons.forEach(function (b) {
                var button = $("#" + id + "-" + b);
                button.click(function (ev) {
                    return _this.onButtonClick && _this.onButtonClick(ev.target.id.split('-')[1]);
                });
            });
            // On close
            this.element.on('close', function () {
                _this.onClose && _this.onClose();
                _this.onToggle = null;
                _this.onMax = null;
                _this.onMin = null;
            });
            this.element.on('max', function (ev) {
                ev.onComplete = function () {
                    return _this.onMax && _this.onMax();
                };
            });
            this.element.on('min', function (ev) {
                ev.onComplete = function () {
                    return _this.onMin && _this.onMin();
                };
            });
            this.element.on('toggle', function (ev) {
                ev.onComplete = function () {
                    return _this.onToggle && _this.onToggle();
                };
            });
        };
        /**
         * Opens a window alert
         * @param message: the message to show
         * @param title: the title of the window alert
         */
        Window.CreateAlert = function (message, title) {
            if (title === void 0) {
                title = 'Notification';
            }
            w2alert(message, title);
        };
        return Window;
    }();
    exports.default = Window;

});
$__System.registerDynamic("67", [], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var Grid = /** @class */function () {
        /**
         * Constructor
         * @param name the name of the grid
         */
        function Grid(name, options) {
            if (options === void 0) {
                options = {};
            }
            this.element = null;
            this.options = {
                toolbar: true,
                footer: true,
                toolbarEdit: true,
                toolbarDelete: true,
                toolbarAdd: true,
                toolbarSearch: true,
                toolbarColumns: true,
                toolbarReload: true,
                header: '',
                columnsHeaders: true,
                multiSelect: true
            };
            this.columns = [];
            this.contextMenuItems = [];
            this.name = name;
            this.options = Object.assign(this.options, options);
        }
        /**
         * Sets the options of the grid
         * @param options options of the grid
         */
        Grid.prototype.setOptions = function (options) {
            for (var thing in options) this.options[thing] = options[thing];
        };
        /**
        * Adds a new row to the grid and refreshes itself
        * @param record the row record to add
        */
        Grid.prototype.addRow = function (record) {
            record.recid = this.element.records.length;
            this.element.add(record);
        };
        /**
         * Adds a new record to the grid but does not refreshes itself
         * @param record the record to add
         */
        Grid.prototype.addRecord = function (record) {
            record.recid = this.element.records.length;
            this.element.records.push(record);
        };
        /**
         * Returns the row at the given index
         * @param selected the row index
         */
        Grid.prototype.getRow = function (selected) {
            return this.element.get(selected.toString());
        };
        /**
         * Sets the selected items
         * @param selected the selected items
         */
        Grid.prototype.select = function (selected) {
            this.element.select.apply(this.element, selected.map(function (s) {
                return s.toString();
            }));
        };
        /**
         * Returns the selected rows
         */
        Grid.prototype.getSelected = function () {
            return this.element.getSelection();
        };
        /**
        * Builds the grid
        * @param parentId the parent id
        */
        Grid.prototype.build = function (parentId) {
            var _this = this;
            this.element = $('#' + parentId).w2grid({
                name: this.name,
                columns: this.columns,
                menu: this.contextMenuItems,
                header: this.options.header,
                fixedBody: true,
                keyboard: false,
                multiSelect: this.options.multiSelect,
                show: {
                    toolbar: this.options.toolbar,
                    footer: this.options.footer,
                    toolbarDelete: this.options.toolbarDelete,
                    toolbarAdd: this.options.toolbarAdd,
                    toolbarEdit: this.options.toolbarEdit,
                    toolbarSearch: this.options.toolbarSearch,
                    toolbarColumns: this.options.toolbarColumns,
                    toolbarReload: this.options.toolbarReload,
                    header: this.options.header !== '',
                    columnHeaders: this.options.columnsHeaders
                },
                onClick: function (event) {
                    event.onComplete = function () {
                        var selected = _this.element.getSelection();
                        if (selected.length < 1) return;
                        if (_this.onClick) _this.onClick(selected);
                    };
                },
                onAdd: function () {
                    if (_this.onAdd) _this.onAdd();
                },
                onEdit: function (event) {
                    if (_this.onEdit) _this.onEdit(event.recid);
                },
                onDelete: function (event) {
                    if (event.force) {
                        var selected_1 = _this.element.getSelection();
                        event.onComplete = function () {
                            if (_this.onDelete) _this.onDelete(selected_1);
                            for (var i = 0; i < _this.element.records.length; i++) _this.element.records[i]['recid'] = i;
                        };
                    }
                },
                onChange: function (event) {
                    if (typeof event.recid !== 'number') return;
                    if (_this.onChange) {
                        event.onComplete = function () {
                            _this.onChange(event.recid, event.value_new);
                            _this.element.save();
                        };
                    }
                },
                onMenuClick: function (event) {
                    if (_this.onContextMenu) _this.onContextMenu(event.menuItem.id, event.recid);
                }
            });
        };
        return Grid;
    }();
    exports.default = Grid;

});
$__System.registerDynamic("10", ["c", "f", "67"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var window_1 = $__require("f");
    var grid_1 = $__require("67");
    var Picker = /** @class */function () {
        /**
         * Constructor
         */
        function Picker(title) {
            // Public members
            this.items = [];
            this.selected = [];
            this.window = null;
            this.grid = null;
            this.search = false;
            this.title = title;
        }
        /**
         * Adds the given items to pick
         * @param items: items to add
         */
        Picker.prototype.addItems = function (items) {
            var _this = this;
            items.forEach(function (i) {
                return !babylonjs_1.Tags.MatchesQuery(i, 'temp') && _this.items.push(i.name || i.id);
            });
        };
        /**
         * Clears the current items
         */
        Picker.prototype.clear = function () {
            this.items = [];
            if (this.grid) this.grid.element.clear();
        };
        /**
         * Adds the given items as selected
         * @param items: items to add
         */
        Picker.prototype.addSelected = function (items) {
            var _this = this;
            items.forEach(function (i) {
                return _this.selected.push(i.name || i.id);
            });
        };
        /**
         * Closes the picker
         */
        Picker.prototype.close = function () {
            this.grid.element.destroy();
        };
        /**
         * Builds the object picker
         * @param callback: called when user clicks the button "ok"
         */
        Picker.prototype.open = function (callback) {
            var _this = this;
            this.window = new window_1.default('Picker');
            this.window.buttons = ['Ok', 'Close'];
            this.window.title = this.title;
            this.window.body = '<div id="PICKER-CONTAINER" style="width: 100%; height: 100%;"></div>';
            this.window.onClose = function () {
                return _this.close();
            };
            this.window.onToggle = function () {
                return _this.grid.element.resize();
            };
            this.window.onButtonClick = function (id) {
                if (id === 'Ok') {
                    var selected = _this.grid.getSelected();
                    callback(selected.map(function (s) {
                        return {
                            id: s,
                            name: _this.items[s]
                        };
                    }), selected);
                }
                _this.close();
                _this.window.close();
            };
            this.window.open();
            // Create grid
            this.grid = new grid_1.default('PickerGrid');
            this.grid.columns = [{ field: 'name', caption: 'Name', size: '100%' }];
            this.grid.setOptions({
                toolbarAdd: false,
                toolbarReload: false,
                toolbarEdit: false,
                toolbarDelete: false,
                toolbarSearch: this.search
            });
            this.grid.build('PICKER-CONTAINER');
            // Add items to the grid
            this.refreshGrid();
        };
        /**
         * Adds current items to the grid
         */
        Picker.prototype.refreshGrid = function () {
            var _this = this;
            this.items.forEach(function (i, index) {
                return _this.grid.addRecord({ name: i, recid: index });
            });
            this.grid.select(this.selected.map(function (s) {
                return _this.items.indexOf(s);
            }));
            this.grid.element.refresh();
        };
        return Picker;
    }();
    exports.default = Picker;

});
$__System.registerDynamic("11", ["c", "20", "36", "1b", "e", "f", "10"], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var __awaiter = exports && exports.__awaiter || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var __generator = exports && exports.__generator || function (thisArg, body) {
        var _ = { label: 0, sent: function () {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:case 1:
                        t = op;break;
                    case 4:
                        _.label++;return { value: op[1], done: false };
                    case 5:
                        _.label++;y = op[1];op = [0];continue;
                    case 7:
                        op = _.ops.pop();_.trys.pop();continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;continue;
                        }
                        if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                            _.label = op[1];break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];t = op;break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];_.ops.push(op);break;
                        }
                        if (t[2]) _.ops.pop();
                        _.trys.pop();continue;
                }
                op = body.call(thisArg, _);
            } catch (e) {
                op = [6, e];y = 0;
            } finally {
                f = t = 0;
            }
            if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var babylonjs_1 = $__require("c");
    var babylonjs_gui_1 = $__require("20");
    var babylonjs_materials_1 = $__require("36");
    var scene_manager_1 = $__require("1b");
    var tools_1 = $__require("e");
    var window_1 = $__require("f");
    var picker_1 = $__require("10");
    var SceneFactory = /** @class */function () {
        function SceneFactory() {}
        /**
         * Adds the given node to the scene's graph (on the right)
         * @param editor the editor reference
         * @param node the node to add
         */
        SceneFactory.AddToGraph = function (editor, node) {
            // Add tags
            babylonjs_1.Tags.AddTagsTo(node, 'added');
            // Id
            if (!node.id || node.id === node.name) node.id = babylonjs_1.Tools.RandomId();
            // TODO: add dynamically instead of rebuilding graph
            if (node instanceof babylonjs_gui_1.Control) {
                // TODO: wait for parse and serialize for GUI
                // const texture = editor.core.uiTextures[0];
                // const parent = editor.graph.getByData(texture);
                // if (parent) {
                //     texture.addControl(node);
                //     editor.graph.add(<GraphNode> {
                //         id: node.name,
                //         text: node.name,
                //         img: editor.graph.getIcon(node),
                //         data: node
                //     }, parent.id);
                // }
                editor.graph.clear();
                editor.graph.fill();
            } else if (node instanceof babylonjs_1.Node) {
                editor.graph.add({
                    id: node.id,
                    text: node.name,
                    img: editor.graph.getIcon(node),
                    data: node
                }, node.parent ? node.parent.id : editor.graph.root);
            } else {
                editor.graph.clear();
                editor.graph.fill();
            }
            var selected = editor.graph.getSelected();
            editor.graph.select(selected ? selected.id : editor.graph.root);
            editor.graph.select(node.id);
        };
        /**
         * Creates a new default environment
         * @param editor the editor reference
         */
        SceneFactory.CreateDefaultEnvironment = function (editor) {
            // Remove existing
            if (scene_manager_1.default.EnvironmentHelper) scene_manager_1.default.EnvironmentHelper.dispose();
            scene_manager_1.default.EnvironmentHelper = editor.core.scene.createDefaultEnvironment({
                // Empty for now
            });
            this.AddToGraph(editor, scene_manager_1.default.EnvironmentHelper);
            return scene_manager_1.default.EnvironmentHelper;
        };
        /**
         * Creates a new default particle system
         * @param editor: the editor reference
         * @param emitter: the emitter of the system
         */
        SceneFactory.CreateDefaultParticleSystem = function (editor, spriteSheetEnabled, emitter) {
            var _this = this;
            // Misc
            var scene = editor.core.scene;
            // Create system
            var system = new babylonjs_1.ParticleSystem('New Particle System', 10000, scene, null, spriteSheetEnabled);
            system.id = babylonjs_1.Tools.RandomId();
            if (!emitter) {
                tools_1.default.CreateFileFromURL('assets/textures/flare.png').then(function (f) {
                    return __awaiter(_this, void 0, void 0, function () {
                        var b64;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    return [4 /*yield*/, tools_1.default.ReadFileAsBase64(f)];
                                case 1:
                                    b64 = _a.sent();
                                    system.particleTexture = babylonjs_1.Texture.CreateFromBase64String(b64, 'flare.png', scene);
                                    system.particleTexture.name = system.particleTexture.url = 'flare.png';
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
            }
            system.minAngularSpeed = -0.5;
            system.maxAngularSpeed = 0.5;
            system.minSize = 0.1;
            system.maxSize = 0.5;
            system.minLifeTime = 0.5;
            system.maxLifeTime = 2.0;
            system.minEmitPower = 0.5;
            system.maxEmitPower = 4.0;
            system.emitRate = 400;
            system.blendMode = babylonjs_1.ParticleSystem.BLENDMODE_ONEONE;
            system.minEmitBox = new babylonjs_1.Vector3(0, 0, 0);
            system.maxEmitBox = new babylonjs_1.Vector3(0, 0, 0);
            system.direction1 = new babylonjs_1.Vector3(-1, 1, -1);
            system.direction2 = new babylonjs_1.Vector3(1, 1, 1);
            system.color1 = new babylonjs_1.Color4(1, 0, 0, 1);
            system.color2 = new babylonjs_1.Color4(0, 1, 1, 1);
            system.gravity = new babylonjs_1.Vector3(0, -2.0, 0);
            system.start();
            babylonjs_1.Tags.AddTagsTo(system, 'added');
            // Emitter
            if (emitter) {
                system.emitter = emitter;
                return system;
            }
            var picker = new picker_1.default('Choose Emitter');
            picker.addItems(scene.meshes);
            picker.open(function (items) {
                var emitter = items.length > 0 ? scene.getNodeByName(items[0].name) : null;
                if (!emitter) {
                    emitter = new babylonjs_1.Mesh('New Particle System Emitter', scene);
                    emitter.id = babylonjs_1.Tools.RandomId();
                    babylonjs_1.Tags.AddTagsTo(emitter, 'added_particlesystem');
                }
                system.emitter = emitter;
                _this.AddToGraph(editor, system);
            });
            return system;
        };
        /**
         * Creates a skybox with a sky effect on it (SkyMaterial)
         * @param editor the editor reference
         */
        SceneFactory.CreateSkyEffect = function (editor) {
            var skybox = babylonjs_1.Mesh.CreateBox('SkyBox', 5000, editor.core.scene, false, babylonjs_1.Mesh.BACKSIDE);
            skybox.material = new babylonjs_materials_1.SkyMaterial('Sky Material ' + babylonjs_1.Tools.RandomId(), editor.core.scene);
            this.AddToGraph(editor, skybox);
            babylonjs_1.Tags.AddTagsTo(skybox.material, 'added');
            return skybox;
        };
        /**
         * Creates a new mesh (if createGround set to true) with a water material assigned
         * the water will reflect all the scene's meshes
         * @param editor the editor reference
         */
        SceneFactory.CreateWaterEffect = function (editor, createGround) {
            if (createGround === void 0) {
                createGround = true;
            }
            var material = new babylonjs_materials_1.WaterMaterial('New Water Material', editor.core.scene);
            editor.core.scene.meshes.forEach(function (m) {
                return material.addToRenderList(m);
            });
            tools_1.default.CreateFileFromURL('assets/textures/normal.png').then(function () {
                material.bumpTexture = new babylonjs_1.Texture('file:normal.png', editor.core.scene);
                material.bumpTexture.name = material.bumpTexture['url'] = 'normal.png';
            });
            if (createGround) {
                var mesh = babylonjs_1.Mesh.CreateGround('New Water Mesh', 512, 512, 32, editor.core.scene);
                mesh.material = material;
                this.AddToGraph(editor, mesh);
            }
            babylonjs_1.Tags.AddTagsTo(material, 'added');
            return material;
        };
        /**
         * Creates a new dummy node (transform node)
         * @param editor the editor reference
         */
        SceneFactory.CreateDummyNode = function (editor) {
            var dummy = new babylonjs_1.Mesh('New Dummy Node', editor.core.scene);
            dummy.id = babylonjs_1.Tools.RandomId();
            this.AddToGraph(editor, dummy);
            return dummy;
        };
        /**
         * Creates a new ground mesh
         * @param editor: the editor reference
         */
        SceneFactory.CreateGroundMesh = function (editor) {
            var mesh = babylonjs_1.Mesh.CreateGround('New Ground', 512, 512, 32, editor.core.scene, true);
            this.AddToGraph(editor, mesh);
            return mesh;
        };
        /**
         * Creates a new cube mesh
         * @param editor: the editor reference
         */
        SceneFactory.CreateCube = function (editor) {
            var mesh = babylonjs_1.Mesh.CreateBox('New Cube', 5, editor.core.scene);
            this.AddToGraph(editor, mesh);
            return mesh;
        };
        /**
         * Creates a new sphere mesh
         * @param editor: the editor reference
         */
        SceneFactory.CreateSphere = function (editor) {
            var mesh = babylonjs_1.Mesh.CreateSphere('New Sphere', 32, 5, editor.core.scene);
            this.AddToGraph(editor, mesh);
            return mesh;
        };
        /**
         * Creates a new light
         * @param editor: the editor reference
         * @param type: the light type
         */
        SceneFactory.CreateLight = function (editor, type) {
            var light = null;
            switch (type) {
                case 'point':
                    light = new babylonjs_1.PointLight('New Point Light', new babylonjs_1.Vector3(10, 10, 10), editor.core.scene);
                    break;
                case 'directional':
                    light = new babylonjs_1.DirectionalLight('New Directional Light', new babylonjs_1.Vector3(0, -1, 0), editor.core.scene);
                    break;
                case 'spot':
                    light = new babylonjs_1.SpotLight('New Spot Light', new babylonjs_1.Vector3(10, 10, 10), new babylonjs_1.Vector3(-1, -2, -1), Math.PI / 2, Math.PI / 2, editor.core.scene);
                    break;
                case 'hemispheric':
                    light = new babylonjs_1.HemisphericLight('New Hemispheric Light', new babylonjs_1.Vector3(0, 1, 0), editor.core.scene);
                    break;
                default:
                    break;
            }
            this.AddToGraph(editor, light);
            return light;
        };
        /**
         * Adds a new sound
         * @param editor: the editor reference
         */
        SceneFactory.AddSound = function (editor) {
            var _this = this;
            tools_1.default.OpenFileDialog(function (files) {
                var name = files[0].name.toLowerCase();
                var ext = tools_1.default.GetFileExtension(name);
                if (ext !== 'mp3') return window_1.default.CreateAlert('Supports only MP3 files', 'Cannot add sound');
                babylonjs_1.FilesInput.FilesToLoad[name] = files[0];
                var sound = new babylonjs_1.Sound(name, 'file:' + name, editor.core.scene);
                sound['id'] = babylonjs_1.Tools.RandomId();
                babylonjs_1.Tags.AddTagsTo(sound, 'added');
                _this.AddToGraph(editor, sound);
            });
        };
        /**
         * Creates a new GUI advanced texture
         * @param editor: the editor reference
         */
        SceneFactory.AddGui = function (editor) {
            var gui = babylonjs_gui_1.AdvancedDynamicTexture.CreateFullscreenUI('new ui');
            editor.core.uiTextures.push(gui);
            this.AddToGraph(editor, gui);
            return gui;
        };
        /**
         * Creates a new GUI Image
         * @param editor: the editor reference
         */
        SceneFactory.AddGuiImage = function (editor) {
            var img = new babylonjs_gui_1.Image('New Image');
            this.AddToGraph(editor, img);
            return img;
        };
        return SceneFactory;
    }();
    exports.default = SceneFactory;

});
$__System.registerDynamic("a", ["5d", "e", "18", "19", "24", "16", "60", "67", "10", "61", "f", "5f", "14", "64", "21", "17", "56", "5e", "26", "66", "1e", "1b", "11"], true, function ($__require, exports, module) {
  "use strict";

  var global = this || self,
      GLOBAL = global;
  Object.defineProperty(exports, "__esModule", { value: true });
  var editor_1 = $__require("5d");
  exports.Editor = editor_1.default;
  var tools_1 = $__require("e");
  exports.Tools = tools_1.default;
  var undo_redo_1 = $__require("18");
  exports.UndoRedo = undo_redo_1.default;
  var theme_1 = $__require("19");
  exports.ThemeSwitcher = theme_1.default;
  var layout_1 = $__require("24");
  exports.Layout = layout_1.default;
  var toolbar_1 = $__require("16");
  exports.Toolbar = toolbar_1.default;
  var list_1 = $__require("60");
  exports.List = list_1.default;
  var grid_1 = $__require("67");
  exports.Grid = grid_1.default;
  var picker_1 = $__require("10");
  exports.Picker = picker_1.default;
  var graph_1 = $__require("61");
  exports.Graph = graph_1.default;
  var window_1 = $__require("f");
  exports.Window = window_1.default;
  var code_1 = $__require("5f");
  exports.CodeEditor = code_1.default;
  var form_1 = $__require("14");
  exports.Form = form_1.default;
  var edition_1 = $__require("64");
  exports.Edition = edition_1.default;
  var tree_1 = $__require("21");
  exports.Tree = tree_1.default;
  var dialog_1 = $__require("17");
  exports.Dialog = dialog_1.default;
  var context_menu_1 = $__require("56");
  exports.ContextMenu = context_menu_1.default;
  var resizable_layout_1 = $__require("5e");
  exports.ResizableLayout = resizable_layout_1.default;
  var edition_tool_1 = $__require("26");
  exports.AbstractEditionTool = edition_tool_1.default;
  var plugin_1 = $__require("66");
  exports.EditorPlugin = plugin_1.EditorPlugin;
  var project_code_editor_1 = $__require("1e");
  exports.CodeProjectEditorFactory = project_code_editor_1.default;
  var scene_manager_1 = $__require("1b");
  exports.SceneManager = scene_manager_1.default;
  var scene_factory_1 = $__require("11");
  exports.SceneFactory = scene_factory_1.default;
  exports.default = editor_1.default;

});
})
(function(factory) {
  module.exports = factory(require("babylonjs"), require("babylonjs-gui"), require("babylonjs-materials"), require("babylonjs-serializers"), require("dat-gui"), require("extensions/extensions.js"), require("golden-layout"), require("jstree"), require("socket.io-client"));
});